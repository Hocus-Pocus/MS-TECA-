
MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 1
MV_TECA


                        1  ;***************************************************
                                                      *************************
                        2  ;
                        3  ;                          MV_TECA_V11.asm 8/20/06
                        4  ;
                        5  ;           Real Time Variable Display, and 
                                                   Configurator for MS_TECA_V11
                        6  ;
                        7  ;         By Robert Hiebert with technical assistanc
                                                            e from Dan Williams
                        8  ;           and all those who contributed to the 
                                                            Megasquirt projects
                        9  ;
                       10  ;***************************************************
                                                      *************************
                       11  
                       12  ;***************************************************
                                                      *************************
                       13  ;
                       14  ; This is a custom and compratively primitive 
                                                           version of Megaview,
                       15  ; by B. A. Bowling And A. C. Grippo
                       16  ; It is application specific for MS_TECA and is 
                                                    written in assembler, using
                       17  ; "Win IDE" from P+E Microcomputer Systems, to 
                                                       avoid any unpleasant "C"
                       18  ; compiler issues.
                       19  ; Like MS_ECU and MS_TECA, it is extensively 
                                                     commented, as much for our
                       20  ; benefit, as for those who may wish to modify it 
                                                             for their own use.
                       21  ;
                       22  ;***************************************************
                                                      *************************
                       23  
                       24  ;***************************************************
                                                      *************************
                       25  ;
                       26  ; --------------------------------- Operation 
                                                -------------------------------
                       27  ;
                       28  ; On power up, the unit defaults to "display" mode, 
                                                       screen #0. In this mode,
                       29  ; the user has a choice of 6,(0-5), screens which 
                                                     display the variables name
                       30  ; abbreviation on the top line, and their correspond
                                                        ing real time values on
                       31  ; the bottom line, or the status abbreviation on 
                                                        the top line, and their
                       32  ; corresponding real time status on the lower line. 
                                                              The lower line is
                       33  ; updated every 250 miliseconds.
                       34  ; Screen numbers 6 and 7 are entry points for 
                                                   constant configuration while
                       35  ; in "Configuration" mode.
                       36  ; Screen numbers numbers 8, 9, 10, and 11 are the 
                                                           SCI command screens.
                       37  ; Screen number 12 is the burn constants screen.


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 2
MV_TECA


                       38  ; Screen numbers numbers 13, 14, 15, and 16 are SCI 
                                                          command done screens.
                       39  ; Screen number 17 is the burn constants done 
                                                                        screen.
                       40  ;
                       41  ; Screen 0 is for the transmission and MS_TECA 
                                                           status, and displays
                       42  ; "ML Gr CC TC FC EP EB"
                       43  ; "ML" is Manual Lever Position, (P,R,N,D,M2, or 
                                                           M1) and uses "mlpsp"
                       44  ; "Gr" is Current Gear, (1,2,3, or 4)and uses 
                                                             "mlpsp" and "gear"
                       45  ; "CC" is Coast Clutch applied status, (Y or N), 
                                                              and uses "trans2"
                       46  ; "TC" is Torque Converter Clutch applied status, 
                                                        (Y or N), uses "trans2"
                       47  ; "FC" is DFC permissive status, (Y or N), and uses 
                                                                       "trans2"
                       48  ; "EP" is Exhaust brake permissive, below max 
                                                       exhaust pressure status,
                       49  ;  (Y or N), and uses "trans2"
                       50  ; "EB" is Exhaust brake applied status, (Y or N), 
                                                              and uses "trans2"
                       51  ;
                       52  ; Screen 1 is for the guages, and displays "RPM MPH 
                                                                  Prs TOT Vlt "
                       53  ; "RPM" is Engine RPM in RPM /20, and uses "rpm"
                       54  ; "MPH" is Vehicle Speed, in MPH*2, and uses "mph"
                       55  ; "Prs" is Line Pressure in PSI, and uses "Lpsi"
                       56  ; "TOT" is Transmission Oil Temperature in degreesF+
                                                          40, and uses "TOTemp"
                       57  ; "Vlt" is System Voltage in volts*10, and uses 
                                                                        "volts"
                       58  ;
                       59  ; Screen 2 is to establish EPC Duty Factor/pulse 
                                                            width/line pressure
                       60  ; relationship, and displays "DuF TPP PWH:PWL Prs "
                       61  ; "DuF" is  EPC Duty Factor from "TO" table, stall 
                                                           or shift tables, or,
                       62  ;      absolute values "EPC_TCC", or "EPC_decel", 
                                                                  and uses "df"
                       63  ; "TPP" is Throttle Position in percent, and uses 
                                                                         "TPSp"
                       64  ; "PWH" is final EPC PW Hi byte and uses "EPCpwH"
                       65  ; "PWL" is final EPC PW Lo byte and uses "EPCpwL"
                       66  ; "Prs" is Line Pressure in PSI, and uses "Lpsi"
                       67  ;
                       68  ; Screen 3 is to establish IAC pulse width/engine 
                                                              RPM relationship,
                       69  ; and displays "SeH SeL IAC Ipw RPM "
                       70  ; "SeH is time since MS_TECA power up seconds Hi 
                                                                           byte
                       71  ; "SeL is time since MS_TECA power up seconds Lo 
                                                                           byte
                       72  ; "IAC" is Idle Air Control Sensor 8 bit ADC 
                                                         reading and uses "IAC"
                       73  ; "IACpw" is Idle Air Control pulse width in 100uS, 
                                                               and uses "IACpw"


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 3
MV_TECA


                       74  ; "RPM" is Engine RPM in RPM /20, and uses "rpm"
                       75  ;
                       76  ; Screen 4 is for Duty Factor tuning, and displays 
                                                         "RPM MAP TPP TrA DuF "
                       77  ; "RPM" is Engine RPM in RPM /20, and uses "rpm"
                       78  ; "MAP" is Manifold Absolute Pressure in KPA, and 
                                                                uses uses "kpa"
                       79  ; "TPP" is Throttle Position in percent, and uses 
                                                                         "TPSp"
                       80  ; "TrA" is EPC Trim Correction Adder, and uses 
                                                                      "TrimAdd"
                       81  ; "DuF" is  EPC Duty Factor from "TO" table, stall 
                                                           or shift tables, or,
                       82  ;      absolute values "EPC_TCC", or "EPC_decel", 
                                                                  and uses "df"
                       83  ;
                       84  ; Screen 5 is for Duty Factor observations, before 
                                                         and after corrections,
                       85  ; and displays "DuF TtA TrA DF1 DFF "
                       86  ; "DuF" is  EPC Duty Factor from "TO" table, stall 
                                                           or shift tables, or,
                       87  ;      absolute values "EPC_TCC", or "EPC_decel", 
                                                                  and uses "df"
                       88  ; "TtA" is Trans Oil Temp Corection Adder, and uses 
                                                                       "TOTAdd"
                       89  ; "TrA" is EPC Trim Correction Adder, and uses 
                                                                      "TrimAdd"
                       90  ; "DF1" is "df" after TOT cor, before Trim cor and 
                                                                     uses "df1"
                       91  ; "DFF" is "df1" after Trim cor, (Final EPC Duty 
                                                         Factor) and uses "dff"
                       92  ;
                       93  ; Screen 6 displays "Cons Group1 Prs Mode"
                       94  ; This is the entry point of the first group of 
                                                              constants, and is
                       95  ; accessed by pressing the "Toggle Mode" button
                       96  ;
                       97  ; Screen 7 displays "Cons Group2 Prs Mode"
                       98  ; This is the entry point of the second group of 
                                                              constants, and is
                       99  ; accessed by pressing the "Toggle Mode" button
                      100  ;
                      101  ; Screen 8 displays "UpLd G1 Cons Prs Mde"
                      102  ; This is the entry point to upload the first group 
                                                              of constants from
                      103  ; MS_TECA, and is accessed by pressing the "Toggle 
                                                                   Mode" button
                      104  ;
                      105  ; Screen 9 displays "UpLd G2 Cons Prs Mde"
                      106  ; This is the entry point to upload the second 
                                                        group of constants from
                      107  ; MS_TECA, and is accessed by pressing the "Toggle 
                                                                   Mode" button
                      108  ;
                      109  ; Screen 10 displays "DnLd G1 val Prs Mode"
                      110  ; This is the entry point to download the selected 
                                                                 Cons1 value to
                      111  ; MS_TECA, and is accessed by pressing the "Toggle 


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 4
MV_TECA


                                                                   Mode" button
                      112  ;
                      113  ; Screen 11 displays "DnLd G2 val Prs Mode"
                      114  ; This is the entry point to download the selected 
                                                                 Cons2 value to
                      115  ; MS_TECA, and is accessed by pressing the "Toggle 
                                                                   Mode" button
                      116  ;
                      117  ; Screen 12 displays "Burn Cons Press Mode"
                      118  ; This is the entry point to the Burn Constants 
                                                            from MS_TECA RAM to
                      119  ; Flash section, and is accessed by pressing the 
                                                           "Toggle Mode" button
                      120  ;
                      121  ; Screen 13 displays "UpLd G1 Done Prs Mde"
                      122  ; This screen indicates that the Cons1 group has 
                                                             been uploaded, and
                      123  ; prompts the user to return to display screen #0 
                                                                by pressing the
                      124  ; "Toggle Mode" button
                      125  ;
                      126  ; Screen 14 displays "UpLd G2 Done Prs Mde"
                      127  ; This screen indicates that the Cons2 group has 
                                                             been uploaded, and
                      128  ; prompts the user to return to display screen #0 
                                                                by pressing the
                      129  ; "Toggle Mode" button
                      130  ;
                      131  ; Screen 15 displays "DnLd V1 Done Prs Mde"
                      132  ; This screen indicates that the selected Cons1 
                                                                 value has been
                      133  ; downloaded to MS_TECA RAM, and prompts the user 
                                                                   to return to
                      134  ; display screen #0 by pressing the "Toggle Mode" 
                                                                         button
                      135  ;
                      136  ; Screen 16 displays "DnLd V2 Done Prs Mde"
                      137  ; This screen indicates that the selected Cons2 
                                                                 value has been
                      138  ; downloaded to MS_TECA RAM, and prompts the user 
                                                                   to return to
                      139  ; display screen #0 by pressing the "Toggle Mode" 
                                                                         button
                      140  ;
                      141  ; Screen 17 displays "Burn Done Press Mode"
                      142  ; This screen indicates that the MS_TECA configurati
                                                                   on constants
                      143  ; have been burned from RAM to Flash, and prompts 
                                                                    the user to
                      144  ; return to display screen #0 by pressing the 
                                                           "Toggle Mode" button
                      145  ;
                      146  ; There are 4 control buttons on the display. From 
                                                                 right to left:
                      147  ; PTA3 - Toggle Mode, Display / Configure
                      148  ; PTA2 - Display Freeze / Select Configuration 
                                                                       Constant
                      149  ; PTA1 - Display Scroll Right / Increase Selected 


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 5
MV_TECA


                                                                       Constant
                      150  ; PTA0 - Display Scroll Left / Decrease Selected 
                                                                       Constant
                      151  ;
                      152  ; While in "Display" mode, pressing PTA2 once 
                                                 freezes the screen so the real
                      153  ; time variables are not up dated. Pressing PTA2 
                                                        again will unfreeze the
                      154  ; screen. This is intended for use with the 
                                                              "tuning" screens.
                      155  ; While in "Display" mode, pressing PTA1 will 
                                                    advance to the next display
                      156  ; screen.
                      157  ; While in "Display mode, pressing PTA0 will 
                                                retreat to the previous display
                      158  ; screen.
                      159  ;
                      160  ; Holding PTA0 or PTA1 down for more than 1/2 
                                                  second will "auto repeat" the
                      161  ; function at a rate of 4HZ.
                      162  ;
                      163  ; While in "Display" mode, screens 7 and less, 
                                                   Pressing PTA3 has no effect.
                      164  ; In display screen 8, Pressing PTA3 changes to 
                                                          "Configure" mode, and
                      165  ; selects the first index of constants.
                      166  ; In display screen 9, Pressing PTA3 changes to 
                                                          "Configure" mode, and
                      167  ; selects the second index of constants.
                      168  ; While in "Configure" mode, Pressing PTA3 will 
                                                            return to the first
                      169  ; Display screen.
                      170  ;
                      171  ; While in "Configure" mode, pressing PTA1 will 
                                                            advance to the next
                      172  ; configurable constant in the ordered list.
                      173  ; While in "Configure" mode, pressing PTA0 will 
                                                        retreat to the previous
                      174  ; configurable constant in the ordered list.
                      175  ; While in "Configure" mode presssing PTA2 will 
                                                    select the current diplayed
                      176  ; configurable constant for editing, and display 
                                                        "SELECTED" on the right
                      177  ; lower line. Pressing PTA2 again will unselect the 
                                                             constant and clear
                      178  ; the right lower line.
                      179  ; While a configurable constant is "selected", 
                                                   pressing PTA1 will increment
                      180  ; the value by 1. Pressing PTA0 will decrement the 
                                                                    value by 1.
                      181  ;
                      182  ; Holding PTA0 or PTA1 down for more than 1/2 
                                                  second will "auto repeat" the
                      183  ; function at a rate of 4HZ.
                      184  ;
                      185  ; In "Configure" mode The Flash Configurable 
                                                Constants values are displayed,
                      186  ; on the lower line, in the ordered list im which 


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 6
MV_TECA


                                                     they appear in the MS_TECA
                      187  ; source.
                      188  ;
                      189  ; First is the "TO" table. The display line is 
                                                                   shown below.
                      190  ;
                      191  ; "TO KPArow 0 RPMcol 0", This is modified for the 
                                                                64 TO values by
                      192  ;  incrmenting the column and row numbers, and uses 
                                                          the "TO,x" constants.
                      193  ;
                      194  ; Next we have the RPM bins for the "TO" table
                      195  ;
                      196  ; "TO Tab RPM c0 RPM/20", uses "RPM_range,x"
                      197  ; "TO Tab RPM c1 RPM/20", uses "RPM_range,x"
                      198  ; "TO Tab RPM c2 RPM/20", uses "RPM_range,x"
                      199  ; "TO Tab RPM c3 RPM/20", uses "RPM_range,x"
                      200  ; "TO Tab RPM c4 RPM/20", uses "RPM_range,x"
                      201  ; "TO Tab RPM c5 RPM/20", uses "RPM_range,x"
                      202  ; "TO Tab RPM c6 RPM/20", uses "RPM_range,x"
                      203  ; "TO Tab RPM c7 RPM/20", uses "RPM_range,x"
                      204  ;
                      205  ; Next we have the KPA bins for the "TO" table
                      206  ;
                      207  ; "TO Tab KPA row0 KPA ", uses "KPA_range,x"
                      208  ; "TO Tab KPA row1 KPA ", uses "KPA_range,x"
                      209  ; "TO Tab KPA row2 KPA ", uses "KPA_range,x"
                      210  ; "TO Tab KPA row3 KPA ", uses "KPA_range,x"
                      211  ; "TO Tab KPA row4 KPA ", uses "KPA_range,x"
                      212  ; "TO Tab KPA row5 KPA ", uses "KPA_range,x"
                      213  ; "TO Tab KPA row6 KPA ", uses "KPA_range,x"
                      214  ; "TO Tab KPA row7 KPA ", uses "KPA_range,x"
                      215  ;
                      216  ; Next we have the % bins for the "TPS_range" table
                      217  ;
                      218  ; "Throttle Open % c0 %", uses "TPS_range,x"
                      219  ; "Throttle Open % c1 %", uses "TPS_range,x"
                      220  ; "Throttle Open % c2 %", uses "TPS_range,x"
                      221  ; "Throttle Open % c3 %", uses "TPS_range,x"
                      222  ; "Throttle Open % c4 %", uses "TPS_range,x"
                      223  ; "Throttle Open % c5 %", uses "TPS_range,x"
                      224  ; "Throttle Open % c6 %", uses "TPS_range,x"
                      225  ; "Throttle Open % c7 %", uses "TPS_range,x"
                      226  ;
                      227  ; Next we have the EPC duty factor bins for the 
                                                              "EPC_stall" table
                      228  ;
                      229  ; "EPCdf Stall c0 0-255", uses "EPC_stall,x"
                      230  ; "EPCdf Stall c1 0-255", uses "EPC_stall,x"
                      231  ; "EPCdf Stall c2 0-255", uses "EPC_stall,x"
                      232  ; "EPCdf Stall c3 0-255", uses "EPC_stall,x"
                      233  ; "EPCdf Stall c4 0-255", uses "EPC_stall,x"
                      234  ; "EPCdf Stall c5 0-255", uses "EPC_stall,x"
                      235  ; "EPCdf Stall c6 0-255", uses "EPC_stall,x"
                      236  ; "EPCdf Stall c7 0-255", uses "EPC_stall,x"
                      237  ;
                      238  ; Next we have the EPC duty factor bins for the 
                                                                 "EPC_12" table


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 7
MV_TECA


                      239  ;
                      240  ; "EPCdf 1-->2 c0 0-255", uses "EPC_12,x"
                      241  ; "EPCdf 1-->2 c1 0-255", uses "EPC_12,x"
                      242  ; "EPCdf 1-->2 c2 0-255", uses "EPC_12,x"
                      243  ; "EPCdf 1-->2 c3 0-255", uses "EPC_12,x"
                      244  ; "EPCdf 1-->2 c4 0-255", uses "EPC_12,x"
                      245  ; "EPCdf 1-->2 c5 0-255", uses "EPC_12,x"
                      246  ; "EPCdf 1-->2 c6 0-255", uses "EPC_12,x"
                      247  ; "EPCdf 1-->2 c7 0-255", uses "EPC_12,x"
                      248  ;
                      249  ; Next we have the EPC duty factor bins for the 
                                                                 "EPC_23" table
                      250  ;
                      251  ; "EPCdf 2-->3 c0 0-255", uses "EPC_23,x"
                      252  ; "EPCdf 2-->3 c1 0-255", uses "EPC_23,x"
                      253  ; "EPCdf 2-->3 c2 0-255", uses "EPC_23,x"
                      254  ; "EPCdf 2-->3 c3 0-255", uses "EPC_23,x"
                      255  ; "EPCdf 2-->3 c4 0-255", uses "EPC_23,x"
                      256  ; "EPCdf 2-->3 c5 0-255", uses "EPC_23,x"
                      257  ; "EPCdf 2-->3 c6 0-255", uses "EPC_23,x"
                      258  ; "EPCdf 2-->3 c7 0-255", uses "EPC_23,x"
                      259  ;
                      260  ; Next we have the EPC duty factor bins for the 
                                                                 "EPC_34" table
                      261  ;
                      262  ; "EPCdf 3-->4 c0 0-255", uses "EPC_34,x"
                      263  ; "EPCdf 3-->4 c1 0-255", uses "EPC_34,x"
                      264  ; "EPCdf 3-->4 c2 0-255", uses "EPC_34,x"
                      265  ; "EPCdf 3-->4 c3 0-255", uses "EPC_34,x"
                      266  ; "EPCdf 3-->4 c4 0-255", uses "EPC_34,x"
                      267  ; "EPCdf 3-->4 c5 0-255", uses "EPC_34,x"
                      268  ; "EPCdf 3-->4 c6 0-255", uses "EPC_34,x"
                      269  ; "EPCdf 3-->4 c7 0-255", uses "EPC_34,x"
                      270  ;
                      271  ; Finally, are the configurable constants in the 
                                                         ordered list, with the
                      272  ; value the variable represents
                      273  ;
                      274  ; "EPCdf TCC App  0-255", uses "EPC_TCC"
                      275  ; "EPCdf DFC App  0-255", uses "EPC_decel"
                      276  ; "EPC Rise Time   20mS", uses "EPC_rise"
                      277  ; "EPC Hold Time   20mS", uses "EPC_hold"
                      278  ; "SS1 Delay Time  20mS", uses "SS1_del"
                      279  ; "CCS Delay Time  20mS", uses "CCS_del"
                      280  ; "SSs Delay Time  20mS", usus "SSs_Del"
                      281  ; "ExBrk Del Time  20mS", uses "ExBrk_del"
                      282  ; "RPM TCC Min   RPM/20", uses "TCC_min_RPM"
                      283  ; "MPH Stall Max  MPH*2", uses "MPH_stall"
                      284  ; "TPS DOT Min  V/S*100", uses "TPSrate"
                      285  ; "TPS Cls Thrt cnt ADC", uses "CT_cnt"
                      286  ; "TPS WO Thrt cnt  ADC", uses "WOT_cnt"
                      287  ; "TPS span (WOT - CT) ", uses "TPSspan"
                      288  ; "TPS Cls Thrt min % %", uses "CT_min"
                      289  ;; "EPCPW Dither Adder  ", uses "DithAdd"
                      290  ;; "Bat Volt Cor max val", uses "BatFac"
                      291  ; "EPC Trim Cor max val", uses "TrimFac"
                      292  ; "Tun Config Bit Field", uses "TuneConfig"
                      293  ; "RPMk Hi 6=039 8=029 ", uses "rpmk", 6CYL=$27=39T,


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 8
MV_TECA


                                                                   8cyl=$1D=29T
                      294  ; "RPMk Lo 6=016 8=076 ", uses "rpmk+1", 6cyl=$10=16
                                                                T, 8cyl=$4C=76T
                      295  ; "TOT Temp cor max val", uses "TOTempFac"
                      296  ;; "Auto IAC start IACpw", uses "AIAC"
                      297  ;; "Auto IAC time 100mS ", uses "AIACcmp"
                      298  ; "TOT cor rail Hi F-40", uses "TOThi"
                      299  ; "TOT cor rail Lo F-40", uses "TOTlo"
                      300  ; "Cons Grp2  placehold", is displayed for out of 
                                                                    range value
                      301  ;
                      302  ; To edit a value in either the "group1" or 
                                                       "group2" of configurable
                      303  ; constants, scroll through the display screens to 
                                                           either screen 6 or 7
                      304  ; and press PTA3 to bring up that range of screens. 
                                                          Scroll to the desired
                      305  ; screen and press PTA2 to select it. Increment 
                                                               value with PTA1,
                      306  ; or decrement it with PTA0. When you reach the 
                                                        desired value, unselect
                      307  ; by pressing PTA2, then return to display screen 
                                                           #0 by pressing PTA3.
                      308  ; Scroll to either screen 10 or 11 as required, and 
                                                         press PTA3 to download
                      309  ; the group1 or group2 value to MS_TECA RAM. Press 
                                                      PTA3 again when prompted,
                      310  ; to return to display screen #0. If you are 
                                                  satisfied with the new value,
                      311  ; scroll to screen 12 and press PTA3 to burn all 
                                                       values in MS_TECA RAM to
                      312  ; Flash. Press PTA3 at the prompt, to return to 
                                                              display screen #0
                      313  ;
                      314  ; On start up, MV_TECA loads the group1 and group2 
                                                       of constants from MS_ECU
                      315  ; to MV_TECA before the main loop begins. This can 
                                                       also be done at any time
                      316  ; by scrolling to either screen 8 or 9, select it 
                                                          with PTA3, then press
                      317  ; PTA3 again at the prompt to return to display 
                                                                     screen #0.
                      318  ;
                      319  ;***************************************************
                                                      *************************
                      320  
                      321  
                      322  ;***************************************************
                                                      *************************
                      323  ;
                      324  ; -------------------------- MV_TECA Hardware 
                                               Wiring  ------------------------
                      325  ;
                      326  ;***************************************************
                                                      *************************
                      327  ;
                      328  ; ----- Inputs [port name - function] -----
                      329  ;


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 9
MV_TECA


                      330  ;  PTA0      - Display Scroll Left / Decrease 
                                                              Selected Variable
                      331  ;  PTA1      - Display Scroll Right / Increase 
                                                              Selected Variable
                      332  ;  PTA2      - Display Freeze / Select Configuration
                                                                       variable
                      333  ;  PTA3      - Toggle Mode, Display / Configure
                      334  ;
                      335  ; ----- Outputs [port name - function] -----
                      336  ;
                      337  ;  PTB4       - VFD Display Enable
                      338  ;  PTB5       - VFD Display R/W
                      339  ;  PTB6       - VFD Display RS
                      340  ;  PTC0       - VFD Display data DB4
                      341  ;  PTC1       - VFD Display data DB5
                      342  ;  PTC2       - VFD Display data DB6
                      343  ;  PTC3       - VFD Display data DB7
                      344  ;
                      345  ;***************************************************
                                                      *************************
                      346  
                      347  
 0040                 348       org        ram_start         ; Origin  Memory location $0040=64
                      349                                   ;(start of RAM)
 0040                 350       include "MV_TECA_V11.inc"    ; Include definitions for MV_TECA_V11.asm
                      351  ;****************************************************************************
                      352  ;
                      353  ;           MV_TECA_V11.inc (header file for MV_TECA_V11.asm 8/20/06
                      354  ;
                      355  ;           Real Time Variable Display, and Configurator for MS_TECA_V11
                      356  ;
                      357  ;         By Robert Hiebert with technical assistance from Dan Williams
                      358  ;           and all those who contributed to the Megasquirt projects
                      359  ;
                      360  ;****************************************************************************
                      361  
                      362  ;****************************************************************************
                      363  ;
                      364  ; This is a custom and comparatively primitive version of Megaview,
                      365  ; by B. A. Bowling And A. C. Grippo
                      366  ; It is application specific for MS_TECA and is written in assembler, using
                      367  ; "Win IDE" from P+E Microcomputer Systems, to avoid any unpleasant "C"
                      368  ; compiler issues.
                      369  ; Like MS_ECU and MS_TECA, it is extensively commented, as much for our
                      370  ; benefit, as for those who may wish to modify it for their own use.
                      371  ;
                      372  ;****************************************************************************
                      373  
                      374  ;****************************************************************************
                      375  ;
                      376  ; --------------------------------- Operation -------------------------------
                      377  ;
                      378  ; On power up, the unit defaults to "display" mode, screen #0. In this mode,
                      379  ; the user has a choice of 6,(0-5), screens which display the variables name
                      380  ; abbreviation on the top line, and their corresponding real time values on
                      381  ; the bottom line, or the status abbreviation on the top line, and their
                      382  ; corresponding real time status on the lower line. The lower line is
                      383  ; updated every 250 miliseconds.
                      384  ; Screen numbers 6 and 7 are entry points for constant configuration while
                      385  ; in "Configuration" mode.
                      386  ; Screen numbers numbers 8, 9, 10, and 11 are the SCI command screens.
                      387  ; Screen number 12 is the burn constants screen.
                      388  ; Screen numbers numbers 13, 14, 15, and 16 are SCI command done screens.
                      389  ; Screen number 17 is the burn constants done screen.
                      390  ;
                      391  ; Screen 0 is for the transmission and MS_TECA status, and displays
                      392  ; "ML Gr CC TC FC EP EB"
                      393  ; "ML" is Manual Lever Position, (P,R,N,D,M2, or M1) and uses "mlpsp"
                      394  ; "Gr" is Current Gear, (1,2,3, or 4)and uses "mlpsp" and "gear"
                      395  ; "CC" is Coast Clutch applied status, (Y or N), and uses "trans2"
                      396  ; "TC" is Torque Converter Clutch applied status, (Y or N), uses "trans2"
                      397  ; "FC" is DFC permissive status, (Y or N), and uses "trans2"
                      398  ; "EP" is Exhaust brake permissive, below max exhaust pressure status,
                      399  ;  (Y or N), and uses "trans2"
                      400  ; "EB" is Exhaust brake applied status, (Y or N), and uses "trans2"
                      401  ;
                      402  ; Screen 1 is for the guages, and displays "RPM MPH Prs TOT Vlt "
                      403  ; "RPM" is Engine RPM in RPM /20, and uses "rpm"
                      404  ; "MPH" is Vehicle Speed, in MPH*2, and uses "mph"
                      405  ; "Prs" is Line Pressure in PSI, and uses "Lpsi"
                      406  ; "TOT" is Transmission Oil Temperature in degreesF+40, and uses "TOTemp"
                      407  ; "Vlt" is System Voltage in volts*10, and uses "volts"
                      408  ;
                      409  ; Screen 2 is to establish EPC Duty Factor/pulse width/line pressure
                      410  ; relationship, and displays "DuF TPP PWH:PWL Prs "
                      411  ; "DuF" is  EPC Duty Factor from "TO" table, stall or shift tables, or,
                      412  ;      absolute values "EPC_TCC", or "EPC_decel", and uses "df"
                      413  ; "TPP" is Throttle Position in percent, and uses "TPSp"
                      414  ; "PWH" is final EPC PW Hi byte and uses "EPCpwH"
                      415  ; "PWL" is final EPC PW Lo byte and uses "EPCpwL"
                      416  ; "Prs" is Line Pressure in PSI, and uses "Lpsi"
                      417  ;
                      418  ; Screen 3 is to establish IAC pulse width/engine RPM relationship,
                      419  ; and displays "SeH SeL IAC Ipw RPM "
                      420  ; "SeH is time since MS_TECA power up seconds Hi byte
                      421  ; "SeL is time since MS_TECA power up seconds Lo byte
                      422  ; "IAC" is Idle Air Control Sensor 8 bit ADC reading and uses "IAC"
                      423  ; "IACpw" is Idle Air Control pulse width in 100uS, and uses "IACpw"
                      424  ; "RPM" is Engine RPM in RPM /20, and uses "rpm"
                      425  ;
                      426  ; Screen 4 is for Duty Factor tuning, and displays "RPM MAP TPP TrA DuF "
                      427  ; "RPM" is Engine RPM in RPM /20, and uses "rpm"
                      428  ; "MAP" is Manifold Absolute Pressure in KPA, and uses uses "kpa"
                      429  ; "TPP" is Throttle Position in percent, and uses "TPSp"
                      430  ; "TrA" is EPC Trim Correction Adder, and uses "TrimAdd"
                      431  ; "DuF" is  EPC Duty Factor from "TO" table, stall or shift tables, or,
                      432  ;      absolute values "EPC_TCC", or "EPC_decel", and uses "df"
                      433  ;
                      434  ; Screen 5 is for Duty Factor observations, before and after corrections,
                      435  ; and displays "DuF DF1 DF2 DF3 DFF "
                      436  ; "DuF" is  EPC Duty Factor from "TO" table, stall or shift tables, or,
                      437  ;      absolute values "EPC_TCC", or "EPC_decel", and uses "df"
                      438  ; "DF1" is "df" after Bat cor, before TOT cor and uses "df1"
                      439  ; "DF2" is "df1" after TOT cor, before Trim cor and uses "df2"
                      440  ; "DF3" is "df2" after Trim cor, before Dither cor and uses "df3"
                      441  ; "DFF" is "df2" after Dither cor(Final EPC Duty Factor) and uses "dff"
                      442  ;
                      443  ; Screen 6 displays "Cons Group1 Prs Mode"
                      444  ; This is the entry point of the first group of constants, and is
                      445  ; accessed by pressing the "Toggle Mode" button
                      446  ;
                      447  ; Screen 7 displays "Cons Group2 Prs Mode"
                      448  ; This is the entry point of the second group of constants, and is
                      449  ; accessed by pressing the "Toggle Mode" button
                      450  ;
                      451  ; Screen 8 displays "UpLd G1 Cons Prs Mde"
                      452  ; This is the entry point to upload the first group of constants from
                      453  ; MS_TECA, and is accessed by pressing the "Toggle Mode" button
                      454  ;
                      455  ; Screen 9 displays "UpLd G2 Cons Prs Mde"
                      456  ; This is the entry point to upload the second group of constants from
                      457  ; MS_TECA, and is accessed by pressing the "Toggle Mode" button
                      458  ;
                      459  ; Screen 10 displays "DnLd G1 val Prs Mode"
                      460  ; This is the entry point to download the selected Cons1 value to
                      461  ; MS_TECA, and is accessed by pressing the "Toggle Mode" button


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 10
MV_TECA


                      462  ;
                      463  ; Screen 11 displays "DnLd G2 val Prs Mode"
                      464  ; This is the entry point to download the selected Cons2 value to
                      465  ; MS_TECA, and is accessed by pressing the "Toggle Mode" button
                      466  ;
                      467  ; Screen 12 displays "Burn Cons Press Mode"
                      468  ; This is the entry point to the Burn Constants from MS_TECA RAM to
                      469  ; Flash section, and is accessed by pressing the "Toggle Mode" button
                      470  ;
                      471  ; Screen 13 displays "UpLd G1 Done Prs Mde"
                      472  ; This screen indicates that the Cons1 group has been uploaded, and
                      473  ; prompts the user to return to display screen #0 by pressing the
                      474  ; "Toggle Mode" button
                      475  ;
                      476  ; Screen 14 displays "UpLd G2 Done Prs Mde"
                      477  ; This screen indicates that the Cons2 group has been uploaded, and
                      478  ; prompts the user to return to display screen #0 by pressing the
                      479  ; "Toggle Mode" button
                      480  ;
                      481  ; Screen 15 displays "DnLd V1 Done Prs Mde"
                      482  ; This screen indicates that the selected Cons1 value has been
                      483  ; downloaded to MS_TECA RAM, and prompts the user to return to
                      484  ; display screen #0 by pressing the "Toggle Mode" button
                      485  ;
                      486  ; Screen 16 displays "DnLd V2 Done Prs Mde"
                      487  ; This screen indicates that the selected Cons2 value has been
                      488  ; downloaded to MS_TECA RAM, and prompts the user to return to
                      489  ; display screen #0 by pressing the "Toggle Mode" button
                      490  ;
                      491  ; Screen 17 displays "Burn Done Press Mode"
                      492  ; This screen indicates that the MS_TECA configuration constants
                      493  ; have been burned from RAM to Flash, and prompts the user to
                      494  ; return to display screen #0 by pressing the "Toggle Mode" button
                      495  ;
                      496  ; There are 4 control buttons on the display. From right to left:
                      497  ; PTA3 - Toggle Mode, Display / Configure
                      498  ; PTA2 - Display Freeze / Select Configuration Constant
                      499  ; PTA1 - Display Scroll Right / Increase Selected Constant
                      500  ; PTA0 - Display Scroll Left / Decrease Selected Constant
                      501  ;
                      502  ; While in "Display" mode, pressing PTA2 once freezes the screen so the real
                      503  ; time variables are not up dated. Pressing PTA2 again will unfreeze the
                      504  ; screen. This is intended for use with the "tuning" screens.
                      505  ; While in "Display" mode, pressing PTA1 will advance to the next display
                      506  ; screen.
                      507  ; While in "Display mode, pressing PTA0 will retreat to the previous display
                      508  ; screen.
                      509  ;
                      510  ; Holding PTA0 or PTA1 down for more than 1/2 second will "auto repeat" the
                      511  ; function at a rate of 4HZ.
                      512  ;
                      513  ; While in "Display" mode, screens 7 and less, Pressing PTA3 has no effect.
                      514  ; In display screen 8, Pressing PTA3 changes to "Configure" mode, and
                      515  ; selects the first index of constants.
                      516  ; In display screen 9, Pressing PTA3 changes to "Configure" mode, and
                      517  ; selects the second index of constants.
                      518  ; While in "Configure" mode, Pressing PTA3 will return to the first
                      519  ; Display screen.
                      520  ;
                      521  ; While in "Configure" mode, pressing PTA1 will advance to the next
                      522  ; configurable constant in the ordered list.
                      523  ; While in "Configure" mode, pressing PTA0 will retreat to the previous
                      524  ; configurable constant in the ordered list.
                      525  ; While in "Configure" mode presssing PTA2 will select the current diplayed
                      526  ; configurable constant for editing, and display "SELECTED" on the right
                      527  ; lower line. Pressing PTA2 again will unselect the constant and clear
                      528  ; the right lower line.
                      529  ; While a configurable constant is "selected", pressing PTA1 will increment
                      530  ; the value by 1. Pressing PTA0 will decrement the value by 1.
                      531  ;
                      532  ; Holding PTA0 or PTA1 down for more than 1/2 second will "auto repeat" the
                      533  ; function at a rate of 4HZ.
                      534  ;
                      535  ; In "Configure" mode The Flash Configurable Constants values are displayed,
                      536  ; on the lower line, in the ordered list im which they appear in the MS_TECA
                      537  ; source.
                      538  ;
                      539  ; First is the "TO" table. The display line is shown below.
                      540  ;
                      541  ; "TO KPArow 0 RPMcol 0", This is modified for the 64 TO values by
                      542  ;  incrmenting the column and row numbers, and uses the "TO,x" constants.
                      543  ;
                      544  ; Next we have the RPM bins for the "TO" table
                      545  ;
                      546  ; "TO Tab RPM c0 RPM/20", uses "RPM_range,x"
                      547  ; "TO Tab RPM c1 RPM/20", uses "RPM_range,x"
                      548  ; "TO Tab RPM c2 RPM/20", uses "RPM_range,x"
                      549  ; "TO Tab RPM c3 RPM/20", uses "RPM_range,x"
                      550  ; "TO Tab RPM c4 RPM/20", uses "RPM_range,x"
                      551  ; "TO Tab RPM c5 RPM/20", uses "RPM_range,x"
                      552  ; "TO Tab RPM c6 RPM/20", uses "RPM_range,x"
                      553  ; "TO Tab RPM c7 RPM/20", uses "RPM_range,x"
                      554  ;
                      555  ; Next we have the KPA bins for the "TO" table
                      556  ;
                      557  ; "TO Tab KPA row0 KPA ", uses "KPA_range,x"
                      558  ; "TO Tab KPA row1 KPA ", uses "KPA_range,x"
                      559  ; "TO Tab KPA row2 KPA ", uses "KPA_range,x"
                      560  ; "TO Tab KPA row3 KPA ", uses "KPA_range,x"
                      561  ; "TO Tab KPA row4 KPA ", uses "KPA_range,x"
                      562  ; "TO Tab KPA row5 KPA ", uses "KPA_range,x"
                      563  ; "TO Tab KPA row6 KPA ", uses "KPA_range,x"
                      564  ; "TO Tab KPA row7 KPA ", uses "KPA_range,x"
                      565  ;
                      566  ; Next we have the % bins for the "TPS_range" table
                      567  ;
                      568  ; "Throttle Open % c0 %", uses "TPS_range,x"
                      569  ; "Throttle Open % c1 %", uses "TPS_range,x"
                      570  ; "Throttle Open % c2 %", uses "TPS_range,x"
                      571  ; "Throttle Open % c3 %", uses "TPS_range,x"
                      572  ; "Throttle Open % c4 %", uses "TPS_range,x"
                      573  ; "Throttle Open % c5 %", uses "TPS_range,x"
                      574  ; "Throttle Open % c6 %", uses "TPS_range,x"
                      575  ; "Throttle Open % c7 %", uses "TPS_range,x"
                      576  ;
                      577  ; Next we have the EPC duty factor bins for the "EPC_stall" table
                      578  ;
                      579  ; "EPCdf Stall c0 0-255", uses "EPC_stall,x"
                      580  ; "EPCdf Stall c1 0-255", uses "EPC_stall,x"
                      581  ; "EPCdf Stall c2 0-255", uses "EPC_stall,x"
                      582  ; "EPCdf Stall c3 0-255", uses "EPC_stall,x"
                      583  ; "EPCdf Stall c4 0-255", uses "EPC_stall,x"
                      584  ; "EPCdf Stall c5 0-255", uses "EPC_stall,x"
                      585  ; "EPCdf Stall c6 0-255", uses "EPC_stall,x"
                      586  ; "EPCdf Stall c7 0-255", uses "EPC_stall,x"
                      587  ;
                      588  ; Next we have the EPC duty factor bins for the "EPC_12" table
                      589  ;
                      590  ; "EPCdf 1-->2 c0 0-255", uses "EPC_12,x"
                      591  ; "EPCdf 1-->2 c1 0-255", uses "EPC_12,x"
                      592  ; "EPCdf 1-->2 c2 0-255", uses "EPC_12,x"
                      593  ; "EPCdf 1-->2 c3 0-255", uses "EPC_12,x"
                      594  ; "EPCdf 1-->2 c4 0-255", uses "EPC_12,x"
                      595  ; "EPCdf 1-->2 c5 0-255", uses "EPC_12,x"
                      596  ; "EPCdf 1-->2 c6 0-255", uses "EPC_12,x"
                      597  ; "EPCdf 1-->2 c7 0-255", uses "EPC_12,x"


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 11
MV_TECA


                      598  ;
                      599  ; Next we have the EPC duty factor bins for the "EPC_23" table
                      600  ;
                      601  ; "EPCdf 2-->3 c0 0-255", uses "EPC_23,x"
                      602  ; "EPCdf 2-->3 c1 0-255", uses "EPC_23,x"
                      603  ; "EPCdf 2-->3 c2 0-255", uses "EPC_23,x"
                      604  ; "EPCdf 2-->3 c3 0-255", uses "EPC_23,x"
                      605  ; "EPCdf 2-->3 c4 0-255", uses "EPC_23,x"
                      606  ; "EPCdf 2-->3 c5 0-255", uses "EPC_23,x"
                      607  ; "EPCdf 2-->3 c6 0-255", uses "EPC_23,x"
                      608  ; "EPCdf 2-->3 c7 0-255", uses "EPC_23,x"
                      609  ;
                      610  ; Next we have the EPC duty factor bins for the "EPC_34" table
                      611  ;
                      612  ; "EPCdf 3-->4 c0 0-255", uses "EPC_34,x"
                      613  ; "EPCdf 3-->4 c1 0-255", uses "EPC_34,x"
                      614  ; "EPCdf 3-->4 c2 0-255", uses "EPC_34,x"
                      615  ; "EPCdf 3-->4 c3 0-255", uses "EPC_34,x"
                      616  ; "EPCdf 3-->4 c4 0-255", uses "EPC_34,x"
                      617  ; "EPCdf 3-->4 c5 0-255", uses "EPC_34,x"
                      618  ; "EPCdf 3-->4 c6 0-255", uses "EPC_34,x"
                      619  ; "EPCdf 3-->4 c7 0-255", uses "EPC_34,x"
                      620  ;
                      621  ; Finally, are the configurable constants in the ordered list, with the
                      622  ; value the variable represents
                      623  ;
                      624  ; "EPCdf TCC App  0-255", uses "EPC_TCC"
                      625  ; "EPCdf DFC App  0-255", uses "EPC_decel"
                      626  ; "EPC Rise Time   20mS", uses "EPC_rise"
                      627  ; "EPC Hold Time   20mS", uses "EPC_hold"
                      628  ; "SS1 Delay Time  20mS", uses "SS1_del"
                      629  ; "CCS Delay Time  20mS", uses "CCS_del"
                      630  ; "ExBrk Del Time  20mS", uses "ExBrk_del"
                      631  ; "RPM TCC Min   RPM/20", uses "TCC_min_RPM"
                      632  ; "MPH Stall Max  MPH*2", uses "MPH_stall"
                      633  ; "TPS DOT Min  V/S*100", uses "TPSrate"
                      634  ; "TPS Cls Thrt cnt ADC", uses "CT_cnt"
                      635  ; "TPS WO Thrt cnt  ADC", uses "WOT_cnt"
                      636  ; "TPS span (WOT - CT) ", uses "TPSspan"
                      637  ; "TPS Cls Thrt min % %", uses "CT_min"
                      638  ; "EPCPW Dither Adder  ", uses "DithAdd"
                      639  ; "Bat Volt Cor max val", uses "BatFac"
                      640  ; "EPC Trim Cor max val", uses "TrimFac"
                      641  ; "Tun Config Bit Field", uses "TuneConfig"
                      642  ; "RPMk Hi 6=039 8=029 ", uses "rpmk", 6CYL=$27=39T, 8cyl=$1D=29T
                      643  ; "RPMk Lo 6=016 8=076 ", uses "rpmk+1", 6cyl=$10=16T, 8cyl=$4C=76T
                      644  ; "TOT Temp cor max val", uses "TOTempFac"
                      645  ; "Auto IAC start IACpw", uses "AIAC"
                      646  ; "Auto IAC time 100mS ", uses "AIACcmp"
                      647  ; "TOT cor rail Hi F-40", uses "TOThi"
                      648  ; "TOT cor rail Lo F-40", uses "TOTlo"
                      649  ; "Cons Grp2  placehold", is displayed for out of range value
                      650  ;
                      651  ; To edit a value in either the "group1" or "group2" of configurable
                      652  ; constants, scroll through the display screens to either screen 6 or 7
                      653  ; and press PTA3 to bring up that range of screens. Scroll to the desired
                      654  ; screen and press PTA2 to select it. Increment value with PTA1,
                      655  ; or decrement it with PTA0. When you reach the desired value, unselect
                      656  ; by pressing PTA2, then return to display screen #0 by pressing PTA3.
                      657  ; Scroll to either screen 10 or 11 as required, and press PTA3 to download
                      658  ; the group1 or group2 value to MS_TECA RAM. Press PTA3 again when prompted,
                      659  ; to return to display screen #0. If you are satisfied with the new value,
                      660  ; scroll to screen 12 and press PTA3 to burn all values in MS_TECA RAM to
                      661  ; Flash. Press PTA3 at the prompt, to return to display screen #0
                      662  ;
                      663  ; On start up, MV_TECA loads the group1 and group2 of constants from MS_ECU
                      664  ; to MV_TECA before the main loop begins. This can also be done at any time
                      665  ; by scrolling to either screen 8 or 9, select it with PTA3, then press
                      666  ; PTA3 again at the prompt to return to display screen #0.
                      667  ;
                      668  ;****************************************************************************
                      669  
                      670  ;****************************************************************************
                      671  ;
                      672  ; -------------------------- MV_TECA Hardware Wiring  ------------------------
                      673  ;
                      674  ;****************************************************************************
                      675  ;
                      676  ; ----- Inputs [port name - function] -----
                      677  ;
                      678  ;  PTA0      - Display Scroll Left / Decrease Selected Constant
                      679  ;  PTA1      - Display Scroll Right / Increase Selected Constant
                      680  ;  PTA2      - Display Freeze / Select Configuration Constant
                      681  ;  PTA3      - Toggle Mode, Display / Configure
                      682  ;
                      683  ; ----- Outputs [port name - function] -----
                      684  ;
                      685  ;  PTB4       - VFD Display Enable
                      686  ;  PTB5       - VFD Display R/W
                      687  ;  PTB6       - VFD Display RS
                      688  ;  PTC0       - VFD Display data DB4
                      689  ;  PTC1       - VFD Display data DB5
                      690  ;  PTC2       - VFD Display data DB6
                      691  ;  PTC3       - VFD Display data DB7
                      692  ;
                      693  ;****************************************************************************
                      694  
                      695  ;****************************************************************************
                      696  ; ------------------------ Input Port Equates -------------------------------
                      697  ;****************************************************************************
                      698  
 0040                 699  Sw0     equ 0     ; PTA0 - Display Scroll Left / Decrease Selected Con
 0040                 700  Sw1     equ 1     ; PTA1 - Display Scroll Right / Increase Selected Con
 0040                 701  Sw2     equ 2     ; PTA2 - Display Freeze / Select Configuration Con
 0040                 702  Sw3     equ 3     ; PTA3 - Toggle Mode, Display / Configure
                      703  
                      704  ;****************************************************************************
                      705  ; ------------------------ Output Port Equates ------------------------------
                      706  ;****************************************************************************
                      707  
 0040                 708  Enable     equ 4     ; PTB4 - VFD Display Enable
 0040                 709  Rd_Wrt     equ 5     ; PTB5 - VFD Display R/W
 0040                 710  Reg_Sel    equ 6     ; PTB6 - VFD Display RS
 0040                 711  DB0        equ 0     ; PTC0 - VFD Display data DB0 (4 bit mode)
 0040                 712  DB1        equ 1     ; PTC1 - VFD Display data DB1 (4 bit mode)
 0040                 713  DB2        equ 2     ; PTC2 - VFD Display data DB2 (4 bit mode)
 0040                 714  DB3        equ 3     ; PTC3 - VFD Display data DB3 (4 bit mode)
 0040                 715  DB4        equ 0     ; PTC0 - VFD Display data DB4
 0040                 716  DB5        equ 1     ; PTC1 - VFD Display data DB5
 0040                 717  DB6        equ 2     ; PTC2 - VFD Display data DB6
 0040                 718  DB7        equ 3     ; PTC3 - VFD Display data DB7
                      719  
                      720  ;****************************************************************************
                      721  ; ------------------------ Output Mask Equates ------------------------------
                      722  ;****************************************************************************
                      723  
 0040                 724  DB0m     equ $01     ; %00000001 - PTC0 - VFD Display data DB0 (4 bit mode)
 0040                 725  DB1m     equ $02     ; %00000010 - PTC1 - VFD Display data DB1 (4 bit mode)
 0040                 726  DB2m     equ $04     ; %00000100 - PTC2 - VFD Display data DB2 (4 bit mode)
 0040                 727  DB3m     equ $08     ; %00001000 - PTC3 - VFD Display data DB3 (4 bit mode)
 0040                 728  DB4m     equ $10     ; %00010000 - PTC0 - VFD Display data DB4
 0040                 729  DB5m     equ $20     ; %00100000 - PTC1 - VFD Display data DB5
 0040                 730  DB6m     equ $40     ; %01000000 - PTC2 - VFD Display data DB6
 0040                 731  DB7m     equ $80     ; %10000000 - PTC3 - VFD Display data DB7
                      732  
                      733  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 12
MV_TECA


                      734  ;****************************************************************************
                      735  ; -------------- "Flags" Operating Status bit field equates -----------------
                      736  ;****************************************************************************
                      737  
 0040                 738  mde      equ 0  ; 1 = Configure mode             0 = Display mode
 0040                 739  frz      equ 1  ; 1 = Dsply Vars frozen          0 = Dsply vars 250mS update
 0040                 740  sel      equ 2  ; 1 = Current Constant Selected  0 = No Constant selected
 0040                 741  RcvG1    equ 3  ; 1 = Receiving Cons Grp1        0 = Not receiving Cons Grp1
 0040                 742  RcvG2    equ 4  ; 1 = Receiving Cons Grp2        0 = Not receiving Cons Grp2
 0040                 743  LinChng  equ 5  ; 1 = Bot Line changed           0 = Bot Line not changed
                      744  
                      745  ;****************************************************************************
                      746  ; ----------------- "LPflags","ARCflags","ARflags" equates ------------------
                      747  ;****************************************************************************
                      748  
 0040                 749  Sw0LP     equ 0     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 750  Sw1LP     equ 1     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 751  Sw2LP     equ 2     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 752  Sw3LP     equ 3     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
                      753  
                      754  ;****************************************************************************
                      755  ; --------------------------- "Swflags" equates -----------------------------
                      756  ;****************************************************************************
                      757  
 0040                 758  Sw0cls     equ 0     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 759  Sw1cls     equ 1     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 760  Sw2cls     equ 2     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 761  Sw3cls     equ 3     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
                      762  
                      763  ;****************************************************************************
                      764  ; ------------------ "mlpsp","mlpsp_prv" Status equates ---------------------
                      765  ;****************************************************************************
                      766  
 0040                 767  P      equ 1     ; MLPS in "Park" position             0 = out of range
 0040                 768  R      equ 2     ; MLPS in "Reverse" position          0 = out of range
 0040                 769  N      equ 3     ; MLPS in "Neutral" position          0 = out of range
 0040                 770  D      equ 4     ; MLPS in "Drive" position            0 = out of range
 0040                 771  M2     equ 5     ; MLPS in "Manual Second" position    0 = out of range
 0040                 772  M1     equ 6     ; MLPS in "Manual First" position     0 = out of range
 0040                 773  SF     equ 7     ; MLPS Sensor Failure                 0 = out of range
                      774  
                      775  ;****************************************************************************
                      776  ; ------- "gearcnt","gearcnt_prv","gear","gear_prv" Status equates ----------
                      777  ;****************************************************************************
                      778  
 0040                 779  first     equ 1     ; Drive 1
 0040                 780  second    equ 2     ; Drive 2
 0040                 781  third     equ 3     ; Drive 3
 0040                 782  forth     equ 4     ; Drive 4
                      783  
                      784  ;****************************************************************************
                      785  ; ---------------- "trans" Operating Status bit field equates ---------------
                      786  ;****************************************************************************
                      787  
 0040                 788  Estop     equ 0     ; 1 = Engine stopped             0 = Engine not stopped
 0040                 789  Vstop     equ 1     ; 1 = Vehicle stopped            0 = Vehicle not stopped
 0040                 790  ClsThrt   equ 2     ; 1 = TPS at closed throttle     0 = TPS not Close Throt
 0040                 791  RPMtcc    equ 3     ; 1 = RPM TCC app permissive     0 = No RPM TCC perm.
 0040                 792  MPHstall  equ 4     ; 1 = MPH at stall condition     0 = MPH above stall
 0040                 793  accel     equ 5     ; 1 = TPS DOT EPC mode           0 = No TPS DOT EPC mode
 0040                 794  PSIbrk    equ 6     ; 1 = Exh Brk Exh prs permissive 0 = No ExhBrk prs perm.
 0040                 795  D1D2      equ 7     ; 1 = In Drive 1 or 2            0 = Not in Drive 1 or 2
                      796  
                      797  ;****************************************************************************
                      798  ; --------------- "trans2" Operating Status bit field equates ---------------
                      799  ;****************************************************************************
                      800  
 0040                 801  CCSon     equ 0     ; 1 = CCS on                     0 = CCS off
 0040                 802  TCCon     equ 1     ; 1 = TCC on                     0 = TCC off
 0040                 803  DFCon     equ 2     ; 1 = DFC permissive             0 = No DFC permissive
 0040                 804  Brkon     equ 3     ; 1 = Exhaust Brake on           0 = Exh Brk off
 0040                 805  SSprog    equ 4     ; 1 = Gear Change in progress    0 = No GC in progress
 0040                 806  TCprog    equ 5     ; 1 = TCC apply in progress      0 = No TCC in progress
 0040                 807  EPCmov    equ 6     ; 1 = EPC moving conditions      0 = EPC not move cond
                      808  
                      809  ;****************************************************************************
                      810  ; -------------------------- RAM Variables ---------------------------------
                      811  ; - I/O Registers from $000 to $003F(0 to 63)(64 bytes)
                      812  ; - RAM from $0040 to $023F(64 to 575)(512 bytes)
                      813  ;****************************************************************************
                      814  
                      815  ;***************************************************************************
                      816  ; - Misc. Variables
                      817  ;***************************************************************************
                      818  
                      819  ;Memory Location $0040 (decimal 64)
                      820  
 0040                 821  Sw0DB:          ds 1     ; Switch #0 de-bounce timer counter variable
 0041                 822  Sw0ARC:         ds 1     ; Switch #0 auto-repeat command timer counter var
 0042                 823  Sw0AR:          ds 1     ; Switch #0 auto-repeat timer counter variable
 0043                 824  Sw1DB:          ds 1     ; Switch #1 de-bounce timer counter variable
 0044                 825  Sw1ARC:         ds 1     ; Switch #1 auto-repeat command timer counter var
 0045                 826  Sw1AR:          ds 1     ; Switch #1 auto-repeat timer counter variable
 0046                 827  Sw2DB:          ds 1     ; Switch #2 de-bounce timer counter variable
 0047                 828  Sw2ARC:         ds 1     ; Switch #2 auto-repeat command timer counter var
 0048                 829  Sw2AR:          ds 1     ; Switch #2 auto-repeat timer counter variable
 0049                 830  Sw3DB:          ds 1     ; Switch #3 de-bounce timer counter variable
 004A                 831  Sw3ARC:         ds 1     ; Switch #3 auto-repeat command timer counter var
 004B                 832  Sw3AR:          ds 1     ; Switch #3 auto-repeat timer counter variable
 004C                 833  LPflags:        ds 1     ; Switch last pass status bit field variable
 004D                 834  ARCflags:       ds 1     ; Switch auto-repeat command status bit field
 004E                 835  ARflags:        ds 1     ; Switch auto-repeat status bit field variable
 004F                 836  Swflags:        ds 1     ; Switch status bit field variable
                      837  
                      838  ;Memory Location $0050 (decimal 80)
                      839  
 0050                 840  ModeCntr:       ds 1     ; Counter for determining "mode" bit status
 0051                 841  FrzCntr:        ds 1     ; Counter for determining "frz" bit status
 0052                 842  SelCntr:        ds 1     ; Counter for determining "sel" bit status
 0053                 843  flags:          ds 1     ; Bit field for operating status flags (1 of 2)
 0054                 844  ScrnCnt:        ds 1     ; Counter for display screen numbers
 0055                 845  ScrnCnt_prv:    ds 1     ; Screen count number previous
 0056                 846  ScrnCnt_Lst:    ds 1     ; Screen count number last
 0057                 847  ConCnt:         ds 1     ; Counter for Constant numbers
 0058                 848  ConCnt_prv:     ds 1     ; Constant number previous
 0059                 849  ConCnt_Lst:     ds 1     ; Constant number last
 005A                 850  CurCon:         ds 1     ; Value of current selected constant
 005B                 851  ConVal:         ds 1     ; Value for constant data
                      852  
                      853  ;****************************************************************************
                      854  ; ----------------------- Time Clock Variables ------------------------------
                      855  ;****************************************************************************
                      856  
 005C                 857  mS:             ds 1  ; Milliseconds counter
 005D                 858  mSx5:           ds 1     ; 5 Milliseconds counter
                      859  
                      860  ;***************************************************************************
                      861  ; - Serial Communications Interface Variables
                      862  ;***************************************************************************
                      863  
 005E                 864  ByteCnt:        ds 1     ; Count of bytes to receive via SCI
 005F                 865  ByteGoal:       ds 1     ; Desired number of bytes to receive via SCI
                      866  
                      867  ;Memory Location $0060 (decimal 96)
                      868  
 0060                 869  readbuf:        ds 1     ; Buffer for temporary storage of received byte


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 13
MV_TECA


                      870  
                      871  
                      872  ;***************************************************************************
                      873  ; - VFD Variables
                      874  ;***************************************************************************
                      875  
 0061                 876  value:          ds 1     ; Value sent to VFD(instruction or data)
 0062                 877  LineNum:        ds 1     ; Line number for VFD(for instruction)
 0063                 878  ColNum:         ds 1     ; Column number for VFD(for instruction)
 0064                 879  DatVal:         ds 1     ; Data value for VFD
 0065                 880  ComVal:         ds 1     ; Value for VFD command data
 0066                 881  TopVal:         ds 1     ; Value for VFD top line data
 0067                 882  DisVal:         ds 1     ; Value for VFD bottom line variable data
                      883  
                      884  
                      885  ;***************************************************************************
                      886  ; - Variables to display VFD bottom line
                      887  ;***************************************************************************
                      888  
 0068                 889  BotLin0:      ds 1     ; Bottom Line Column 0
 0069                 890  BotLin1:      ds 1     ; Bottom Line Column 1
 006A                 891  BotLin2:      ds 1     ; Bottom Line Column 2
 006B                 892  BotLin3:      ds 1     ; Bottom Line Column 3
 006C                 893  BotLin4:      ds 1     ; Bottom Line Column 4
 006D                 894  BotLin5:      ds 1     ; Bottom Line Column 5
 006E                 895  BotLin6:      ds 1     ; Bottom Line Column 6
 006F                 896  BotLin7:      ds 1     ; Bottom Line Column 7
                      897  
                      898  ;Memory Location $0070 (decimal 112)
                      899  
 0070                 900  BotLin8:      ds 1     ; Bottom Line Column 8
 0071                 901  BotLin9:      ds 1     ; Bottom Line Column 9
 0072                 902  BotLin10:     ds 1     ; Bottom Line Column 10
 0073                 903  BotLin11:     ds 1     ; Bottom Line Column 11
 0074                 904  BotLin12:     ds 1     ; Bottom Line Column 12
 0075                 905  BotLin13:     ds 1     ; Bottom Line Column 13
 0076                 906  BotLin14:     ds 1     ; Bottom Line Column 14
 0077                 907  BotLin15:     ds 1     ; Bottom Line Column 15
 0078                 908  BotLin16:     ds 1     ; Bottom Line Column 16
 0079                 909  BotLin17:     ds 1     ; Bottom Line Column 17
 007A                 910  BotLin18:     ds 1     ; Bottom Line Column 18
 007B                 911  BotLin19:     ds 1     ; Bottom Line Column 19
                      912  
                      913  ;***************************************************************************
                      914  ; - Variables to display VFD bottom line, last pass through main loop
                      915  ;***************************************************************************
                      916  
 007C                 917  BotLin0L:      ds 1     ; Bottom Line Column 0, last pass
 007D                 918  BotLin1L:      ds 1     ; Bottom Line Column 1, last pass
 007E                 919  BotLin2L:      ds 1     ; Bottom Line Column 2, last pass
 007F                 920  BotLin3L:      ds 1     ; Bottom Line Column 3, last pass
                      921  
                      922  ;Memory Location $0090 (decimal 144)
                      923  
 0080                 924  BotLin4L:      ds 1     ; Bottom Line Column 4, last pass
 0081                 925  BotLin5L:      ds 1     ; Bottom Line Column 5, last pass
 0082                 926  BotLin6L:      ds 1     ; Bottom Line Column 6, last pass
 0083                 927  BotLin7L:      ds 1     ; Bottom Line Column 7, last pass
 0084                 928  BotLin8L:      ds 1     ; Bottom Line Column 8, last pass
 0085                 929  BotLin9L:      ds 1     ; Bottom Line Column 9, last pass
 0086                 930  BotLin10L:     ds 1     ; Bottom Line Column 10, last pass
 0087                 931  BotLin11L:     ds 1     ; Bottom Line Column 11, last pass
 0088                 932  BotLin12L:     ds 1     ; Bottom Line Column 12, last pass
 0089                 933  BotLin13L:     ds 1     ; Bottom Line Column 13, last pass
 008A                 934  BotLin14L:     ds 1     ; Bottom Line Column 14, last pass
 008B                 935  BotLin15L:     ds 1     ; Bottom Line Column 15, last pass
 008C                 936  BotLin16L:     ds 1     ; Bottom Line Column 16, last pass
 008D                 937  BotLin17L:     ds 1     ; Bottom Line Column 17, last pass
 008E                 938  BotLin18L:     ds 1     ; Bottom Line Column 18, last pass
 008F                 939  BotLin19L:     ds 1     ; Bottom Line Column 19, last pass
                      940  
                      941  ;Memory Location $0080 (decimal 128)
                      942  
                      943  ;***************************************************************************
                      944  ; - Variables to hold ASCII conversions
                      945  ;***************************************************************************
                      946  
 0090                 947  AC_100:     ds 1     ; 8 bit ASCII conversion 100s column
 0091                 948  AC_10:      ds 1     ; 8 bit ASCII conversion 10s column
 0092                 949  AC_1:       ds 1     ; 8 bit ASCII conversion 1s column
                      950  
                      951  ;****************************************************************************
                      952  ; - Variables for integer math
                      953  ;****************************************************************************
                      954  
 0093                 955  INTACC1:      rmb 4
 0097                 956  INTACC2:      rmb 4
                      957  
                      958  ;****************************************************************************
                      959  ; - Temporary variables
                      960  ;****************************************************************************
                      961  
 009B                 962  tmp1:     ds 1
 009C                 963  tmp2:     ds 1
 009D                 964  tmp3:     ds 1
 009E                 965  tmp4:     ds 1
 009F                 966  tmp5:     ds 1
                      967  
                      968  ;Memory Location $00A0 (decimal 160)
                      969  
 00A0                 970  tmp6:     ds 1
 00A1                 971  tmp7:     ds 1
 00A2                 972  tmp8:     ds 1
 00A3                 973  tmp9:     ds 1
 00A4                 974  tmp10:    ds 1
 00A5                 975  tmp11:    ds 1
 00A6                 976  tmp12:    ds 1
 00A7                 977  tmp13:    ds 1
 00A8                 978  tmp14:    ds 1
 00A9                 979  tmp15:    ds 1
 00AA                 980  tmp16:    ds 1
 00AB                 981  tmp17:    ds 1
 00AC                 982  tmp18:    ds 1
 00AD                 983  tmp19:    ds 1
 00AE                 984  tmp20:    ds 1
 00AF                 985  tmp21:    ds 1
                      986  
                      987  ;Memory Location $00A0 (decimal 160)
                      988  
 00B0                 989  local_tmp:   ds 1
                      990  
                      991  ;****************************************************************************
                      992  ; - RS232 Real Time Variables
                      993  ;****************************************************************************
                      994  
 00B1                 995  secH:           ds 1     ; Seconds counter, Hi byte
 00B2                 996  secL:           ds 1  ; Seconds counter, Lo byte
 00B3                 997  RPM:            ds 1     ; Engine RPM/20 (0 to 5100 rpm in byte variable)
 00B4                 998  MPH:            ds 1     ; MPH*2 (0 to 128 MPH in byte variable)
 00B5                 999  trans:          ds 1     ; Transmission status bit field variable(1 of 2)
 00B6                1000  trans2:         ds 1     ; Transmission status bit field variable(2 of 2)
 00B7                1001  gearcnt:        ds 1     ; Current gear count(sequential gear selector)
 00B8                1002  MAP:            ds 1     ; Manifold Absolute Pressure 8 bit ADC reading
 00B9                1003  MLPS:           ds 1     ; Manual Lever Position Switch 8 bit ADC reading
 00BA                1004  TOT:            ds 1     ; Transmission Oil Temperature 8 bit ADC reading
 00BB                1005  Lprs:           ds 1     ; Line Pressure 8 bit ADC reading


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 14
MV_TECA


 00BC                1006  BAT:            ds 1     ; Battery Voltage 8 bit ADC reading
 00BD                1007  IAC:            ds 1     ; Engine Idle Air Control Sensor 8 bit ADC reading
 00BE                1008  Trim:           ds 1     ; Electronic Pressure Control trim 8 bit ADC rdng
 00BF                1009  TPS:            ds 1     ; Throttle Position Sensor 8 bit ADC reading
                     1010  
                     1011  ;Memory Location $00B0 (decimal 176)
                     1012  
 00C0                1013  KPA:            ds 1     ; Manifold Absolute Pressure in KPA
 00C1                1014  MLPSp:          ds 1     ; Manual Lever Position Switch position
 00C2                1015  TOTemp:         ds 1     ; Transmission Oil Temperature variable
                     1016                           ;(degrees F - 40 to fit range in byte variable)
 00C3                1017  Lpsi:           ds 1     ; Line pressure in PSI
 00C4                1018  Volts:          ds 1     ; Battery voltage to 0.1V resolution
 00C5                1019  IACpw:          ds 1     ; IAC pulse width variable(0-60, 100uS resolution)
 00C6                1020  TPSp:           ds 1     ; TPSscale * 100 / TPSspan = TPSp(TPS percent)
 00C7                1021  TOTempDif:      ds 1     ; Difference between "TOTemp" and 180(140F)
 00C8                1022  TOTempP:        ds 1     ; TOTemp percent calculation value (TOTemp/180)
 00C9                1023  TOTAdd:         ds 1     ; Trans Oil Temp correction Add/Subtract value
 00CA                1024  TrimDif:        ds 1     ; Difference between "Trim" and 128(mid point)
 00CB                1025  TrimP:          ds 1     ; Trim percent calculation value (TrimDif/128)
 00CC                1026  TrimAdd:        ds 1     ; EPC Trim correction Add/Subtract value
 00CD                1027  df:             ds 1     ; EPC Duty Factor from "TO" table, stall or shift
                     1028                           ; tables, or, absolute values "EPC_TCC", or
                     1029                           ; "EPC_decel" (scaled to 256)
 00CE                1030  df1:            ds 1     ; "df" after TOT cor, before Trimr cor
 00CF                1031  dff:            ds 1     ; "df" after Trim cor(Final EPC Duty Factor)
                     1032  
                     1033  ;Memory Location $00C0 (decimal 192)
                     1034  
 00D0                1035  EPCpwH:         ds 1     ; EPC Pulse Width Hi byte
 00D1                1036  EPCpwL:         ds 1     ; EPC Pulse Width Lo byte
                     1037  
                     1038  ;****************************************************************************
                     1039  ; - This marks the end of the real time download variables, 33 in total
                     1040  ;****************************************************************************
                     1041  ;****************************************************************************
                     1042  ; ------------------------- Configuration Constants -------------------------
                     1043  ;****************************************************************************
                     1044  
                     1045  ;****************************************************************************
                     1046  ; - First group of 128 bytes
                     1047  ;****************************************************************************
                     1048  
                     1049  ;****************************************************************************
                     1050  ; - Torque table configuration constants
                     1051  ;****************************************************************************
                     1052  
 00D2                1053  TO_0_0:             ds 1     ; TO Table, KPA row 0, RPM col 0
 00D3                1054  TO_0_1:             ds 1     ; TO Table, KPA row 0, RPM col 1
 00D4                1055  TO_0_2:             ds 1     ; TO Table, KPA row 0, RPM col 2
 00D5                1056  TO_0_3:             ds 1     ; TO Table, KPA row 0, RPM col 3
 00D6                1057  TO_0_4:             ds 1     ; TO Table, KPA row 0, RPM col 4
 00D7                1058  TO_0_5:             ds 1     ; TO Table, KPA row 0, RPM col 5
 00D8                1059  TO_0_6:             ds 1     ; TO Table, KPA row 0, RPM col 6
 00D9                1060  TO_0_7:             ds 1     ; TO Table, KPA row 0, RPM col 7
 00DA                1061  TO_1_0:             ds 1     ; TO Table, KPA row 1, RPM col 0
 00DB                1062  TO_1_1:             ds 1     ; TO Table, KPA row 1, RPM col 1
 00DC                1063  TO_1_2:             ds 1     ; TO Table, KPA row 1, RPM col 2
 00DD                1064  TO_1_3:             ds 1     ; TO Table, KPA row 1, RPM col 3
 00DE                1065  TO_1_4:             ds 1     ; TO Table, KPA row 1, RPM col 4
 00DF                1066  TO_1_5:             ds 1     ; TO Table, KPA row 1, RPM col 5
                     1067  
                     1068  ;Memory Location $00D0 (decimal 208)
                     1069  
 00E0                1070  TO_1_6:             ds 1     ; TO Table, KPA row 1, RPM col 6
 00E1                1071  TO_1_7:             ds 1     ; TO Table, KPA row 1, RPM col 7
 00E2                1072  TO_2_0:             ds 1     ; TO Table, KPA row 2, RPM col 0
 00E3                1073  TO_2_1:             ds 1     ; TO Table, KPA row 2, RPM col 1
 00E4                1074  TO_2_2:             ds 1     ; TO Table, KPA row 2, RPM col 2
 00E5                1075  TO_2_3:             ds 1     ; TO Table, KPA row 2, RPM col 3
 00E6                1076  TO_2_4:             ds 1     ; TO Table, KPA row 2, RPM col 4
 00E7                1077  TO_2_5:             ds 1     ; TO Table, KPA row 2, RPM col 5
 00E8                1078  TO_2_6:             ds 1     ; TO Table, KPA row 2, RPM col 6
 00E9                1079  TO_2_7:             ds 1     ; TO Table, KPA row 2, RPM col 7
 00EA                1080  TO_3_0:             ds 1     ; TO Table, KPA row 3, RPM col 0
 00EB                1081  TO_3_1:             ds 1     ; TO Table, KPA row 3, RPM col 1
 00EC                1082  TO_3_2:             ds 1     ; TO Table, KPA row 3, RPM col 2
 00ED                1083  TO_3_3:             ds 1     ; TO Table, KPA row 3, RPM col 3
 00EE                1084  TO_3_4:             ds 1     ; TO Table, KPA row 3, RPM col 4
 00EF                1085  TO_3_5:             ds 1     ; TO Table, KPA row 3, RPM col 5
                     1086  
                     1087  ;Memory Location $00E0 (decimal 224)
                     1088  
 00F0                1089  TO_3_6:             ds 1     ; TO Table, KPA row 3, RPM col 6
 00F1                1090  TO_3_7:             ds 1     ; TO Table, KPA row 3, RPM col 7
 00F2                1091  TO_4_0:             ds 1     ; TO Table, KPA row 4, RPM col 0
 00F3                1092  TO_4_1:             ds 1     ; TO Table, KPA row 4, RPM col 1
 00F4                1093  TO_4_2:             ds 1     ; TO Table, KPA row 4, RPM col 2
 00F5                1094  TO_4_3:             ds 1     ; TO Table, KPA row 4, RPM col 3
 00F6                1095  TO_4_4:             ds 1     ; TO Table, KPA row 4, RPM col 4
 00F7                1096  TO_4_5:             ds 1     ; TO Table, KPA row 4, RPM col 5
 00F8                1097  TO_4_6:             ds 1     ; TO Table, KPA row 4, RPM col 6
 00F9                1098  TO_4_7:             ds 1     ; TO Table, KPA row 4, RPM col 7
 00FA                1099  TO_5_0:             ds 1     ; TO Table, KPA row 5, RPM col 0
 00FB                1100  TO_5_1:             ds 1     ; TO Table, KPA row 5, RPM col 1
 00FC                1101  TO_5_2:             ds 1     ; TO Table, KPA row 5, RPM col 2
 00FD                1102  TO_5_3:             ds 1     ; TO Table, KPA row 5, RPM col 3
 00FE                1103  TO_5_4:             ds 1     ; TO Table, KPA row 5, RPM col 4
 00FF                1104  TO_5_5:             ds 1     ; TO Table, KPA row 5, RPM col 5
                     1105  
                     1106  ;Memory Location $00F0 (decimal 240)
                     1107  
 0100                1108  TO_5_6:             ds 1     ; TO Table, KPA row 5, RPM col 6
 0101                1109  TO_5_7:             ds 1     ; TO Table, KPA row 5, RPM col 7
 0102                1110  TO_6_0:             ds 1     ; TO Table, KPA row 6, RPM col 0
 0103                1111  TO_6_1:             ds 1     ; TO Table, KPA row 6, RPM col 1
 0104                1112  TO_6_2:             ds 1     ; TO Table, KPA row 6, RPM col 2
 0105                1113  TO_6_3:             ds 1     ; TO Table, KPA row 6, RPM col 3
 0106                1114  TO_6_4:             ds 1     ; TO Table, KPA row 6, RPM col 4
 0107                1115  TO_6_5:             ds 1     ; TO Table, KPA row 6, RPM col 5
 0108                1116  TO_6_6:             ds 1     ; TO Table, KPA row 6, RPM col 6
 0109                1117  TO_6_7:             ds 1     ; TO Table, KPA row 6, RPM col 7
 010A                1118  TO_7_0:             ds 1     ; TO Table, KPA row 7, RPM col 0
 010B                1119  TO_7_1:             ds 1     ; TO Table, KPA row 7, RPM col 1
 010C                1120  TO_7_2:             ds 1     ; TO Table, KPA row 7, RPM col 2
 010D                1121  TO_7_3:             ds 1     ; TO Table, KPA row 7, RPM col 3
 010E                1122  TO_7_4:             ds 1     ; TO Table, KPA row 7, RPM col 4
 010F                1123  TO_7_5:             ds 1     ; TO Table, KPA row 7, RPM col 5
                     1124  
                     1125  ;Memory Location $0100 (decimal 256)
                     1126  
 0110                1127  TO_7_6:             ds 1     ; TO Table, KPA row 7, RPM col 6
 0111                1128  TO_7_7:             ds 1     ; TO Table, KPA row 7, RPM col 7
                     1129  
                     1130  ;****************************************************************************
                     1131  ; - Torque table RPM column, KPA row configuration constants
                     1132  ;****************************************************************************
                     1133  
 0112                1134  RPMrangeTO_0:       ds 1     ; TO table RPM range column 0
 0113                1135  RPMrangeTO_1:       ds 1     ; TO table RPM range column 1
 0114                1136  RPMrangeTO_2:       ds 1     ; TO table RPM range column 2
 0115                1137  RPMrangeTO_3:       ds 1     ; TO table RPM range column 3
 0116                1138  RPMrangeTO_4:       ds 1     ; TO table RPM range column 4
 0117                1139  RPMrangeTO_5:       ds 1     ; TO table RPM range column 5
 0118                1140  RPMrangeTO_6:       ds 1     ; TO table RPM range column 6
 0119                1141  RPMrangeTO_7:       ds 1     ; TO table RPM range column 7


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 15
MV_TECA


 011A                1142  KPArangeTO_0:       ds 1     ; TO table KPA range row 0
 011B                1143  KPArangeTO_1:       ds 1     ; TO table KPA range row 1
 011C                1144  KPArangeTO_2:       ds 1     ; TO table KPA range row 2
 011D                1145  KPArangeTO_3:       ds 1     ; TO table KPA range row 3
 011E                1146  KPArangeTO_4:       ds 1     ; TO table KPA range row 4
 011F                1147  KPArangeTO_5:       ds 1     ; TO table KPA range row 5
                     1148  
                     1149  ;Memory Location $0110 (decimal 272)
                     1150  
 0120                1151  KPArangeTO_6:       ds 1     ; TO table KPA range row 6
 0121                1152  KPArangeTO_7:       ds 1     ; TO table KPA range row 7
                     1153  
                     1154  ;****************************************************************************
                     1155  ; - TPS range table column configuration constants
                     1156  ;****************************************************************************
                     1157  
 0122                1158  TPSrange_0:       ds 1     ;  TPS range column 0
 0123                1159  TPSrange_1:       ds 1     ;  TPS range column 1
 0124                1160  TPSrange_2:       ds 1     ;  TPS range column 2
 0125                1161  TPSrange_3:       ds 1     ;  TPS range column 3
 0126                1162  TPSrange_4:       ds 1     ;  TPS range column 4
 0127                1163  TPSrange_5:       ds 1     ;  TPS range column 5
 0128                1164  TPSrange_6:       ds 1     ;  TPS range column 6
 0129                1165  TPSrange_7:       ds 1     ;  TPS range column 7
                     1166  
                     1167  ;****************************************************************************
                     1168  ; - EPC_stall table column configuration constants
                     1169  ;****************************************************************************
                     1170  
 012A                1171  EPC_stall_0:       ds 1     ;  EPC_stall column 0
 012B                1172  EPC_stall_1:       ds 1     ;  EPC_stall column 1
 012C                1173  EPC_stall_2:       ds 1     ;  EPC_stall column 2
 012D                1174  EPC_stall_3:       ds 1     ;  EPC_stall column 3
 012E                1175  EPC_stall_4:       ds 1     ;  EPC_stall column 4
 012F                1176  EPC_stall_5:       ds 1     ;  EPC_stall column 5
                     1177  
                     1178  ;Memory Location $0120 (decimal 288)
                     1179  
 0130                1180  EPC_stall_6:       ds 1     ;  EPC_stall column 6
 0131                1181  EPC_stall_7:       ds 1     ;  EPC_stall column 7
                     1182  
                     1183  ;****************************************************************************
                     1184  ; - EPC_12 table column configuration constants
                     1185  ;****************************************************************************
                     1186  
 0132                1187  EPC_12_0:       ds 1     ;  EPC_12 column 0
 0133                1188  EPC_12_1:       ds 1     ;  EPC_12 column 1
 0134                1189  EPC_12_2:       ds 1     ;  EPC_12 column 2
 0135                1190  EPC_12_3:       ds 1     ;  EPC_12 column 3
 0136                1191  EPC_12_4:       ds 1     ;  EPC_12 column 4
 0137                1192  EPC_12_5:       ds 1     ;  EPC_12 column 5
 0138                1193  EPC_12_6:       ds 1     ;  EPC_12 column 6
 0139                1194  EPC_12_7:       ds 1     ;  EPC_12 column 7
                     1195  
                     1196  ;****************************************************************************
                     1197  ; - EPC_23 table column configuration constants
                     1198  ;****************************************************************************
                     1199  
 013A                1200  EPC_23_0:       ds 1     ;  EPC_23 column 0
 013B                1201  EPC_23_1:       ds 1     ;  EPC_23 column 1
 013C                1202  EPC_23_2:       ds 1     ;  EPC_23 column 2
 013D                1203  EPC_23_3:       ds 1     ;  EPC_23 column 3
 013E                1204  EPC_23_4:       ds 1     ;  EPC_23 column 4
 013F                1205  EPC_23_5:       ds 1     ;  EPC_23 column 5
                     1206  
                     1207  ;Memory Location $0130 (decimal 304)
                     1208  
 0140                1209  EPC_23_6:       ds 1     ;  EPC_23 column 6
 0141                1210  EPC_23_7:       ds 1     ;  EPC_23 column 7
                     1211  
                     1212  ;****************************************************************************
                     1213  ; - EPC_34 table column configuration constants
                     1214  ;****************************************************************************
                     1215  
 0142                1216  EPC_34_0:       ds 1     ;  EPC_34 column 0
 0143                1217  EPC_34_1:       ds 1     ;  EPC_34 column 1
 0144                1218  EPC_34_2:       ds 1     ;  EPC_34 column 2
 0145                1219  EPC_34_3:       ds 1     ;  EPC_34 column 3
 0146                1220  EPC_34_4:       ds 1     ;  EPC_34 column 4
 0147                1221  EPC_34_5:       ds 1     ;  EPC_34 column 5
 0148                1222  EPC_34_6:       ds 1     ;  EPC_34 column 6
 0149                1223  EPC_34_7:       ds 1     ;  EPC_34 column 7
 014A                1224  Blank_1_0:      ds 1     ; Place holder to make up 128 byte increments
 014B                1225  Blank_1_1:      ds 1     ; Place holder to make up 128 byte increments
 014C                1226  Blank_1_2:      ds 1     ; Place holder to make up 128 byte increments
 014D                1227  Blank_1_3:      ds 1     ; Place holder to make up 128 byte increments
 014E                1228  Blank_1_4:      ds 1     ; Place holder to make up 128 byte increments
 014F                1229  Blank_1_5:      ds 1     ; Place holder to make up 128 byte increments
                     1230  
                     1231  ;Memory Location $0140 (decimal 320)
                     1232  
 0150                1233  Blank_1_6:      ds 1     ; Place holder to make up 128 byte increments
 0151                1234  Blank_1_7:      ds 1     ; Place holder to make up 128 byte increments
                     1235  
                     1236  
                     1237  ;****************************************************************************
                     1238  ; - Second group of 64 bytes
                     1239  ;****************************************************************************
                     1240  ;****************************************************************************
                     1241  ; - Misc. configuration constants
                     1242  ;****************************************************************************
                     1243  
 0152                1244  EPC_TCC:       ds 1     ; EPC duty factor for TCC application
 0153                1245  EPC_decel:     ds 1     ; EPC duty factor for decel conditions
 0154                1246  EPC_rise:      ds 1     ; EPC rise time delay(20mS resolution)
 0155                1247  EPC_hold:      ds 1     ; EPC hold time delay(20mS resolution)
 0156                1248  SS1_del:       ds 1     ; SS1 apply time delay(20mS res)(M2-D2 shift)
 0157                1249  CCS_del:       ds 1     ; CCS apply/release time delay(20mS res)(D4 shifts)
 0158                1250  ExBrk_del:     ds 1     ; Exhaust Brake apply time delay(20mS res)
 0159                1251  TCC_min_RPM:   ds 1     ; TCC apply minimum RPM permissive
 015A                1252  MPH_stall:     ds 1     ; MPH maximum for stall EPC
 015B                1253  TPSrate:       ds 1     ; TPS DOT rate threshold for EPC stall settings
 015C                1254  CT_cnt:        ds 1     ; Closed throttle position ADC count
 015D                1255  WOT_cnt:       ds 1     ; Wide Open throttle position ADC count
 015E                1256  TPSspan:       ds 1     ; WOT_cnt - CT_cnt = TPSspan
 015F                1257  CT_min:        ds 1     ; Closed throttle position minimum %
                     1258  
                     1259  ;Memory Location $0150 (decimal 336)
                     1260  
 0160                1261  TrimFac:       ds 1     ; EPC Trim adjustment max value
 0161                1262  TuneConfig:    ds 1     ; Tuning configuration variable
 0162                1263  RPMkH:         ds 1     ; Hy byte constant for RPM/20 calculations
 0163                1264  RPMkL:         ds 1     ; Lo byte constant for RPM/20 calculations
 0164                1265  TOTempFac:     ds 1     ; Trans Oil Temp adjustment max value
 0165                1266  TOThi:         ds 1     ; TOT correction Hi Limit (degreesF + 40)
 0166                1267  TOTlo:         ds 1     ; TOT correction Lo Limit (degreesF + 40)
 0167                1268  Blank_2_0:     ds 1     ; Place holder to make up 64 byte increments
 0168                1269  Blank_2_1:     ds 1     ; Place holder to make up 64 byte increments
 0169                1270  Blank_2_2:     ds 1     ; Place holder to make up 64 byte increments
 016A                1271  Blank_2_3:     ds 1     ; Place holder to make up 64 byte increments
 016B                1272  Blank_2_4:     ds 1     ; Place holder to make up 64 byte increments
 016C                1273  Blank_2_5:     ds 1     ; Place holder to make up 64 byte increments
 016D                1274  Blank_2_6:     ds 1     ; Place holder to make up 64 byte increments
 016E                1275  Blank_2_7:     ds 1     ; Place holder to make up 64 byte increments
 016F                1276  Blank_2_8:     ds 1     ; Place holder to make up 64 byte increments
                     1277  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 16
MV_TECA


                     1278  ;Memory Location $0160 (decimal 352)
                     1279  
 0170                1280  Blank_2_9:     ds 1     ; Place holder to make up 64 byte increments
 0171                1281  Blank_2_10:    ds 1     ; Place holder to make up 64 byte increments
 0172                1282  Blank_2_11:    ds 1     ; Place holder to make up 64 byte increments
 0173                1283  Blank_2_12:    ds 1     ; Place holder to make up 64 byte increments
 0174                1284  Blank_2_13:    ds 1     ; Place holder to make up 64 byte increments
 0175                1285  Blank_2_14:    ds 1     ; Place holder to make up 64 byte increments
 0176                1286  Blank_2_15:    ds 1     ; Place holder to make up 64 byte increments
 0177                1287  Blank_2_16:    ds 1     ; Place holder to make up 64 byte increments
 0178                1288  Blank_2_17:    ds 1     ; Place holder to make up 64 byte increments
 0179                1289  Blank_2_18:    ds 1     ; Place holder to make up 64 byte increments
 017A                1290  Blank_2_19:    ds 1     ; Place holder to make up 64 byte increments
 017B                1291  Blank_2_20:    ds 1     ; Place holder to make up 64 byte increments
 017C                1292  Blank_2_21:    ds 1     ; Place holder to make up 64 byte increments
 017D                1293  Blank_2_22:    ds 1     ; Place holder to make up 64 byte increments
 017E                1294  Blank_2_23:    ds 1     ; Place holder to make up 64 byte increments
 017F                1295  Blank_2_24:    ds 1     ; Place holder to make up 64 byte increments
                     1296  
                     1297  ;Memory Location $0170 (decimal 368)
                     1298  
 0180                1299  Blank_2_25:    ds 1     ; Place holder to make up 64 byte increments
 0181                1300  Blank_2_26:    ds 1     ; Place holder to make up 64 byte increments
 0182                1301  Blank_2_27:    ds 1     ; Place holder to make up 64 byte increments
 0183                1302  Blank_2_28:    ds 1     ; Place holder to make up 64 byte increments
 0184                1303  Blank_2_29:    ds 1     ; Place holder to make up 64 byte increments
 0185                1304  Blank_2_30:    ds 1     ; Place holder to make up 64 byte increments
 0186                1305  Blank_2_31:    ds 1     ; Place holder to make up 64 byte increments
 0187                1306  Blank_2_32:    ds 1     ; Place holder to make up 64 byte increments
 0188                1307  Blank_2_33:    ds 1     ; Place holder to make up 64 byte increments
 0189                1308  Blank_2_34:    ds 1     ; Place holder to make up 64 byte increments
 018A                1309  Blank_2_35:    ds 1     ; Place holder to make up 64 byte increments
 018B                1310  Blank_2_36:    ds 1     ; Place holder to make up 64 byte increments
 018C                1311  Blank_2_37:    ds 1     ; Place holder to make up 64 byte increments
 018D                1312  Blank_2_38:    ds 1     ; Place holder to make up 64 byte increments
 018E                1313  Blank_2_39:    ds 1     ; Place holder to make up 64 byte increments
 018F                1314  Blank_2_40:    ds 1     ; Place holder to make up 64 byte increments
                     1315  
                     1316  ;Memory Location $0180 (decimal 384)
                     1317  
 0190                1318  Blank_2_41:    ds 1     ; Place holder to make up 64 byte increments
 0191                1319  Blank_2_42:    ds 1     ; Place holder to make up 64 byte increments
                     1320  
                     1321  
                     1322  ;****************************************************************************
                     1323  ;
                     1324  ; ----------------- Configure system and set up clock ----------------------
                     1325  ;
                     1326  ;****************************************************************************
                     1327  
 8000                1328       org     rom_start              ; Origin at memory location
                     1329                                      ; ($8000 = 32,768)(start of ROM)
                     1330  
                     1331  START:
                     1332  
                     1333  ;****************************************************************************
                     1334  ; - Set Configuration Register 1
                     1335  ;****************************************************************************
                     1336  
 8000 [04] 6E3B1F    1337       mov     #$3B,CONFIG1     ; Move %00111011 into Configuration Register 1
                     1338                                ;(COP timeout period=2p18-2p4 CGMXCLK cycles)
                     1339                                ;(LVI disabled during stop mode)
                     1340                                ;(LVI module resets disabled)
                     1341                                ;(LVI module power disabled)
                     1342                                ;(LVI operates in 5-V mode)
                     1343                                ;(Stop mode recovery after 4096 CGMXCLKC cycls)
                     1344                                ;(Stop instruction enabled)
                     1345                                ;(COP module disabled)
                     1346  
                     1347  ;****************************************************************************
                     1348  ; - Set Configuration Register 2
                     1349  ;****************************************************************************
                     1350  
 8003 [04] 6E011E    1351       mov     #$01,CONFIG2     ; Move %00000001 into Configuration Register 2
                     1352                                ;(Oscillator disabled during stop mode)
                     1353                                ;(Internal data bus clock used as clock source
                     1354                                ; for SCI)
                     1355  
                     1356  ;****************************************************************************
                     1357  ; - Set The Stack Pointer to the bottom of RAM
                     1358  ;****************************************************************************
                     1359  
 8006 [03] 450240    1360       ldhx     #ram_last+1           ; Load index register with value in
                     1361                                      ; "ram_last" +1 ($023F+1=$0240=576)
 8009 [02] 94        1362       txs                            ; Transfer value in index register Lo
                     1363                                      ; byte to stack
                     1364  
                     1365  ;****************************************************************************
                     1366  ; - Initialize the PLL Control Register for a bus frequency of 8.003584mhz
                     1367  ;****************************************************************************
                     1368  
 800A [04] 6E0236    1369       mov     #$02,PCTL      ; Move %00000010 into PLL Control Register
                     1370                              ;(PLL Interrupts Disabled)
                     1371                              ;(No change in lock condition(flag))
                     1372                              ;(PLL off)
                     1373                              ;(CGMXCLK divided by 2 drives CGMOUT)
                     1374                              ;(VCO pwr of 2 mult = 1(E=0))
                     1375                              ;(Prescale mult = 4(P=2))
 800D [04] 6E0338    1376       mov     #$03,PMSH      ; Move %00000011 into PLL Multiplier Select
                     1377                              ; Register Hi (Set N MSB)
 8010 [04] 6ED139    1378       mov     #$D1,PMSL      ; Move %11010001 into PLL Multiplier Select
                     1379                              ; Register Lo (Set N LSB)($84 for 7.37 MHz)
 8013 [04] 6ED03A    1380       mov     #$D0,PMRS      ; Move %11010000 into PLL VCO Range Select
                     1381                              ; Register (Set L) ($C0 for 7.37 MHz)
 8016 [04] 6E013B    1382       mov     #$01,PMDS      ; Move %00000001 into Reference Divider Select
                     1383                              ; Register (Set "RDS0" bit (default value of 1)
 8019 [04] 1E37      1384       bset    AUTO,PBWC      ; Set "Auto" bit of PLL Bandwidth Control Register
 801B [04] 6E3236    1385       mov     #$32,PCTL      ; Move %00100000 into PLL Control Register
                     1386                              ;(PLL On)
                     1387  
                     1388  PLL_WAIT:
 801E [05] 0D37FD    1389       brclr   LOCK,PBWC,PLL_WAIT     ; If "Lock" bit of PLL Bandwidth Control
                     1390                                      ; Register is clear, branch to PLL_WAIT:
 8021 [04] 1836      1391       bset    BCS,PCTL               ; Set "BCS" bit of PLL Control Register
                     1392                                      ;(CGMXCLK divided by 2 drives CGMOUT)
                     1393                                      ;(Select VCO as base clock)
                     1394  
                     1395  
                     1396  ;****************************************************************************
                     1397  ;
                     1398  ; ----------------------------- Set up RS 232 ------------------------------
                     1399  ;
                     1400  ;****************************************************************************
                     1401  
                     1402  ;****************************************************************************
                     1403  ; - Enable/disable loop mode
                     1404  ;****************************************************************************
                     1405  
 8023 [04] 6E4013    1406       mov     #$40,SCC1     ; Move %01000000 into SCI Control Register 1
                     1407                             ;(Normal operation enabled)
                     1408                             ;(Set "ENSCI" bit)(SCI enabled)
                     1409                             ;(Transmitter output not inverted)
                     1410                             ;(8 bit SCI characters)
                     1411                             ;(Idle line wakeup)
                     1412                             ;(Idle character bit countbegins after start bit)
                     1413                             ;(Parity function disabled)


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 17
MV_TECA


                     1414                             ;(Even Parity)
 8026 [04] 1013      1415       bset    PTY,SCC1      ; Set "PTY" bit of SCI Control Register 1
                     1416                             ;(Odd Parity)???
                     1417  
                     1418  ;****************************************************************************
                     1419  ; - This register initialize interrupts request and activates the
                     1420  ;   transmitter and receiver and wakeup mode
                     1421  ;****************************************************************************
                     1422  
 8028 [04] 6E0C14    1423       mov     #$0C,SCC2     ; Move %00001100 into SCI Control Register 2
                     1424                             ;(SCTIE not enabled to generate CPU interrupt)
                     1425                             ;(TCIE not enabled to generate CPU interrupt)
                     1426                             ;(SCRIE not enabled to generate CPU interrupt)
                     1427                             ;(ILIE not enabled to generate CPU interrupt)
                     1428                             ;(Set "TE" bit)(Transmitter enabled)
                     1429                             ;(Set "RE" bit)(Receiver enabled)
                     1430                             ;(Normal Operation)
                     1431                             ;(No break characters being transmitted)
                     1432  
                     1433  ;****************************************************************************
                     1434  ; - This register initialize the DMA services and error interrupts
                     1435  ;****************************************************************************
                     1436  
 802B [03] 3F15      1437       clr     SCC3          ; Clear SCI Control Register 3
                     1438                             ;(DMA not enabled to service SCI receiver)
                     1439                             ;(SCTE DMA service requests disabled)
                     1440                             ;(SCI error CPU interrupt requests for OR bit
                     1441                             ; disabled)
                     1442                             ;(SCI error CPU interrupt requests for NE bit
                     1443                             ; disabled)
                     1444                             ;(SCI error CPU interrupt requests for FE bit
                     1445                             ; disabled)
                     1446                             ;(SCI error CPU interrupt requests for PE bit
                     1447                             ; disabled)
                     1448  
                     1449  ;****************************************************************************
                     1450  ; - This register sets baud rate
                     1451  ;****************************************************************************
                     1452  
 802D [02] A630      1453       lda      #$30           ; Load accumulator with %00110000
 802F [03] B719      1454       sta      SCBR           ; Copy to SCI Baud Rate Register
                     1455                               ; 8003584mhz/(64*13*1)=9619.7 baud
                     1456  
                     1457  ;****************************************************************************
                     1458  ; ------------- Set up the port data-direction registers --------------------
                     1459  ;               Set directions,
                     1460  ;               Preset state of pins to become outputs
                     1461  ;               Set all unused pins to outputs initialized Lo
                     1462  ;****************************************************************************
                     1463  
                     1464  ;****************************************************************************
                     1465  ; - Set up VFD control line I/Os
                     1466  ;****************************************************************************
                     1467  
                     1468  ; Port B
 8031 [03] 3F01      1469       clr     PORTB           ; Clear Port B Data Register
                     1470                               ;(Preinit all pins low)
 8033 [02] A6FF      1471       lda     #$FF            ; Load accumulator with %11111111
                     1472                               ;(port direction setup 1 = output)
 8035 [03] B705      1473       sta     DDRB            ; Copy to Port A Data Direction Register
                     1474                               ; Set all as outputs
                     1475                               ; NA,RS,R/W,En,NA,NA,NA,NA
                     1476  
                     1477  ; Port C
 8037 [03] 3F02      1478       clr     PORTC           ; Clear Port C Data Register
                     1479                               ;(Preinit all pins low)
 8039 [02] A6FF      1480       lda     #$FF            ; Load accumulator with %11111111
                     1481                               ; (set up port directions, 1 = out)
 803B [03] B706      1482       sta     DDRC            ; Copy to Port C Data Direction Register
                     1483                               ; Set all as outputs
                     1484                               ; NA,NA,NA,NA,DB7,DB6,DB5,DB4
                     1485  
                     1486  ;****************************************************************************
                     1487  ; - Set up for push button inputs
                     1488  ;****************************************************************************
                     1489  
                     1490  ; Port A
 803D [04] 6EFF0D    1491       mov     #$FF,PTAPUE     ; Move %11111111 into Port A pullup register
                     1492                               ;(Set all pullups)
 8040 [03] 3F00      1493       clr     PORTA           ; Clear Port A Data Regisister
                     1494                               ;(preinit all pins Lo)
 8042 [02] A6F0      1495       lda     #$F0            ; Load accumulator with %11110000
                     1496                               ;(port direction setup 1 = output)
 8044 [03] B704      1497       sta     DDRA            ; Copy to Port A Data Direction Register
                     1498                               ; Inputs on PTA3,2,1,0
                     1499                               ; Tog Mode,Frz/Sel,Scrl Rt/Inc.Scrl Lft/Dec
                     1500                               ; Outputs on PTA7,6,5,4 (not used)
                     1501  
                     1502  ;****************************************************************************
                     1503  ; - Set up Ports D and E.(The Motorola manual states that it is not
                     1504  ;   necessarry to set up Port E when SCI is enabled, but we'll do it anyway).
                     1505  ;****************************************************************************
                     1506  
                     1507  ; Port D
 8046 [03] 3F03      1508       clr     PORTD           ; Clear Port D Data Register
                     1509                               ;(Preinit all pins low)
 8048 [02] A6FF      1510       lda     #$FF            ; Load accumulator with %11111111
                     1511                               ; (init port directions 1 = out)
 804A [03] B707      1512       sta     DDRD            ; Copy to Port D Data Direction Register
                     1513                               ; Set all as outputs
                     1514                               ; NA,NA,NA,NA,NA,NA,NA,NA
                     1515  
                     1516  ; Port E
 804C [03] 3F08      1517       clr     PORTE           ; Clear Port E Data Register (to avoid glitches)
 804E [02] A601      1518       lda     #$01            ; Load accumulator with %00000001
                     1519                               ; (set up port directions, 1 = out)
                     1520                               ; (Serial Comm Port)
 8050 [03] B70C      1521       sta     DDRE            ; Copy to Port E Data Direction Register
                     1522  
                     1523  
                     1524  ;***************************************************************************
                     1525  ; - Initialize the variables
                     1526  ;***************************************************************************
                     1527  
 8052 [01] 4F        1528       clra                    ; Clear accumulator
 8053 [01] 8C        1529       clrh                    ; Clear index register Hi byte
 8054 [01] 5F        1530       clrx                    ; Clear index register Lo byte
 8055 [03] 3F40      1531       clr     Sw0DB           ; Switch #0 de-bounce timer counter variable
 8057 [03] 3F41      1532       clr     Sw0ARC          ; Switch #0 auto-repeat command timer counter
 8059 [03] 3F42      1533       clr     Sw0AR           ; Switch #0 auto-repeat timer counter variable
 805B [03] 3F43      1534       clr     Sw1DB           ; Switch #1 de-bounce timer counter variable
 805D [03] 3F44      1535       clr     Sw1ARC          ; Switch #1 auto-repeat command timer counter
 805F [03] 3F45      1536       clr     Sw1AR           ; Switch #1 auto-repeat timer counter variable
 8061 [03] 3F46      1537       clr     Sw2DB           ; Switch #2 de-bounce timer counter variable
 8063 [03] 3F47      1538       clr     Sw2ARC          ; Switch #2 auto-repeat command timer counter
 8065 [03] 3F48      1539       clr     Sw2AR           ; Switch #2 auto-repeat timer counter variable
 8067 [03] 3F49      1540       clr     Sw3DB           ; Switch #3 de-bounce timer counter variable
 8069 [03] 3F4A      1541       clr     Sw3ARC          ; Switch #3 auto-repeat command timer counter
 806B [03] 3F4B      1542       clr     Sw3AR           ; Switch #3 auto-repeat timer counter variable
 806D [03] 3F4C      1543       clr     LPflags         ; Switch last pass status bit field variable
 806F [03] 3F4D      1544       clr     ARCflags        ; Switch auto-repeat command status bit field
 8071 [03] 3F4E      1545       clr     ARflags         ; Switch auto-repeat status bit field variable
 8073 [03] 3F4F      1546       clr     Swflags         ; Switch status bit field variable
 8075 [03] 3F50      1547       clr     ModeCntr        ; Counter for determining "mode" bit status
 8077 [03] 3F51      1548       clr     FrzCntr         ; Counter for determining "frz" bit status
 8079 [03] 3F52      1549       clr     SelCntr         ; Counter for determining "sel" bit status


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 18
MV_TECA


 807B [03] 3F53      1550       clr     flags           ; Bit field for operating status flags (1 of 2)
 807D [03] 3F54      1551       clr     ScrnCnt         ; Counter for display screen numbers
 807F [03] 3F55      1552       clr     ScrnCnt_prv     ; Screen count number previous
 8081 [03] 3F56      1553       clr     ScrnCnt_Lst     ; Screen count number last
 8083 [03] 3F57      1554       clr     ConCnt          ; Counter for Constant numbers
 8085 [03] 3F58      1555       clr     ConCnt_prv      ; Constant number previous
 8087 [03] 3F59      1556       clr     ConCnt_Lst      ; Constant number last
 8089 [03] 3F5A      1557       clr     CurCon          ; Value of current selected constant
 808B [03] 3F5B      1558       clr     ConVal          ; Value for constant data
 808D [03] 3F5C      1559       clr     mS              ; Milliseconds counter
 808F [03] 3F5D      1560       clr     mSx5            ; 5 Milliseconds counter
 8091 [03] 3F5E      1561       clr     ByteCnt         ; Count of bytes to receive via SCI
 8093 [03] 3F5F      1562       clr     ByteGoal        ; Desired number of bytes to receive via SCI
 8095 [03] 3F60      1563       clr     readbuf         ; Buffer for temporary storage of received byte
 8097 [03] 3F61      1564       clr     value           ; Value sent to VFD(instruction or data)
 8099 [03] 3F62      1565       clr     LineNum         ; Line number for VFD(for instruction)
 809B [03] 3F63      1566       clr     ColNum          ; Column number for VFD(for instruction)
 809D [03] 3F64      1567       clr     DatVal          ; Data value for VFD
 809F [03] 3F65      1568       clr     ComVal          ; Value for VFD command data
 80A1 [03] 3F66      1569       clr     TopVal          ; Value for VFD top line data
 80A3 [03] 3F67      1570       clr     DisVal          ; Value for VFD bottom line variable data
 80A5 [03] 3F68      1571       clr     BotLin0         ; Bottom Line Column 0
 80A7 [03] 3F69      1572       clr     BotLin1         ; Bottom Line Column 1
 80A9 [03] 3F6A      1573       clr     BotLin2         ; Bottom Line Column 2
 80AB [03] 3F6B      1574       clr     BotLin3         ; Bottom Line Column 3
 80AD [03] 3F6C      1575       clr     BotLin4         ; Bottom Line Column 4
 80AF [03] 3F6D      1576       clr     BotLin5         ; Bottom Line Column 5
 80B1 [03] 3F6E      1577       clr     BotLin6         ; Bottom Line Column 6
 80B3 [03] 3F6F      1578       clr     BotLin7         ; Bottom Line Column 7
 80B5 [03] 3F70      1579       clr     BotLin8         ; Bottom Line Column 8
 80B7 [03] 3F71      1580       clr     BotLin9         ; Bottom Line Column 9
 80B9 [03] 3F72      1581       clr     BotLin10        ; Bottom Line Column 10
 80BB [03] 3F73      1582       clr     BotLin11        ; Bottom Line Column 11
 80BD [03] 3F74      1583       clr     BotLin12        ; Bottom Line Column 12
 80BF [03] 3F75      1584       clr     BotLin13        ; Bottom Line Column 13
 80C1 [03] 3F76      1585       clr     BotLin14        ; Bottom Line Column 14
 80C3 [03] 3F77      1586       clr     BotLin15        ; Bottom Line Column 15
 80C5 [03] 3F78      1587       clr     BotLin16        ; Bottom Line Column 16
 80C7 [03] 3F79      1588       clr     BotLin17        ; Bottom Line Column 17
 80C9 [03] 3F7A      1589       clr     BotLin18        ; Bottom Line Column 18
 80CB [03] 3F7B      1590       clr     BotLin19        ; Bottom Line Column 19
 80CD [03] 3F7C      1591       clr     BotLin0L        ; Bottom Line Column 0, last pass
 80CF [03] 3F7D      1592       clr     BotLin1L        ; Bottom Line Column 1, last pass
 80D1 [03] 3F7E      1593       clr     BotLin2L        ; Bottom Line Column 2, last pass
 80D3 [03] 3F7F      1594       clr     BotLin3L        ; Bottom Line Column 3, last pass
 80D5 [03] 3F80      1595       clr     BotLin4L        ; Bottom Line Column 4, last pass
 80D7 [03] 3F81      1596       clr     BotLin5L        ; Bottom Line Column 5, last pass
 80D9 [03] 3F82      1597       clr     BotLin6L        ; Bottom Line Column 6, last pass
 80DB [03] 3F83      1598       clr     BotLin7L        ; Bottom Line Column 7, last pass
 80DD [03] 3F84      1599       clr     BotLin8L        ; Bottom Line Column 8, last pass
 80DF [03] 3F85      1600       clr     BotLin9L        ; Bottom Line Column 9, last pass
 80E1 [03] 3F86      1601       clr     BotLin10L       ; Bottom Line Column 10, last pass
 80E3 [03] 3F87      1602       clr     BotLin11L       ; Bottom Line Column 11, last pass
 80E5 [03] 3F88      1603       clr     BotLin12L       ; Bottom Line Column 12, last pass
 80E7 [03] 3F89      1604       clr     BotLin13L       ; Bottom Line Column 13, last pass
 80E9 [03] 3F8A      1605       clr     BotLin14L       ; Bottom Line Column 14, last pass
 80EB [03] 3F8B      1606       clr     BotLin15L       ; Bottom Line Column 15, last pass
 80ED [03] 3F8C      1607       clr     BotLin16L       ; Bottom Line Column 16, last pass
 80EF [03] 3F8D      1608       clr     BotLin17L       ; Bottom Line Column 17, last pass
 80F1 [03] 3F8E      1609       clr     BotLin18L       ; Bottom Line Column 18, last pass
 80F3 [03] 3F8F      1610       clr     BotLin19L       ; Bottom Line Column 19, last pass
 80F5 [03] 3F90      1611       clr     AC_100          ; 8 bit ASCII conversion 100s column
 80F7 [03] 3F91      1612       clr     AC_10           ; 8 bit ASCII conversion 10s column
 80F9 [03] 3F92      1613       clr     AC_1            ; 8 bit ASCII conversion 1s column
                     1614  
 80FB [04] 6EFF56    1615       mov     #$FF,ScrnCnt_Lst     ; Move decimal 255 into "ScrnCnt_Lst"
 80FE [04] 6EFF59    1616       mov     #$FF,ConCnt_Lst      ; Move decimal 255 into "ConCnt_Lst"
                     1617  
                     1618  ;***************************************************************************
                     1619  ; - Delay while power stabilizes, allow MS and VFD to come up.
                     1620  ;   One pass through the primary loop takes ~1.5uS, so this delay is ~300mS
                     1621  ;   (minimum delay is 260mS)
                     1622  ;***************************************************************************
                     1623  
 8101 [05] CD88B2    1624       jsr     DELAY300     ; Jump to subroutine at DELAY300:
                     1625  
                     1626  ;****************************************************************************
                     1627  ; Set up TIM2 as a free running ~1us counter. Set Channel 0 output compare
                     1628  ; to generate the ~1000us(1.0mS) clock tick interupt vector "TIM2CH0_ISR:"
                     1629  ;****************************************************************************
                     1630  
 8104 [04] 6E332B    1631       mov     #$33,T2SC       ; Move %00110011 into Timer2
                     1632                               ; Status and Control Register
                     1633                               ;(Disable interrupts, stop timer)
                     1634                               ;(Prescale and counter cleared))
                     1635                               ;(Prescale for bus frequency / 8)
 8107 [04] 6EFF2E    1636       mov     #$FF,T2MODH     ; Move decimal 255 into T2 modulo reg Hi
 810A [04] 6EFF2F    1637       mov     #$FF,T2MODL     ; Move decimal 255 into T2 modulo reg Lo
                     1638                               ;(free running timer)
 810D [04] 6E0331    1639       mov     #$03,T2CH0H     ; Move decimal 3 into T1CH0 O/C register Hi
 8110 [04] 6EE832    1640       mov     #$E8,T2CH0L     ; Move decimal 232 into T1CH0 O/C register Lo
                     1641                               ;(~1000uS)=(~1.0mS)
 8113 [04] 6E5430    1642       mov     #$54,T2SC0      ; Move %01010100 into Timer2
                     1643                               ; channel 0 status and control register
                     1644                               ; (Output compare, interrupt enabled)
 8116 [04] 6E032B    1645       mov     #$03,T2SC       ; Move %00000011 into Timer2
                     1646                               ; Status and Control Register
                     1647                               ; Disable interrupts, counter Active
                     1648                               ; Prescale for bus frequency / 8
                     1649                               ; 8,003584hz/8=1000448hz
                     1650                               ; = .0000009995sec
                     1651  
                     1652  ;****************************************************************************
                     1653  ; - Enable Interrupts
                     1654  ;****************************************************************************
                     1655  
 8119 [02] 9A        1656       cli              ; Clear interrupt mask ( Turn on all interrupts now )
                     1657  
                     1658  ;***************************************************************************
                     1659  ; ------------------------------ Initialize VFD ---------------------------
                     1660  ;
                     1661  ;  PTB4       - VFD Display Enable
                     1662  ;  PTB5       - VFD Display R/W
                     1663  ;  PTB6       - VFD Display RS
                     1664  ;  PTC0       - VFD Display data DB4
                     1665  ;  PTC1       - VFD Display data DB5
                     1666  ;  PTC2       - VFD Display data DB6
                     1667  ;  PTC3       - VFD Display data DB7
                     1668  ;
                     1669  ;***************************************************************************
                     1670  
                     1671  ;***************************************************************************
                     1672  ; - Clear EN, R/W, and RS
                     1673  ;***************************************************************************
                     1674  
 811A [04] 6E0001    1675       mov     #$00,PORTB     ; Move 0 into PortB(Clear all Port B)
                     1676                              ;("En"=0,"R/W"=0,"RS"=0)
                     1677  
                     1678  ;***************************************************************************
                     1679  ; - Initialize for 8 bit mode (Function Set)(do this 3 times)
                     1680  ;***************************************************************************
                     1681  
 811D [04] 6E0302    1682       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1683                                ;(Set bit 0=DB4, and bit1=DB5)
 8120 [04] 1801      1684       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8122 [05] CD8AAC    1685       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 19
MV_TECA


 8125 [04] 1901      1686       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8127 [05] CD8AB8    1687       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1688  
 812A [04] 6E0302    1689       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1690                                ;(Set bit 0=DB4, and bit1=DB5)
 812D [04] 1801      1691       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 812F [05] CD8AAC    1692       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8132 [04] 1901      1693       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8134 [05] CD8AB8    1694       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1695  
 8137 [04] 6E0302    1696       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1697                                ;(Set bit 0=DB4, and bit1=DB5)
 813A [04] 1801      1698       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 813C [05] CD8AAC    1699       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 813F [04] 1901      1700       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8141 [05] CD8AB8    1701       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1702  
                     1703  ;***************************************************************************
                     1704  ; - Set 4 bit bus mode Hi nibble (Function Set)
                     1705  ;***************************************************************************
                     1706  
 8144 [04] 6E0202    1707       mov     #$02,PORTC       ; Move %00000010 into PortC
                     1708                                ;(Set bit1=DB5)
 8147 [04] 1801      1709       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8149 [05] CD8AAC    1710       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 814C [04] 1901      1711       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 814E [05] CD8AB8    1712       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1713  
                     1714  ;***************************************************************************
                     1715  ; - Set 4 bit bus mode Hi nibble (Function Set)
                     1716  ;***************************************************************************
                     1717  
 8151 [04] 6E0202    1718       mov     #$02,PORTC       ; Move %00000010 into PortC
                     1719                                ;(Set bit1=DB5)
 8154 [04] 1801      1720       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8156 [05] CD8AB8    1721       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8159 [04] 1901      1722       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1723  
                     1724  
                     1725  ;***************************************************************************
                     1726  ; - Set 4 bit bus mode Lo nibble (Function Set)
                     1727  ;***************************************************************************
                     1728  
 815B [04] 6E0802    1729       mov     #$08,PORTC       ; Move %00001000 into PortC(Set bit7=DB3)
 815E [04] 1801      1730       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8160 [05] CD8AAC    1731       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8163 [04] 1901      1732       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8165 [05] CD8AB8    1733       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1734  
                     1735  ;***************************************************************************
                     1736  ; - Set brightness to 100% Hi nibble (Brightness Set)
                     1737  ;***************************************************************************
                     1738  
 8168 [04] 1C01      1739       bset    Reg_Sel,PORTB    ; Set "Reg_Sel" bit of PortB(RS=1)
 816A [05] CD8AB8    1740       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 816D [04] 6E0002    1741       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 8170 [04] 1801      1742       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8172 [05] CD8AB8    1743       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8175 [04] 1901      1744       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1745  
                     1746  ;***************************************************************************
                     1747  ; - Set brightness to 100% Lo nibble (Brightness Set)
                     1748  ;***************************************************************************
                     1749  
 8177 [04] 6E0002    1750       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 817A [04] 1801      1751       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 817C [05] CD8AAC    1752       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 817F [04] 1901      1753       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8181 [05] CD8AB8    1754       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8184 [04] 1D01      1755       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of PortB(RS=0)
                     1756  
                     1757  ;***************************************************************************
                     1758  ; - Set display off, cursor off, blinking off Hi nibble
                     1759  ;   (Display On/Off control)
                     1760  ;***************************************************************************
                     1761  
 8186 [04] 6E0002    1762       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 8189 [04] 1801      1763       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 818B [05] CD8AB8    1764       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 818E [04] 1901      1765       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1766  
                     1767  ;***************************************************************************
                     1768  ; - Set display off, cursor off, blinking off Lo nibble
                     1769  ;   (Display On/Off control)
                     1770  ;***************************************************************************
                     1771  
 8190 [04] 6E0802    1772       mov     #$08,PORTC       ; Move %00001000 into PortC(Set bit7=DB3)
 8193 [04] 1801      1773       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8195 [05] CD8AAC    1774       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8198 [04] 1901      1775       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 819A [05] CD8AB8    1776       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1777  
                     1778  ;***************************************************************************
                     1779  ; - Set display clear Hi nibble(Display Clear)
                     1780  ;***************************************************************************
                     1781  
 819D [04] 6E0002    1782       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81A0 [04] 1801      1783       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81A2 [05] CD8AB8    1784       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81A5 [04] 1901      1785       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1786  
                     1787  ;***************************************************************************
                     1788  ; - Set display clear Lo nibble(Display Clear)
                     1789  ;***************************************************************************
                     1790  
 81A7 [04] 6E0102    1791       mov     #$01,PORTC       ; Move %00000001 into PortC (Set bit0=DB0))
 81AA [04] 1801      1792       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81AC [05] CD8AAC    1793       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81AF [04] 1901      1794       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1795  
                     1796  ;***************************************************************************
                     1797  ; - Delay for command to execute (min 2.3mS)
                     1798  ;   One pass through the primary loop takes ~1.5uS, bus frequency of ~8mHZ
                     1799  ;***************************************************************************
                     1800  
 81B1 [03] 3F9C      1801       clr     tmp2       ; Clear tmp2 variable
                     1802  
                     1803  WAIT_6:
 81B3 [03] 3F9B      1804       clr     tmp1       ; Clear tmp1 variable
                     1805  
                     1806  WAIT_5:
 81B5 [03] B69B      1807       lda     tmp1       ; Load accumulator with value in tmp1 variable
 81B7 [01] 4C        1808       inca               ; Increment value in accumulator
 81B8 [03] B79B      1809       sta     tmp1       ; Copy to tmp1 variable
 81BA [02] A1FF      1810       cmp     #$FF       ; Compare value in accumulator with decimal 255
 81BC [03] 25F7      1811       blo     WAIT_5     ; If C bit of CCR is set, (A<M), branch to WAIT_5:
 81BE [03] B69C      1812       lda     tmp2       ; Load accumulator with value in tmp2 variable
 81C0 [01] 4C        1813       inca               ; Increment value in accumulator
 81C1 [03] B79C      1814       sta     tmp2       ; Copy to tmp2 variable
 81C3 [02] A107      1815       cmp     #$07       ; Compare value in accumulator with decimal 7
 81C5 [03] 25EC      1816       blo     WAIT_6     ; If C bit of CCR is set, (A<M), branch to WAIT_6:
                     1817                          ;(~2.6mS delay)
                     1818  
                     1819  ;***************************************************************************
                     1820  ; - Set display on, cursor off, blinking off Hi nibble
                     1821  ;   (Display On/Off control)


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 20
MV_TECA


                     1822  ;***************************************************************************
                     1823  
 81C7 [04] 6E0002    1824       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81CA [04] 1801      1825       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81CC [05] CD8AB8    1826       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81CF [04] 1901      1827       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1828  
                     1829  ;***************************************************************************
                     1830  ; - Set display on, cursor off, blinking off Lo nibble
                     1831  ;   (Display On/Off control)
                     1832  ;***************************************************************************
                     1833  
 81D1 [04] 6E0C02    1834       mov     #$0C,PORTC       ; Move %00001100 into PortC
                     1835                                ;(Set bit7=DB3 and bit6=DB2)
 81D4 [04] 1801      1836       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81D6 [05] CD8AAC    1837       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81D9 [04] 1901      1838       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 81DB [05] CD8AB8    1839       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1840  
                     1841  ;***************************************************************************
                     1842  ; - Set cursor increment Hi nibble(Entry Mode Set)
                     1843  ;***************************************************************************
                     1844  
 81DE [04] 6E0002    1845       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81E1 [04] 1801      1846       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81E3 [05] CD8AB8    1847       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81E6 [04] 1901      1848       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1849  
                     1850  ;***************************************************************************
                     1851  ; - Set cursor increment Lo nibble(Entry Mode Set)
                     1852  ;***************************************************************************
                     1853  
 81E8 [04] 6E0602    1854       mov     #$06,PORTC       ; Move %00000110 into PortC
                     1855                                ;(Set bit6=DB2 and bit5=DB1)
 81EB [04] 1801      1856       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81ED [05] CD8AAC    1857       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81F0 [04] 1901      1858       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 81F2 [05] CD8AB8    1859       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1860  
                     1861  ;***************************************************************************
                     1862  ; - Upload the Constants group 1 from MS_TECA RAM to MV_TECA RAM.
                     1863  ;***************************************************************************
                     1864  
 81F5 [04] 1053      1865       bset    mde,flags          ; Set "mde" bit of "flags" variable
                     1866                                  ;("Configuration" mode)
 81F7 [04] 1653      1867       bset    RcvG1,flags        ; Set "RcvG1" bit of "flags" variable
 81F9 [03] B616      1868       lda     SCS1               ; Load accumulator with value in SCI
                     1869                                  ; Control Register 1
                     1870                                  ;(Clear transmitter empty bit)
                     1871                                  ;(Clears all by read)
 81FB [04] 6E5618    1872       mov     #'V',SCDR          ; Move ASCII'V' to SCI Data Register
                     1873                                  ;(Transmitter is running, so data
                     1874                                  ; shift starts now!)
 81FE [03] 3F5E      1875       clr     ByteCnt            ; Clear "ByteCnt" variable
                     1876  ;     mov     #$80,ByteGoal      ; Move decimal 128 into "ByteGoal" var
                     1877                                  ;(number of configuration constants)
 8200 [04] 6E815F    1878       mov     #$81,ByteGoal
 8203 [04] 1A14      1879       bset    SCRIE,SCC2         ; Set "SCRIE" bit of SCI Control Register 2
                     1880                                  ;(SCRF enabled to generate CPU Interrupt)
 8205 [05] CD88B2    1881       jsr     DELAY300           ; Jump to subroutine at DELAY300:
                     1882                                  ;(Wait for data transfer to complete)
 8208 [04] 1753      1883       bclr    RcvG1,flags        ; Clear "RcvG1" bit of "flags" variable
                     1884  
                     1885  
                     1886  ;***************************************************************************
                     1887  ; - Upload the Constants group 2 from MS_TECA RAM to MV_TECA RAM.
                     1888  ;***************************************************************************
                     1889  
 820A [04] 1853      1890       bset    RcvG2,flags        ; Set "RcvG2" bit of "flags" variable
 820C [03] B616      1891       lda     SCS1               ; Load accumulator with value in SCI
                     1892                                  ; Control Register 1
                     1893                                  ;(Clear transmitter empty bit)
                     1894                                  ;(Clears all by read)
 820E [04] 6E4918    1895       mov     #'I',SCDR          ; Move ASCII'I' to SCI Data Register
                     1896                                  ;(Transmitter is running, so data
                     1897                                  ; shift starts now!)
 8211 [03] 3F5E      1898       clr     ByteCnt            ; Clear "ByteCnt" variable
                     1899  ;     mov     #$80,ByteGoal      ; Move decimal 128 into "ByteGoal" var
                     1900                                  ;(number of configuration constants)
 8213 [04] 6E815F    1901       mov     #$81,ByteGoal
 8216 [04] 1A14      1902       bset    SCRIE,SCC2         ; Set "SCRIE" bit of SCI Control Register 2
                     1903                                  ;(SCRF enabled to generate CPU Interrupt)
 8218 [05] CD88B2    1904       jsr     DELAY300           ; Jump to subroutine at DELAY300:
                     1905                                  ;(Wait for data transfer to complete)
 821B [04] 1953      1906       bclr    RcvG2,flags        ; Clear "RcvG2" bit of "flags" variable
 821D [04] 1153      1907       bclr    mde,flags          ; Clear "mde" bit of "flags" variable
                     1908                                  ;("Display" mode)
                     1909  
                     1910  
                     1911  ;****************************************************************************
                     1912  ;****************************************************************************
                     1913  ;*                        M A I N  E V E N T  L O O P                       *
                     1914  ;****************************************************************************
                     1915  ;****************************************************************************
                     1916  
                     1917  LOOPY:
 821F [05] CD87E8    1918       jsr     SW0_CHK     ; Jump to subroutine at SW0_CHK:
                     1919                           ;(Check he state of the Display Scroll Left /
                     1920                           ; Decrease Selected Variable button on PTA0)
 8222 [05] CD882F    1921       jsr     SW1_CHK     ; Jump to subroutine at SW1_CHK:
                     1922                           ;(Check he state of the Display Scroll Right /
                     1923                           ; Increase Selected Variable button on PTA1)
 8225 [05] CD8876    1924       jsr     SW2_CHK     ; Jump to subroutine at SW2_CHK:
                     1925                           ;(Check he state of the Display Freeze / Select
                     1926                           ; Configuration variable button on PTA2)
                     1927  
                     1928  ;****************************************************************************
                     1929  ; - Check to see what mode we are in and branch accordingly.
                     1930  ;****************************************************************************
                     1931  
 8228 [05] 005302    1932       brset   mde,flags,CONFIG_CHK_JMP   ; If "mde" bit of "flags variable is
                     1933                                          ; set, branch to CONFIG_CHK_JMP:
                     1934                                          ;("mde" = 1 = configuration mode)
 822B [03] 2003      1935       bra     DSPLY_CHK                  ; Branch to DSPLY_CHK:
                     1936                                          ;("mde" = 0 = display mode)
                     1937  
                     1938  CONFIG_CHK_JMP:
 822D [03] CC85E6    1939       jmp     CONFIG_CHK                 ; Jump to CONFIG_CHK:(long branch)
                     1940  
                     1941  
                     1942  ;****************************************************************************
                     1943  ;****************************************************************************
                     1944  ;*                             DISPLAY SECTION                              *
                     1945  ;****************************************************************************
                     1946  ;****************************************************************************
                     1947  
                     1948  DSPLY_CHK:
                     1949  
                     1950  ;****************************************************************************
                     1951  ; - First, check to see which screen we are in, if we are in any of the SCI
                     1952  ;   screens(8,9,10,11 or 12), branch to the appropriate section. Otherwise,
                     1953  ;   check to see if any of the input buttons are flagged, and if so,
                     1954  ;   branch accordingly.
                     1955  ;***************************************************************************
                     1956  
 8230 [03] B654      1957       lda     ScrnCnt                  ; Load accumulator with value in


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 21
MV_TECA


                     1958                                        ; "ScrnCnt" variable
 8232 [04] 41080F    1959       cbeqa   #$08,GET_G1_SC_JMP       ; Compare value in accumulator with
                     1960                                        ; decimal 8, branch to
                     1961                                        ; GET_G1_SC_JMP: if equal
 8235 [04] 41090F    1962       cbeqa   #$09,GET_G2_SC_JMP       ; Compare value in accumulator with
                     1963                                        ; decimal 9, branch to
                     1964                                        ; GET_G2_SC_JMP: if equal
 8238 [04] 410A0F    1965       cbeqa   #$0A,SND_G1_SC_JMP       ; Compare value in accumulator with
                     1966                                        ; decimal 10, branch to
                     1967                                        ; SND_G1_SC_JMP: if equal
 823B [04] 410B0F    1968       cbeqa   #$0B,SND_G2_SC_JMP       ; Compare value in accumulator with
                     1969                                        ; decimal 11, branch to
                     1970                                        ; SND_G2_SC_JMP: if equal
 823E [04] 410C0F    1971       cbeqa   #$0C,BN_CON_SC_JMP       ; Compare value in accumulator with
                     1972                                        ; decimal 12, branch to
                     1973                                        ; BN_CON_SC_JMP: if equal
 8241 [03] CC837C    1974       jmp     COMP_W_6                 ; Jump to COMP_W_6:
                     1975  
                     1976  
                     1977  GET_G1_SC_JMP:
 8244 [03] CC8253    1978       jmp     GET_G1_SC     ; Jump to GET_G1_SC:(long branch)
                     1979  
                     1980  GET_G2_SC_JMP:
 8247 [03] CC8291    1981       jmp     GET_G2_SC     ; Jump to GET_G2_SC:(long branch)
                     1982  
                     1983  SND_G1_SC_JMP:
 824A [03] CC82CD    1984       jmp     SND_G1_SC     ; Jump to SND_G1_SC:(long branch)
                     1985  
                     1986  SND_G2_SC_JMP:
 824D [03] CC830C    1987       jmp     SND_G2_SC     ; Jump to SND_G2_SC:(long branch)
                     1988  
                     1989  BN_CON_SC_JMP:
 8250 [03] CC834D    1990       jmp     BN_CON_SC     ; Jump to BN_CON_SC:(long branch)
                     1991  
                     1992  
                     1993  GET_G1_SC:
                     1994  
                     1995  ;****************************************************************************
                     1996  ; - We are in Display mode. The desired screen count number is decimal 8
                     1997  ;   (Upload Cons Grp1 Scrn). Using the screen count number, determine the
                     1998  ;   appropriate array for the top line of the display and print it.
                     1999  ;
                     2000  ; - First, compare the desired screen count number with the screen count
                     2001  ;   number on the last pass through the main loop. If it is the same, skip
                     2002  ;   over, otherwise update the top line of the display. This is to eliminate
                     2003  ;   "digit rattle" caused by rapid screen updates.
                     2004  ;****************************************************************************
                     2005  
 8253 [03] B654      2006       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 8255 [03] B156      2007       cmp     ScrnCnt_Lst          ; Compare with "ScrnCnt_Lst"
 8257 [03] 2706      2008       beq     NO_CHNG_TOP8         ; If Z bit of CCR is clear, branch to
                     2009                                    ; NO_CHNG_TOP8:(ScrnCnt_Lst = ScrnCnt)
 8259 [05] CD88E1    2010       jsr     PRNT_TOPLN_DSP       ; Jump to subroutine at PRNT_TOPLN_DSP:
 825C [05] 4E5456    2011       mov     ScrnCnt,ScrnCnt_Lst  ; Copy value in "ScrnCnt" to ScrnCnt_Lst"
                     2012  
                     2013  NO_CHNG_TOP8:
                     2014  
                     2015  ;***************************************************************************
                     2016  ; - Check to see if "Upload Cons Grp1" has been commanded, if so, carry out
                     2017  ;   the command, otherwise continue with the "Display" section.
                     2018  ;***************************************************************************
                     2019  
 825F [05] CD8894    2020       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     2021                                         ;(Check he state of the Toggle Mode,
                     2022                                         ; Display / Configure button
                     2023                                         ; on PTA3)
                     2024  
 8262 [05] 064F03    2025       brset   Sw3cls,Swflags,DO_GET_G1  ; If "Sw3cls" bit of "Swflags"
                     2026                                         ; variable is set, branch to
                     2027                                         ; DO_GET_G1
                     2028                                         ;(Toggle Mode button is pressed)
 8265 [03] CC837C    2029       jmp     COMP_W_6                  ; Branch to COMP_W_6:
                     2030                                         ;(Button not pressed, continue
                     2031                                         ; in "Display" mode)
                     2032  
                     2033  DO_GET_G1:
 8268 [04] 1053      2034       bset    mde,flags          ; Set "mde" bit of "flags" variable
 826A [04] 1653      2035       bset    RcvG1,flags        ; Set "RcvG1" bit of "flags" variable
 826C [03] B616      2036       lda     SCS1               ; Load accumulator with value in SCI
                     2037                                  ; Control Register 1
                     2038                                  ;(Clear transmitter empty bit)
                     2039                                  ;(Clears all by read)
 826E [04] 6E5618    2040       mov     #'V',SCDR          ; Move ASCII'V' to SCI Data Register
                     2041                                  ;(Transmitter is running, so data
                     2042                                  ; shift starts now!)
 8271 [03] 3F5E      2043       clr     ByteCnt            ; Clear "ByteCnt" variable
                     2044  ;     mov     #$80,ByteGoal      ; Move decimal 128 into "ByteGoal" var
                     2045                                  ;(number of configuration constants)
 8273 [04] 6E815F    2046       mov     #$81,ByteGoal
                     2047  
                     2048  
                     2049  ;**************************************************************************
                     2050  ; - Enable receiver full interrupt.
                     2051  ;**************************************************************************
                     2052  
 8276 [04] 1A14      2053       bset    SCRIE,SCC2     ; Set "SCRIE" bit of SCI Control Register 2
                     2054                              ;(SCRF enabled to generate CPU Interrupt)
                     2055  
                     2056  ;***************************************************************************
                     2057  ; -  "Upload Cons Grp1" has been been commanded, and the command byte has
                     2058  ;    been sent. Print the next instruction on the top line of the VFD,
                     2059  ;    and wait for the second button press.
                     2060  ;***************************************************************************
                     2061  
 8278 [04] 6E0D54    2062       mov     #$0D,ScrnCnt     ; Move Decimal 13 into "ScrnCnt" variable
                     2063                                ;(Upload G1 Done screen)
 827B [05] CD88E1    2064       jsr     PRNT_TOPLN_DSP   ; Jump to subroutine at PRNT_TOPLN_DSP:
 827E [05] CD88D4    2065       jsr     BUTTON_WAIT      ; Jump to subroutine at BUTTON_WAIT:
 8281 [03] 3F54      2066       clr     ScrnCnt          ; Clear "ScrnCnt" variable
 8283 [03] 3F55      2067       clr     ScrnCnt_prv      ; Clear "ScrnCnt_prv" variable
 8285 [04] 6E1256    2068       mov     #$12,ScrnCnt_Lst ; Move decimal 18 into "ScrnCnt_Lst"
 8288 [04] 1153      2069       bclr    mde,flags        ; Clear "mde" bit of "flags" variable
 828A [04] 1753      2070       bclr    RcvG1,flags      ; Clear "RcvG1" bit of "flags" variable
 828C [04] 174F      2071       bclr    Sw3cls,Swflags   ; Clear "Sw3cls" bit of "Swflags" variable
 828E [03] CC821F    2072       jmp     LOOPY            ; Jump to LOOPY
                     2073                                ;(End of program loop in
                     2074                                ; "Upload Cons Grp1 Screen")
                     2075  
                     2076  
                     2077  GET_G2_SC:
                     2078  
                     2079  ;****************************************************************************
                     2080  ; - We are in Display mode. The desired screen count number is decimal 9
                     2081  ;   (Upload Cons Grp2 Scrn). Using the screen count number, determine the
                     2082  ;   appropriate array for the top line of the display and print it.
                     2083  ;
                     2084  ; - First, compare the desired screen count number with the screen count
                     2085  ;   number on the last pass through the main loop. If it is the same, skip
                     2086  ;   over, otherwise update the top line of the display. This is to eliminate
                     2087  ;   "digit rattle" caused by rapid screen updates.
                     2088  ;****************************************************************************
                     2089  
 8291 [03] B654      2090       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 8293 [03] B156      2091       cmp     ScrnCnt_Lst          ; Compare with "ScrnCnt_Lst"
 8295 [03] 2706      2092       beq     NO_CHNG_TOP9         ; If Z bit of CCR is clear, branch to
                     2093                                    ; NO_CHNG_TOP9:(ScrnCnt_Lst = ScrnCnt)


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 22
MV_TECA


 8297 [05] CD88E1    2094       jsr     PRNT_TOPLN_DSP       ; Jump to subroutine at PRNT_TOPLN_DSP:
 829A [05] 4E5456    2095       mov     ScrnCnt,ScrnCnt_Lst  ; Copy value in "ScrnCnt" to ScrnCnt_Lst"
                     2096  
                     2097  NO_CHNG_TOP9:
                     2098  
                     2099  ;***************************************************************************
                     2100  ; - Check to see if "Upload Cons Grp2" has been commanded, if so, carry out
                     2101  ;   the command, otherwise continue with the "Display" section.
                     2102  ;***************************************************************************
                     2103  
 829D [05] CD8894    2104       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     2105                                         ;(Check he state of the Toggle Mode,
                     2106                                         ; Display / Configure button
                     2107                                         ; on PTA3)
                     2108  
 82A0 [05] 064F03    2109       brset   Sw3cls,Swflags,DO_GET_G2  ; If "Sw3cls" bit of "Swflags"
                     2110                                         ; variable is set, branch to
                     2111                                         ; DO_GET_G2
                     2112                                         ;(Toggle Mode button is pressed)
 82A3 [03] CC837C    2113       jmp     COMP_W_6                  ; Branch to COMP_W_6:
                     2114                                         ;(Button not pressed, continue
                     2115                                         ; in "Display" mode)
                     2116  
                     2117  DO_GET_G2:
 82A6 [04] 1053      2118       bset    mde,flags          ; Set "mde" bit of "flags" variable
 82A8 [04] 1853      2119       bset    RcvG2,flags        ; Set "RcvG2" bit of "flags" variable
 82AA [03] B616      2120       lda     SCS1               ; Load accumulator with value in SCI
                     2121                                  ; Control Register 1
                     2122                                  ;(Clear transmitter empty bit)
                     2123                                  ;(Clears all by read)
 82AC [04] 6E4918    2124       mov     #'I',SCDR          ; Move ASCII'I' to SCI Data Register
                     2125                                  ;(Transmitter is running, so data
                     2126                                  ; shift starts now!)
 82AF [03] 3F5E      2127       clr     ByteCnt            ; Clear "ByteCnt" variable
                     2128  ;     mov     #$80,ByteGoal      ; Move decimal 128 into "ByteGoal" var
                     2129                                  ;(number of configuration constants)
 82B1 [04] 6E815F    2130       mov     #$81,ByteGoal
                     2131  
                     2132  
                     2133  ;***************************************************************************
                     2134  ; -  "Upload Cons Grp2" has been been commanded, and the command byte has
                     2135  ;    been sent. Print the next instruction on the top line of the VFD,
                     2136  ;    and wait for the second button press.
                     2137  ;***************************************************************************
                     2138  
 82B4 [04] 6E0E54    2139       mov     #$0E,ScrnCnt     ; Move Decimal 14 into "ScrnCnt" variable
                     2140                                ;(Upload Cons Grp1 Done screen)
 82B7 [05] CD88E1    2141       jsr     PRNT_TOPLN_DSP   ; Jump to subroutine at PRNT_TOPLN_DSP:
 82BA [05] CD88D4    2142       jsr     BUTTON_WAIT      ; Jump to subroutine at BUTTON_WAIT:
 82BD [03] 3F54      2143       clr     ScrnCnt          ; Clear "ScrnCnt" variable
 82BF [03] 3F55      2144       clr     ScrnCnt_prv      ; Clear "ScrnCnt_prv" variable
 82C1 [04] 6E1256    2145       mov     #$12,ScrnCnt_Lst ; Move decimal 18 into "ScrnCnt_Lst"
 82C4 [04] 1153      2146       bclr    mde,flags        ; Clear "mde" bit of "flags" variable
 82C6 [04] 1953      2147       bclr    RcvG2,flags      ; Clear "RcvG2" bit of "flags" variable
 82C8 [04] 174F      2148       bclr    Sw3cls,Swflags   ; Clear "Sw3cls" bit of "Swflags" variable
 82CA [03] CC821F    2149       jmp     LOOPY            ; Jump to LOOPY
                     2150                                ;(End of program loop in
                     2151                                ; "Upload ST Group Screen")
                     2152  
                     2153  
                     2154  SND_G1_SC:
                     2155  
                     2156  ;****************************************************************************
                     2157  ; - We are in Display mode. The desired screen count number is decimal 10
                     2158  ;   (Download G1 value Scrn). Using the screen count number, determine the
                     2159  ;   appropriate array for the top line of the display and print it.
                     2160  ;
                     2161  ; - First, compare the desired screen count number with the screen count
                     2162  ;   number on the last pass through the main loop. If it is the same, skip
                     2163  ;   over, otherwise update the top line of the display. This is to eliminate
                     2164  ;   "digit rattle" caused by rapid screen updates.
                     2165  ;****************************************************************************
                     2166  
 82CD [03] B654      2167       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 82CF [03] B156      2168       cmp     ScrnCnt_Lst          ; Compare with "ScrnCnt_Lst"
 82D1 [03] 2706      2169       beq     NO_CHNG_TOP10        ; If Z bit of CCR is clear, branch to
                     2170                                    ; NO_CHNG_TOP10:(ScrnCnt_Lst = ScrnCnt)
 82D3 [05] CD88E1    2171       jsr     PRNT_TOPLN_DSP       ; Jump to subroutine at PRNT_TOPLN_DSP:
 82D6 [05] 4E5456    2172       mov     ScrnCnt,ScrnCnt_Lst  ; Copy value in "ScrnCnt" to ScrnCnt_Lst"
                     2173  
                     2174  NO_CHNG_TOP10:
                     2175  
                     2176  ;***************************************************************************
                     2177  ; - Check to see if "Download G1 value" has been commanded, if so, carry out
                     2178  ;   the command, otherwise continue with the "Display" section.
                     2179  ;***************************************************************************
                     2180  
 82D9 [05] CD8894    2181       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     2182                                         ;(Check he state of the Toggle Mode,
                     2183                                         ; Display / Configure button
                     2184                                         ; on PTA3)
                     2185  
 82DC [05] 064F03    2186       brset   Sw3cls,Swflags,DO_SND_V1  ; If "Sw3cls" bit of "Swflags"
                     2187                                         ; variable is set, branch to
                     2188                                         ; DO_SND_V1
                     2189                                         ;(Toggle Mode button is pressed)
 82DF [03] CC837C    2190       jmp     COMP_W_6                  ; Branch to COMP_W_6:
                     2191                                         ;(Button not pressed, continue
                     2192                                         ; in "Display" mode)
                     2193  
                     2194  DO_SND_V1:
 82E2 [03] B616      2195       lda     SCS1            ; Load accumulator with value in SCI Control
                     2196                               ; Register 1(Clear transmitter empty bit)
                     2197                               ;(Clears all by read)
 82E4 [04] 6E5718    2198       mov     #'W',SCDR       ; Move ASCII'W' to SCI Data Register
                     2199                               ;(Transmitter is running, so data shift
                     2200                               ; starts now!)
 82E7 [05] CD88B2    2201       jsr     DELAY300        ; Jump to subroutine at DELAY300:(This delay
                     2202                               ; time was found to be necessary and was
                     2203                               ; determined by experimentation)
 82EA [03] B616      2204       lda     SCS1            ; Load accumulator with value in SCI Control
                     2205                               ; Register 1(Clear transmitter empty bit)
 82EC [05] 4E5A18    2206       mov     CurCon,SCDR     ; Move value in "CurCon" to SCI Data Register
                     2207                               ;(Current constant offset)
 82EF [05] CD88B2    2208       jsr     DELAY300        ; Jump to subroutine at DELAY300:
 82F2 [03] B616      2209       lda     SCS1            ; Load accumulator with value in SCI Control
                     2210                               ; Register 1(Clear transmitter empty bit)
 82F4 [05] 4E5B18    2211       mov     ConVal,SCDR     ; Move value in "ConVal" to SCI Data Register
                     2212                               ;(Current constant value)
                     2213  
                     2214  
                     2215  ;***************************************************************************
                     2216  ; -  "Download G1 value" has been been commanded, and the command bytes
                     2217  ;    have been sent. Print the next instruction on the top line of the VFD,
                     2218  ;    and wait for the second button press.
                     2219  ;***************************************************************************
                     2220  
 82F7 [04] 6E0F54    2221       mov     #$0F,ScrnCnt     ; Move Decimal 15 into "ScrnCnt" variable
                     2222                                ;(Download V1 Done screen)
 82FA [05] CD88E1    2223       jsr     PRNT_TOPLN_DSP   ; Jump to subroutine at PRNT_TOPLN_DSP:
 82FD [05] CD88D4    2224       jsr     BUTTON_WAIT      ; Jump to subroutine at BUTTON_WAIT:
 8300 [03] 3F54      2225       clr     ScrnCnt          ; Clear "ScrnCnt" variable
 8302 [03] 3F55      2226       clr     ScrnCnt_prv      ; Clear "ScrnCnt_prv" variable
 8304 [04] 6E1256    2227       mov     #$12,ScrnCnt_Lst ; Move decimal 18 into "ScrnCnt_Lst"
 8307 [04] 174F      2228       bclr    Sw3cls,Swflags   ; Clear "Sw3cls" bit of "Swflags" variable
 8309 [03] CC821F    2229       jmp     LOOPY            ; Jump to LOOPY


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 23
MV_TECA


                     2230                                ;(End of program loop in
                     2231                                ; "Download G1 value Screen")
                     2232  
                     2233  SND_G2_SC:
                     2234  
                     2235  ;****************************************************************************
                     2236  ; - We are in Display mode. The desired screen count number is decimal 11
                     2237  ;   (Download G2 value Scrn). Using the screen count number, determine the
                     2238  ;   appropriate array for the top line of the display and print it.
                     2239  ;
                     2240  ; - First, compare the desired screen count number with the screen count
                     2241  ;   number on the last pass through the main loop. If it is the same, skip
                     2242  ;   over, otherwise update the top line of the display. This is to eliminate
                     2243  ;   "digit rattle" caused by rapid screen updates.
                     2244  ;****************************************************************************
                     2245  
 830C [03] B654      2246       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 830E [03] B156      2247       cmp     ScrnCnt_Lst          ; Compare with "ScrnCnt_Lst"
 8310 [03] 2706      2248       beq     NO_CHNG_TOP11        ; If Z bit of CCR is clear, branch to
                     2249                                    ; NO_CHNG_TOP11:(ScrnCnt_Lst = ScrnCnt)
 8312 [05] CD88E1    2250       jsr     PRNT_TOPLN_DSP       ; Jump to subroutine at PRNT_TOPLN_DSP:
 8315 [05] 4E5456    2251       mov     ScrnCnt,ScrnCnt_Lst  ; Copy value in "ScrnCnt" to ScrnCnt_Lst"
                     2252  
                     2253  NO_CHNG_TOP11:
                     2254  
                     2255  ;***************************************************************************
                     2256  ; - Check to see if "Download G2 value" has been commanded, if so, carry out
                     2257  ;   the command, otherwise continue with the "Display" section.
                     2258  ;***************************************************************************
 8318 [05] CD8894    2259       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     2260                                         ;(Check he state of the Toggle Mode,
                     2261                                         ; Display / Configure button
                     2262                                         ; on PTA3)
                     2263  
 831B [05] 064F03    2264       brset   Sw3cls,Swflags,DO_SND_V2  ; If "Sw3cls" bit of "Swflags"
                     2265                                         ; variable is set, branch to
                     2266                                         ; DO_SND_V2
                     2267                                         ;(Toggle Mode button is pressed)
 831E [03] CC837C    2268       jmp     COMP_W_6                  ; Branch to COMP_W_6:
                     2269                                         ;(Button not pressed, continue
                     2270                                         ; in "Display" mode)
                     2271  
                     2272  DO_SND_V2:
 8321 [03] B616      2273       lda     SCS1            ; Load accumulator with value in SCI Control
                     2274                               ; Register 1(Clear transmitter empty bit)
                     2275                               ;(Clears all by read)
 8323 [04] 6E4A18    2276       mov     #'J',SCDR       ; Move ASCII'J' to SCI Data Register
                     2277                               ;(Transmitter is running, so data shift
                     2278                               ; starts now!)
 8326 [05] CD88B2    2279       jsr     DELAY300        ; Jump to subroutine at DELAY300:(This delay
                     2280                               ; time was found to be necessary and was
                     2281                               ; determined by experimentation)
 8329 [03] B616      2282       lda     SCS1            ; Load accumulator with value in SCI Control
                     2283                               ; Register 1(Clear transmitter empty bit)
 832B [05] 4E5A18    2284       mov     CurCon,SCDR     ; Move value in "CurCon" to SCI Data Register
                     2285                               ;(Current constant offset)
 832E [05] CD88B2    2286       jsr     DELAY300        ; Jump to subroutine at DELAY300:
 8331 [03] B616      2287       lda     SCS1            ; Load accumulator with value in SCI Control
                     2288                               ; Register 1(Clear transmitter empty bit)
 8333 [05] 4E5B18    2289       mov     ConVal,SCDR     ; Move value in "ConVal" to SCI Data Register
                     2290                               ;(Current constant value)
                     2291  
                     2292  ;***************************************************************************
                     2293  ; -  "Download G2 value" has been been commanded, and the command bytes
                     2294  ;    have been sent. Print the next instruction on the top line of the VFD,
                     2295  ;    and wait for the second button press.
                     2296  ;***************************************************************************
                     2297  
 8336 [04] 6E1054    2298       mov     #$10,ScrnCnt     ; Move Decimal 16 into "ScrnCnt" variable
                     2299                                ;(Download V2 Done screen)
 8339 [05] CD88E1    2300       jsr     PRNT_TOPLN_DSP   ; Jump to subroutine at PRNT_TOPLN_DSP:
 833C [05] CD88D4    2301       jsr     BUTTON_WAIT      ; Jump to subroutine at BUTTON_WAIT:
 833F [03] 3F54      2302       clr     ScrnCnt          ; Clear "ScrnCnt" variable
 8341 [03] 3F55      2303       clr     ScrnCnt_prv      ; Clear "ScrnCnt_prv" variable
 8343 [04] 6E1256    2304       mov     #$12,ScrnCnt_Lst ; Move decimal 18 into "ScrnCnt_Lst"
 8346 [04] 1153      2305       bclr    mde,flags        ; Clear "mde" bit of "flags" variable
 8348 [04] 174F      2306       bclr    Sw3cls,Swflags   ; Clear "Sw3cls" bit of "Swflags" variable
 834A [03] CC821F    2307       jmp     LOOPY            ; Jump to LOOPY
                     2308                                ;(End of program loop in
                     2309                                ; "Download G2 value Screen")
                     2310  
                     2311  BN_CON_SC:
                     2312  
                     2313  ;****************************************************************************
                     2314  ; - We are in Display mode. The desired screen count number is decimal 12
                     2315  ;   (Burn Constants Scrn). Using the screen count number, determine the
                     2316  ;   appropriate array for the top line of the display and print it.
                     2317  ;
                     2318  ; - First, compare the desired screen count number with the screen count
                     2319  ;   number on the last pass through the main loop. If it is the same, skip
                     2320  ;   over, otherwise update the top line of the display. This is to eliminate
                     2321  ;   "digit rattle" caused by rapid screen updates.
                     2322  ;****************************************************************************
                     2323  
                     2324  
 834D [03] B654      2325       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 834F [03] B156      2326       cmp     ScrnCnt_Lst          ; Compare with "ScrnCnt_Lst"
 8351 [03] 2706      2327       beq     NO_CHNG_TOP12        ; If Z bit of CCR is clear, branch to
                     2328                                    ; NO_CHNG_TOP12:(ScrnCnt_Lst = ScrnCnt)
 8353 [05] CD88E1    2329       jsr     PRNT_TOPLN_DSP       ; Jump to subroutine at PRNT_TOPLN_DSP:
 8356 [05] 4E5456    2330       mov     ScrnCnt,ScrnCnt_Lst  ; Copy value in "ScrnCnt" to ScrnCnt_Lst"
                     2331  
                     2332  NO_CHNG_TOP12:
                     2333  
                     2334  ;***************************************************************************
                     2335  ; - Check to see if "Burn Constants" has been commanded, if so, carry out
                     2336  ;   the command, otherwise continue with the "Display" section.
                     2337  ;***************************************************************************
                     2338  
 8359 [05] CD8894    2339       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     2340                                         ;(Check he state of the Toggle Mode,
                     2341                                         ; Display / Configure button
                     2342                                         ; on PTA3)
                     2343  
 835C [05] 064F03    2344       brset   Sw3cls,Swflags,DO_BN_CNS  ; If "Sw3cls" bit of "Swflags"
                     2345                                         ; variable is set, branch to
                     2346                                         ; DO_BN_CNS:
                     2347                                         ;(Toggle Mode button is pressed)
 835F [03] CC837C    2348       jmp     COMP_W_6                  ; Branch to COMP_W_6:
                     2349                                         ;(Button not pressed, continue
                     2350                                         ; in "Display" mode)
                     2351  
                     2352  DO_BN_CNS:
 8362 [03] B616      2353       lda     SCS1               ; Load accumulator with value in SCI
                     2354                                  ; Control Register 1
                     2355                                  ;(Clear transmitter empty bit)
                     2356                                  ;(Clears all by read)
 8364 [04] 6E4218    2357       mov     #'B',SCDR          ; Move ASCII'B' to SCI Data Register
                     2358                                  ;(Transmitter is running, so data
                     2359                                  ; shift starts now!)
                     2360  
                     2361  ;***************************************************************************
                     2362  ; -  "Burn Constants" has been been commanded, and the command byte has
                     2363  ;    been sent. Print the next instruction on the top line of the VFD,
                     2364  ;    and wait for the second button press.
                     2365  ;***************************************************************************


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 24
MV_TECA


                     2366  
 8367 [04] 6E1154    2367       mov     #$11,ScrnCnt     ; Move Decimal 17 into "ScrnCnt" variable
                     2368                                ;(Burn Constants Done screen)
 836A [05] CD88E1    2369       jsr     PRNT_TOPLN_DSP   ; Jump to subroutine at PRNT_TOPLN_DSP:
 836D [05] CD88D4    2370       jsr     BUTTON_WAIT      ; Jump to subroutine at BUTTON_WAIT:
 8370 [03] 3F54      2371       clr     ScrnCnt          ; Clear "ScrnCnt" variable
 8372 [03] 3F55      2372       clr     ScrnCnt_prv      ; Clear "ScrnCnt_prv" variable
 8374 [04] 6E1256    2373       mov     #$12,ScrnCnt_Lst ; Move decimal 18 into "ScrnCnt_Lst"
 8377 [04] 174F      2374       bclr    Sw3cls,Swflags   ; Clear "Sw3cls" bit of "Swflags" variable
 8379 [03] CC821F    2375       jmp     LOOPY            ; Jump to LOOPY
                     2376                                ;(End of program loop in
                     2377                                ; "Burn Constants Screen")
                     2378  
                     2379  
                     2380  ;***************************************************************************
                     2381  ; -  If we are in any of the real time variable display screens, ignore the
                     2382  ;    "Toggle Mode" button.
                     2383  ;***************************************************************************
                     2384  
                     2385  COMP_W_6:
 837C [02] A106      2386       cmp     #$06                      ; Compare with decimal 6
 837E [03] 2506      2387       blo     NO_CONFIG                 ; If (A)<(M), branch to NO_CONFIG:
                     2388                                         ;(No configuration screen has been
                     2389                                         ; selected so ignore mode button)
 8380 [05] CD8894    2390       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     2391                                         ;(Check he state of the Toggle Mode,
                     2392                                         ; Display / Configure button
                     2393                                         ; on PTA3)
 8383 [05] 064F0C    2394       brset   Sw3cls,Swflags,TOG_MODE1  ; If "Sw3cls" bit of "Swflags"
                     2395                                         ; variable is set, branch to
                     2396                                         ; TOG_MODE1:
                     2397                                         ;(Toggle Mode button is pressed)
                     2398  
                     2399  NO_CONFIG:
 8386 [05] 044F0F    2400       brset   Sw2cls,Swflags,TOG_FRZ     ; If "Sw2cls" bit of "Swflags"
                     2401                                          ; variable is set, branch to
                     2402                                          ; TOG_FRZ
                     2403                                          ;(Freeze/Select button is pressed)
 8389 [05] 024F1B    2404       brset   Sw1cls,Swflags,SCRL_D_RT   ; If "Sw1cls" bit of "Swflags"
                     2405                                          ; variable is set, branch to
                     2406                                          ; SCRL_D_RT
                     2407                                          ;(Scroll Right/Increment button is
                     2408                                          ; pressed)
 838C [05] 004F2C    2409       brset   Sw0cls,Swflags,SCRL_D_LFT  ; If "Sw0cls" bit of "Swflags"
                     2410                                          ; variable is set, branch to
                     2411                                          ; SCRL_D_LFT
                     2412                                          ;(Scroll Left/Decrement button is
                     2413                                          ; pressed)
 838F [03] CC83CB    2414       jmp     DSPLY_MODE                 ; Jump to DSPLY_MODE:
                     2415  
                     2416  
                     2417  TOG_MODE1:
 8392 [05] CD899A    2418       jsr     CHANGE_MODE      ; Jump to subroutine at CHANGE_MODE:
 8395 [03] CC821F    2419       jmp     LOOPY            ; Jump to LOOPY:
                     2420                                ;(Mode has changed, so start again)
                     2421  
                     2422  TOG_FRZ:
                     2423  
                     2424  ;****************************************************************************
                     2425  ; - Toggle "frz" bit of "flags" variable whenever "Freeze/Select" button
                     2426  ;   is pressed, while in Display mode.
                     2427  ;****************************************************************************
                     2428  
 8398 [04] 3351      2429       com     FrzCntr          ; Ones compliment "FrzCntr"
                     2430                                ;(flip state of "FrzCntr"
 839A [03] 2604      2431       bne     SET_FRZ          ; If the Z bit of CCR is clear, branch
                     2432                                ; to SET_FRZ:
 839C [04] 1353      2433       bclr    frz,flags        ; Clear "frz" bit of "flags" variable
                     2434                                ; ("frz" = 0 = variables 250mS update)
 839E [03] 2002      2435       bra     TOG_FRZ_DONE     ; Branch to TOG_FRZ_DONE:
                     2436  
                     2437  SET_FRZ:
 83A0 [04] 1253      2438       bset    frz,flags        ; Set "frz" bit "flags" variable
                     2439                                ;("frz" = 1 = variables frozen)
                     2440  
                     2441  TOG_FRZ_DONE:
 83A2 [04] 154F      2442       bclr    Sw2cls,Swflags   ; Clear "Sw2cls" bit of "Swflags" variable
 83A4 [03] CC83CB    2443       jmp     DSPLY_MODE       ; Jump to DSPLY_MODE:
                     2444  
                     2445  SCRL_D_RT:
                     2446  
                     2447  ;****************************************************************************
                     2448  ; - Increment the Display Screen number.
                     2449  ;****************************************************************************
                     2450  
                     2451  INC_SCRNCNT:
 83A7 [03] B655      2452       lda     ScrnCnt_prv     ; Load accumulator with value in "ScrnCnt_prv"
 83A9 [02] A10C      2453       cmp     #$0C            ; Compare with decimal 12
 83AB [03] 2704      2454       beq     RTN_TO_0_D      ; If Z bit of CCR is set, branch to RTN_TO_0_D
                     2455                               ;("ScrnCnt_prv" = 12 so return to screen 0)
 83AD [04] 3C54      2456       inc     ScrnCnt         ; Increment "ScrnCnt" variable
 83AF [03] 2002      2457       bra     SCRL_D_RT_DONE  ; Branch to SCRL_D_RT_DONE:
                     2458  
                     2459  RTN_TO_0_D:
 83B1 [03] 3F54      2460      clr     ScrnCnt          ; Clear "ScrnCnt" variable(ScrnCnt = 0)
                     2461  
                     2462  SCRL_D_RT_DONE:
 83B3 [05] 4E5455    2463       mov     ScrnCnt,ScrnCnt_prv  ; Move value in "ScrnCnt" to ScrnCnt_prv"
 83B6 [04] 134F      2464       bclr    Sw1cls,Swflags       ; Clear "Sw1cls" bit of "Swflags" variable
 83B8 [03] CC83CB    2465       jmp     DSPLY_MODE           ; Jump to DSPLY_MODE:
                     2466  
                     2467  
                     2468  SCRL_D_LFT:
                     2469  
                     2470  ;****************************************************************************
                     2471  ; - Decrement the Display Screen number.
                     2472  ;****************************************************************************
                     2473  
                     2474  
                     2475  DEC_SCRNCNT:
 83BB [03] B655      2476       lda     ScrnCnt_prv      ; Load accumulator with value in "ScrnCnt_prv"
 83BD [03] 2704      2477       beq     RTN_TO_12        ; If Z bit of CCR is set, branch to RTN_TO_12
                     2478                                ;("ScrnCnt_prv" = 0 so return to screen 12)
 83BF [04] 3A54      2479       dec     ScrnCnt          ; Decrement "ScrnCnt" variable
 83C1 [03] 2003      2480       bra     SCRL_D_LFT_DONE  ; Branch to SCRL_D_LFT_DONE:
                     2481  
                     2482  RTN_TO_12:
 83C3 [04] 6E0C54    2483      mov     #$0C,ScrnCnt      ; Move decimal 12 into "ScrnCnt" variable
                     2484  
                     2485  SCRL_D_LFT_DONE:
 83C6 [05] 4E5455    2486       mov     ScrnCnt,ScrnCnt_prv  ; Move value in "ScrnCnt" to ScrnCnt_prv"
 83C9 [04] 114F      2487       bclr    Sw0cls,Swflags       ; Clear "Sw0cls" bit of "Swflags" variable
                     2488  
                     2489  
                     2490  DSPLY_MODE:
                     2491  
                     2492  ;****************************************************************************
                     2493  ; - We are in Display mode. The desired screen count number has been
                     2494  ;   determined. If the screen count number is anything other than the first
                     2495  ;   10 screens, clear the bottom line of the screen and jump back to the main
                     2496  ;   loop.
                     2497  ;****************************************************************************
                     2498  
                     2499  SCRN_CNT_CHK:
 83CB [03] B654      2500       lda     ScrnCnt           ; Load accumulator with value in "ScrnCnt"
 83CD [02] A107      2501       cmp     #$07              ; Compare with decimal 7


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 25
MV_TECA


 83CF [03] 2309      2502       bls     TOPLIN_SUB        ; If (A)<= decimal 7, branch to TOPLIN_SUB:
 83D1 [05] CD88F0    2503       jsr     LOAD_SPACE        ; Jump to subroutine at LOAD_SPACE:
 83D4 [05] CD8A12    2504       jsr     VFD_START_BOT     ; Jump to subroutine at VFD_START_BOT:
 83D7 [03] CC85D4    2505       jmp     BOTLIN_CHK_D      ; Jump to BOTLIN_CHK_D
                     2506  
                     2507  ;****************************************************************************
                     2508  ; - We are in one of the first 8 screens. Using the screen count number,
                     2509  ;   determine the appropriate array for the top line of the display and
                     2510  ;   print it.
                     2511  ;
                     2512  ; - First, compare the desired screen count number with the screen count
                     2513  ;   number on the last pass through the main loop. If it is the same, skip
                     2514  ;   over, otherwise update the top line of the display. This is to eliminate
                     2515  ;   "digit rattle" caused by rapid screen updates.
                     2516  ;****************************************************************************
                     2517  
                     2518  TOPLIN_SUB:
 83DA [03] B654      2519       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 83DC [03] B156      2520       cmp     ScrnCnt_Lst          ; Compare with "ScrnCnt_Lst"
 83DE [03] 2706      2521       beq     NO_CHNG_TOP          ; If Z bit of CCR is clear, branch to
                     2522                                    ; NO_CHNG_TOP:(ScrnCnt_Lst = ScrnCnt)
 83E0 [05] CD88E1    2523       jsr     PRNT_TOPLN_DSP       ; Jump to subroutine at PRNT_TOPLN_DSP:
 83E3 [05] 4E5456    2524       mov     ScrnCnt,ScrnCnt_Lst  ; Copy value in "ScrnCnt" to ScrnCnt_Lst"
                     2525  
                     2526  NO_CHNG_TOP:
                     2527  
                     2528  DISP_BOT:
                     2529  
                     2530  ;****************************************************************************
                     2531  ; - We have 20 variables in RAM in ordered list(BotLin0 through BotLin19)
                     2532  ;   which have been initialized to ASCII $20(blank space). The variable
                     2533  ;   "DisVal" contains the offset value from the entry point of the ordered
                     2534  ;   list of variables, beginning at the variable "secH". "DisVal" matches
                     2535  ;   the variable's abbreviation on the top line on the display. Using
                     2536  ;   "DisVal", we do an ASCII conversion of each variable, and overwrite the
                     2537  ;   3 blank spaces on the bottom line beneath the matching variable
                     2538  ;   abreviation, with the appropriate numbers.
                     2539  ;****************************************************************************
                     2540  
                     2541  
                     2542  ;****************************************************************************
                     2543  ; - Load the over-write values for the bottom line string.
                     2544  ;****************************************************************************
                     2545  
 83E6 [05] CD88F0    2546       jsr     LOAD_SPACE             ; Jump to subroutine at LOAD_SPACE:
                     2547  
                     2548  ;****************************************************************************
                     2549  ; - Determine which screen we are in, and prepare the appropriate string for
                     2550  ;   the bottom line of the VFD
                     2551  ;****************************************************************************
                     2552  
 83E9 [03] B654      2553       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 83EB [04] 410718    2554       cbeqa   #$07,CONFIG_SCRNS    ; Compare and branch to CONFIG_SCRNS:,
                     2555                                    ; if equal to decimal 7
 83EE [04] 410615    2556       cbeqa   #$06,CONFIG_SCRNS    ; Compare and branch to CONFIG_SCRNS:,
                     2557                                    ; if equal to decimal 6
 83F1 [04] 410518    2558       cbeqa   #$05,PW_COR_JMP      ; Compare and branch to PW_COR_JMP:,
                     2559                                    ; if equal to decimal 5
 83F4 [04] 410418    2560       cbeqa   #$04,DF_TUN_JMP      ; Compare and branch to DF_TUN_JMP:,
                     2561                                    ; if equal to decimal 4
 83F7 [04] 410318    2562       cbeqa   #$03,IACPW_RPM_JMP   ; Compare and branch to IACPW_RPM_JMP:,
                     2563                                    ; if equal to decimal 3
 83FA [04] 410218    2564       cbeqa   #$02,DF_PRS_JMP      ; Compare and branch to DF_PRS_JMP:,
                     2565                                    ; if equal to decimal 2
 83FD [04] 410118    2566       cbeqa   #$01,GUAGES_JMP      ; Compare and branch to GUAGES_JMP:,
                     2567                                    ; if equal to decimal 1
 8400 [04] 410018    2568       cbeqa   #$00,STATUS_JMP      ; Compare and branch to STATUS_JMP:,
                     2569                                    ; if equal to decimal 0
 8403 [03] CC821F    2570       jmp     LOOPY                ; Jump to LOOPY(sanity check)
                     2571  
                     2572  ;****************************************************************************
                     2573  ; - We are in either of the 2 screens which lead you to the configuration
                     2574  ;   section. Clear the bottom line and loop back.
                     2575  ;****************************************************************************
                     2576  
                     2577  CONFIG_SCRNS:
 8406 [05] CD8A12    2578       jsr     VFD_START_BOT     ; Jump to subroutine at VFD_START_BOT:
 8409 [03] CC85D4    2579       jmp     BOTLIN_CHK_D      ; Jump to BOTLIN_CHK_D
                     2580  
                     2581  ;****************************************************************************
                     2582  ; - We are in one of the other real time display screens, jump to the
                     2583  ;   appropriate section.
                     2584  ;****************************************************************************
                     2585  
                     2586  PW_COR_JMP:
 840C [03] CC841E    2587       jmp     PW_COR            ; Jump to PW_COR:(Long branch)
                     2588  
                     2589  DF_TUN_JMP:
 840F [03] CC8453    2590       jmp     DF_TUN            ;Jump to DF_TUN:(Long branch)
                     2591  
                     2592  IACPW_RPM_JMP:
 8412 [03] CC8488    2593       jmp     IACPW_RPM         ; Jump to IACPW_RPM:(Long branch)
                     2594  
                     2595  DF_PRS_JMP:
 8415 [03] CC84BD    2596       jmp     DF_PRS            ; Jump to DF_PRS:(Long branch)
                     2597  
                     2598  GUAGES_JMP:
 8418 [03] CC84F2    2599       jmp     GUAGES            ; Jump to GUAGES:(Long branch)
                     2600  
                     2601  STATUS_JMP:
 841B [03] CC8527    2602       jmp     STATUS            ; Jump to STATUS:(Long branch)
                     2603  
                     2604  
                     2605  PW_COR:
 841E [03] B6CD      2606       lda     df                ; Load accumulator with value in "df"
 8420 [03] B767      2607       sta     DisVal            ; Copy to "DisVal" variable
 8422 [05] CD8930    2608       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8425 [05] CD8942    2609       jsr     LOAD_1ST_3        ; Jump to subroutine at LOAD_1ST_3:
 8428 [03] B6C9      2610       lda     TOTAdd            ; Load accumulator with value in "TOTAdd"
 842A [03] B767      2611       sta     DisVal            ; Copy to "DisVal" variable
 842C [05] CD8930    2612       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 842F [05] CD894F    2613       jsr     LOAD_2ND_3        ; Jump to subroutine at LOAD_2ND_3:
 8432 [03] B6CC      2614       lda     TrimAdd           ; Load accumulator with value in "TrimAdd"
 8434 [03] B767      2615       sta     DisVal            ; Copy to "DisVal" variable
 8436 [05] CD8930    2616       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8439 [05] CD895C    2617       jsr     LOAD_3D_3         ; Jump to subroutine at LOAD_3D_3:
 843C [03] B6CE      2618       lda     df1               ; Load accumulator with value in "df1"
 843E [03] B767      2619       sta     DisVal            ; Copy to "DisVal" variable
 8440 [05] CD8930    2620       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8443 [05] CD8969    2621       jsr     LOAD_4TH_3        ; Jump to subroutine at LOAD_4TH_3:
 8446 [03] B6CF      2622       lda     dff               ; Load accumulator with value in "dff"
 8448 [03] B767      2623       sta     DisVal            ; Copy to "DisVal" variable
 844A [05] CD8930    2624       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 844D [05] CD8976    2625       jsr     LOAD_5TH_3        ; Jump to subroutine at LOAD_5TH_3:
 8450 [03] CC85D1    2626       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2627  
                     2628  
                     2629  DF_TUN:
 8453 [03] B6B3      2630       lda     RPM               ; Load accumulator with value in "RPM"
 8455 [03] B767      2631       sta     DisVal            ; Copy to "DisVal" variable
 8457 [05] CD8930    2632       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 845A [05] CD8942    2633       jsr     LOAD_1ST_3        ; Jump to subroutine at LOAD_1ST_3:
 845D [03] B6C0      2634       lda     KPA               ; Load accumulator with value in "KPA"
 845F [03] B767      2635       sta     DisVal            ; Copy to "DisVal" variable
 8461 [05] CD8930    2636       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8464 [05] CD894F    2637       jsr     LOAD_2ND_3        ; Jump to subroutine at LOAD_2ND_3:


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 26
MV_TECA


 8467 [03] B6C6      2638       lda     TPSp              ; Load accumulator with value in "TPSp"
 8469 [03] B767      2639       sta     DisVal            ; Copy to "DisVal" variable
 846B [05] CD8930    2640       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 846E [05] CD895C    2641       jsr     LOAD_3D_3         ; Jump to subroutine at LOAD_3D_3:
 8471 [03] B6CC      2642       lda     TrimAdd           ; Load accumulator with value in "TrimAdd"
 8473 [03] B767      2643       sta     DisVal            ; Copy to "DisVal" variable
 8475 [05] CD8930    2644       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8478 [05] CD8969    2645       jsr     LOAD_4TH_3        ; Jump to subroutine at LOAD_4TH_3:
 847B [03] B6CD      2646       lda     df                ; Load accumulator with value in "df"
 847D [03] B767      2647       sta     DisVal            ; Copy to "DisVal" variable
 847F [05] CD8930    2648       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8482 [05] CD8976    2649       jsr     LOAD_5TH_3        ; Jump to subroutine at LOAD_5TH_3:
 8485 [03] CC85D1    2650       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2651  
                     2652  IACPW_RPM:
 8488 [03] B6B1      2653       lda     secH              ; Load accumulator with value in "secH"
 848A [03] B767      2654       sta     DisVal            ; Copy to "DisVal" variable
 848C [05] CD8930    2655       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 848F [05] CD8942    2656       jsr     LOAD_1ST_3        ; Jump to subroutine at LOAD_1ST_3:
 8492 [03] B6B2      2657       lda     secL              ; Load accumulator with value in "secL"
 8494 [03] B767      2658       sta     DisVal            ; Copy to "DisVal" variable
 8496 [05] CD8930    2659       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8499 [05] CD894F    2660       jsr     LOAD_2ND_3        ; Jump to subroutine at LOAD_2ND_3:
 849C [03] B6BD      2661       lda     IAC               ; Load accumulator with value in "IAC"
 849E [03] B767      2662       sta     DisVal            ; Copy to "DisVal" variable
 84A0 [05] CD8930    2663       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84A3 [05] CD895C    2664       jsr     LOAD_3D_3         ; Jump to subroutine at LOAD_3D_3:
 84A6 [03] B6C5      2665       lda     IACpw             ; Load accumulator with value in "IACpw"
 84A8 [03] B767      2666       sta     DisVal            ; Copy to "DisVal" variable
 84AA [05] CD8930    2667       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84AD [05] CD8969    2668       jsr     LOAD_4TH_3        ; Jump to subroutine at LOAD_4TH_3:
 84B0 [03] B6B3      2669       lda     RPM               ; Load accumulator with value in "RPM"
 84B2 [03] B767      2670       sta     DisVal            ; Copy to "DisVal" variable
 84B4 [05] CD8930    2671       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84B7 [05] CD8976    2672       jsr     LOAD_5TH_3        ; Jump to subroutine at LOAD_5TH_3:
 84BA [03] CC85D1    2673       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2674  
                     2675  
                     2676  DF_PRS:
 84BD [03] B6CD      2677       lda     df                ; Load accumulator with value "df"
 84BF [03] B767      2678       sta     DisVal            ; Copy to "DisVal" variable
 84C1 [05] CD8930    2679       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84C4 [05] CD8942    2680       jsr     LOAD_1ST_3        ; Jump to subroutine at LOAD_1ST_3:
 84C7 [03] B6C6      2681       lda     TPSp              ; Load accumulator with value "TPSp"
 84C9 [03] B767      2682       sta     DisVal            ; Copy to "DisVal" variable
 84CB [05] CD8930    2683       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84CE [05] CD894F    2684       jsr     LOAD_2ND_3        ; Jump to subroutine at LOAD_2ND_3:
 84D1 [03] B6D0      2685       lda     EPCpwH            ; Load accumulator with value "EPCpwH"
 84D3 [03] B767      2686       sta     DisVal            ; Copy to "DisVal" variable
 84D5 [05] CD8930    2687       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84D8 [05] CD895C    2688       jsr     LOAD_3D_3         ; Jump to subroutine at LOAD_3D_3:
 84DB [03] B6D1      2689       lda     EPCpwL            ; Load accumulator with value "EPCpwL"
 84DD [03] B767      2690       sta     DisVal            ; Copy to "DisVal" variable
 84DF [05] CD8930    2691       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84E2 [05] CD8969    2692       jsr     LOAD_4TH_3        ; Jump to subroutine at LOAD_4TH_3:
 84E5 [03] B6C3      2693       lda     Lpsi              ; Load accumulator with value "Lps1"
 84E7 [03] B767      2694       sta     DisVal            ; Copy to "DisVal" variable
 84E9 [05] CD8930    2695       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84EC [05] CD8976    2696       jsr     LOAD_5TH_3        ; Jump to subroutine at LOAD_5TH_3:
 84EF [03] CC85D1    2697       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2698  
                     2699  GUAGES:
 84F2 [03] B6B3      2700       lda     RPM               ; Load accumulator with value in "RPM"
 84F4 [03] B767      2701       sta     DisVal            ; Copy to "DisVal" variable
 84F6 [05] CD8930    2702       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84F9 [05] CD8942    2703       jsr     LOAD_1ST_3        ; Jump to subroutine at LOAD_1ST_3:
 84FC [03] B6B4      2704       lda     MPH               ; Load accumulator with value in "MPH"
 84FE [03] B767      2705       sta     DisVal            ; Copy to "DisVal" variable
 8500 [05] CD8930    2706       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8503 [05] CD894F    2707       jsr     LOAD_2ND_3        ; Jump to subroutine at LOAD_2ND_3:
 8506 [03] B6C3      2708       lda     Lpsi              ; Load accumulator with value in "Lpsi"
 8508 [03] B767      2709       sta     DisVal            ; Copy to "DisVal" variable
 850A [05] CD8930    2710       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 850D [05] CD895C    2711       jsr     LOAD_3D_3         ; Jump to subroutine at LOAD_3D_3:
 8510 [03] B6C2      2712       lda     TOTemp            ; Load accumulator with value in "TOTemp"
 8512 [03] B767      2713       sta     DisVal            ; Copy to "DisVal" variable
 8514 [05] CD8930    2714       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8517 [05] CD8969    2715       jsr     LOAD_4TH_3        ; Jump to subroutine at LOAD_4TH_3:
 851A [03] B6C4      2716       lda     Volts             ; Load accumulator with value in "Volts"
 851C [03] B767      2717       sta     DisVal            ; Copy to "DisVal" variable
 851E [05] CD8930    2718       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8521 [05] CD8976    2719       jsr     LOAD_5TH_3        ; Jump to subroutine at LOAD_5TH_3:
 8524 [03] CC85D1    2720       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2721  
                     2722  STATUS:
 8527 [03] B6C1      2723       lda     mlpsp          ; Load accumulator with value in MLPS position
 8529 [04] 410111    2724       cbeqa   #P,PARK        ; Compare with value #P, if equal,
                     2725                              ; branch to PARK:
 852C [04] 410216    2726       cbeqa   #R,REVERSE     ; Compare with value #R, if equal,
                     2727                              ; branch to REVERSE:
 852F [04] 41031B    2728       cbeqa   #N,NEUTRAL     ; Compare with value #N, if equal,
                     2729                              ; branch to NEUTRAL:
 8532 [04] 410420    2730       cbeqa   #D,DRIVE       ; Compare with value #D, if equal,
                     2731                              ; branch to DRIVE:
 8535 [04] 410525    2732       cbeqa   #M2,MAN2       ; Compare with value #m2, if equal,
                     2733                              ; branch to MAN2:
 8538 [04] 41062A    2734       cbeqa   #M1,MAN1       ; Compare with value #M1, if equal,
                     2735                              ; branch to MAN1:
 853B [03] 2030      2736       bra     OOR_MLP        ; Branch to OOR_MLP:(out of range MLP)
                     2737  
                     2738  PARK:
 853D [04] 6E5068    2739       mov     #'P',Botlin0    ; Move "P" into "Botlin0"
 8540 [04] 6E2069    2740       mov     #' ',Botlin1    ; Move "space" into "Botlin1"
 8543 [03] 202E      2741       bra     MLPSP_DONE      ; Branch to MLPSP_DONE:
                     2742  
                     2743  REVERSE:
 8545 [04] 6E5268    2744       mov     #'R',Botlin0    ; Move "R" into "Botlin0"
 8548 [04] 6E2069    2745       mov     #' ',Botlin1    ; Move "space" into "Botlin1"
 854B [03] 2026      2746       bra     MLPSP_DONE      ; Branch to MLPSP_DONE:
                     2747  
                     2748  NEUTRAL:
 854D [04] 6E4E68    2749       mov     #'N',Botlin0    ; Move "N" into "Botlin0"
 8550 [04] 6E2069    2750       mov     #' ',Botlin1    ; Move "space" into "Botlin1"
 8553 [03] 201E      2751       bra     MLPSP_DONE      ; Branch to MLPSP_DONE:
                     2752  
                     2753  DRIVE:
 8555 [04] 6E4468    2754       mov     #'D',Botlin0    ; Move "D" into "Botlin0"
 8558 [04] 6E2069    2755       mov     #' ',Botlin1    ; Move "space" into "Botlin1"
 855B [03] 2016      2756       bra     MLPSP_DONE      ; Branch to MLPSP_DONE:
                     2757  
                     2758  MAN2:
 855D [04] 6E4D68    2759       mov     #'M',Botlin0    ; Move "M" into "Botlin0"
 8560 [04] 6E3269    2760       mov     #'2',Botlin1    ; Move "2" into "Botlin1"
 8563 [03] 200E      2761       bra     MLPSP_DONE      ; Branch to MLPSP_DONE:
                     2762  
                     2763  MAN1:
 8565 [04] 6E4D68    2764       mov     #'M',Botlin0    ; Move "M" into "Botlin0"
 8568 [04] 6E3169    2765       mov     #'1',Botlin1    ; Move "1" into "Botlin1"
 856B [03] 2006      2766       bra     MLPSP_DONE      ; Branch to MLPSP_DONE:
                     2767  
                     2768  OOR_MLP:
 856D [04] 6E3F68    2769       mov     #'?',Botlin0    ; Move "?" into "Botlin0"
 8570 [04] 6E3F69    2770       mov     #'?',Botlin1    ; Move "?" into "Botlin1"
                     2771  
                     2772  MLPSP_DONE:
                     2773  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 27
MV_TECA


 8573 [03] B6B7      2774       lda     gearcnt          ; Load accumulator with value in "gearcnt"
 8575 [04] 41010B    2775       cbeqa   #first,ONE       ; Compare with value #first, if equal,
                     2776                                ; branch to ONE:
 8578 [04] 41020D    2777       cbeqa   #second,TWO      ; Compare with value #second, if equal,
                     2778                                ; branch to TWO:
 857B [04] 41030F    2779       cbeqa   #third,THREE     ; Compare with value #third, if equal,
                     2780                                ; branch to THREE:
 857E [04] 410411    2781       cbeqa   #forth,FOUR      ; Compare with value #forth, if equal,
                     2782                                ; branch to FOUR:
 8581 [03] 2014      2783       bra     OOR_GR           ; Branch to OOR_GR:(out of range grcnt)
                     2784  
                     2785  ONE:
 8583 [04] 6E316B    2786       mov     #'1',Botlin3      ; Move "1" into "Botlin3"
 8586 [03] 2012      2787       bra     GEARCNT_DONE      ; Branch to GEARCNT_DONE:
                     2788  
                     2789  TWO:
 8588 [04] 6E326B    2790       mov     #'2',Botlin3      ; Move "2" into "Botlin3"
 858B [03] 200D      2791       bra     GEARCNT_DONE      ; Branch to GEARCNT_DONE:
                     2792  
                     2793  THREE:
 858D [04] 6E336B    2794       mov     #'3',Botlin3      ; Move "3" into "Botlin3"
 8590 [03] 2008      2795       bra     GEARCNT_DONE      ; Branch to GEARCNT_DONE:
                     2796  
                     2797  FOUR:
 8592 [04] 6E346B    2798       mov     #'4',Botlin3      ; Move "4" into "Botlin3"
 8595 [03] 2003      2799       bra     GEARCNT_DONE      ; Branch to GEARCNT_DONE:
                     2800  
                     2801  OOR_GR:
 8597 [04] 6E3F6B    2802       mov     #'?',Botlin3    ; Move "?" into "Botlin3"
                     2803  
                     2804  GEARCNT_DONE:
 859A [05] 00B605    2805       brset   CCSon,trans2,CCS     ; If "CCSon" bit of "trans2" variable is
                     2806                                    ; set, branch to CCS:
 859D [04] 6E4E6E    2807       mov     #'N',Botlin6         ; Move "N" into "Botlin6"
 85A0 [03] 2003      2808       bra     CCS_DONE             ; Branch to CCS_DONE:
                     2809  
                     2810  CCS:
 85A2 [04] 6E596E    2811       mov     #'Y',Botlin6         ; Move "Y" into "Botlin6"
                     2812  
                     2813  CCS_DONE:
 85A5 [05] 02B605    2814       brset   TCCon,trans2,TCC     ; If "TCCon" bit of "trans2" variable is
                     2815                                    ; set, branch to TCC:
 85A8 [04] 6E4E71    2816       mov     #'N',Botlin9         ; Move "N" into "Botlin9"
 85AB [03] 2003      2817       bra     TCC_DONE             ; Branch to TCC_DONE:
                     2818  
                     2819  TCC:
 85AD [04] 6E5971    2820       mov     #'Y',Botlin9         ; Move "Y" into "Botlin9"
                     2821  
                     2822  TCC_DONE:
 85B0 [05] 04B605    2823       brset   DFCon,trans2,DFC     ; If "DFCon" bit of "trans2" variable is
                     2824                                    ; set, branch to DFC:
 85B3 [04] 6E4E74    2825       mov     #'N',Botlin12        ; Move "N" into "Botlin12"
 85B6 [03] 2003      2826       bra     DFC_DONE             ; Branch to DFC_DONE:
                     2827  
                     2828  DFC:
 85B8 [04] 6E5974    2829       mov     #'Y',Botlin12        ; Move "Y" into "Botlin12"
                     2830  
                     2831  DFC_DONE:
 85BB [05] 0CB505    2832       brset   PSIbrk,trans,PSI     ; If "PSIbrk" bit of "trans" variable is
                     2833                                    ; set, branch to PSI:
 85BE [04] 6E4E77    2834       mov     #'N',Botlin15        ; Move "N" into "Botlin15"
 85C1 [03] 2003      2835       bra     PSI_DONE             ; Branch to PSI_DONE:
                     2836  
                     2837  PSI:
 85C3 [04] 6E5977    2838       mov     #'Y',Botlin15        ; Move "Y" into "Botlin15"
                     2839  
                     2840  PSI_DONE:
 85C6 [05] 06B605    2841       brset   BRKon,trans2,BRK     ; If "BRKon" bit of "trans2" variable is
                     2842                                    ; set, branch to BRK:
 85C9 [04] 6E4E7A    2843       mov     #'N',Botlin18        ; Move "N" into "Botlin18"
 85CC [03] 2003      2844       bra     BRK_DONE             ; Branch to BRK_DONE:
                     2845  
                     2846  BRK:
 85CE [04] 6E597A    2847       mov     #'Y',Botlin18        ; Move "Y" into "Botlin18"
                     2848  
                     2849  BRK_DONE:
                     2850  
                     2851  
                     2852  ;***************************************************************************
                     2853  ; - Check to see if we have had a "display freeze" command and branch
                     2854  ;   accordingly.
                     2855  ;***************************************************************************
                     2856  
                     2857  CHK_FRZ_DISP:
 85D1 [05] 02530F    2858       brset    frz,flags,NO_CHNG_DB     ; If "frz" bit of "flags" variable
                     2859                                         ; is set, branch to NO_CHNG_DB:
                     2860  
                     2861  
                     2862  ;****************************************************************************
                     2863  ; - Compare all the characters on the bottom line commanded, to those of the
                     2864  ;   previous bottom line. If they are different, update the bottom line,
                     2865  ;   otherwise, skip over. This is to eliminate display  "digit rattle"
                     2866  ;   caused by rapid screen updates.
                     2867  ;****************************************************************************
                     2868  
                     2869  BOTLIN_CHK_D:
 85D4 [05] CD8ABA    2870       jsr     CMP_BOTLIN                   ; Jump to subroutine at CMP_BOTLIN:
 85D7 [05] 0B5309    2871       brclr   LinChng,flags,NO_CHNG_DB     ; If "LinChng" bit of "flags"
                     2872                                            ; variable is clear, branch to
                     2873                                            ; NO_CHNG_DB:
                     2874  
                     2875  ;****************************************************************************
                     2876  ; - Set up the VFD to place the first character in the bottom line, extreme
                     2877  ;   left hand position
                     2878  ;****************************************************************************
                     2879  
 85DA [05] CD8A12    2880       jsr     VFD_START_BOT      ; Jump to subroutine at VFD_START_BOT:
                     2881  
                     2882  ;***************************************************************************
                     2883  ; - Print the bottom line of the VFD display
                     2884  ;***************************************************************************
                     2885  
                     2886  PRINT_BOT_D:
 85DD [03] 450068    2887       ldhx    #BotLin0                 ; Load index register with address of
                     2888                                        ; entry point for bottom line of VFD
 85E0 [05] CD8983    2889       jsr     PRINT_LINE               ; Jump to subroutine at PRINT_LINE:
                     2890  
                     2891  NO_CHNG_DB:
 85E3 [03] CC821F    2892       jmp     LOOPY          ; Jump to LOOPY:(End of program loop while in
                     2893                              ; "Display" mode)
                     2894  
                     2895  
                     2896  
                     2897  ;****************************************************************************
                     2898  ;****************************************************************************
                     2899  ;*                         CONFIGURATION SECTION                            *
                     2900  ;****************************************************************************
                     2901  ;****************************************************************************
                     2902  
                     2903  CONFIG_CHK:
                     2904  
                     2905  ;****************************************************************************
                     2906  ; - Check to see if any of the input flags are set, and if so, branch
                     2907  ;   accordingly.
                     2908  ;****************************************************************************
                     2909  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 28
MV_TECA


 85E6 [05] CD8894    2910       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     2911                                         ;(Check he state of the Toggle Mode,
                     2912                                         ; Display / Configure button
                     2913                                         ; on PTA3)
                     2914  
 85E9 [05] 064F06    2915       brset   Sw3cls,Swflags,TOG_MODE2  ; If "Sw3cls" bit of "Swflags"
                     2916                                         ; variable is set, branch to
                     2917                                         ; TOG_MODE2:
                     2918                                         ;(Toggle Mode button is pressed)
 85EC [05] 044F09    2919       brset   Sw2cls,Swflags,TOG_SEL    ; If "Sw2cls" bit of "Swflags" variable
                     2920                                         ; is set, branch to TOG_SEL
                     2921                                         ;(Freeze/Select button is pressed)
                     2922  
                     2923  CONFIG_CHK_DONE:
 85EF [03] CC8604    2924       jmp     CONFIG_MODE      ; Jump to CONFIG_MODE:
                     2925  
                     2926  TOG_MODE2:
 85F2 [05] CD899A    2927       jsr     CHANGE_MODE      ; Jump to subroutine at CHANGE_MODE:
 85F5 [03] CC821F    2928       jmp     LOOPY            ; Jump to LOOPY:
                     2929                                ;(Mode has changed, so start again)
                     2930  
                     2931  TOG_SEL:
                     2932  
                     2933  ;****************************************************************************
                     2934  ; - Toggle "sel" bit of "flags" variable whenever "Freeze/Select" button
                     2935  ;   is pressed, while in Configure mode.
                     2936  ;****************************************************************************
                     2937  
 85F8 [04] 3352      2938       com     SelCntr             ; Ones compliment "SelCntr"
                     2939                                   ;(flip state of "SelCntr"
 85FA [03] 2604      2940       bne     SET_SEL             ; If the Z bit of CCR is clear, branch
                     2941                                   ; to SET_SEL:
 85FC [04] 1553      2942       bclr    sel,flags           ; Clear "sel" bit of "flags" variable
                     2943                                   ; ("sel" = 0 = no constant selected)
 85FE [03] 2002      2944       bra     TOG_SEL_DONE        ; Branch to TOG_SEL_DONE:
                     2945  
                     2946  SET_SEL:
 8600 [04] 1453      2947       bset    sel,flags           ; Set "sel" bit "flags" variable
                     2948                                   ;("sel" = 1 = current constant selected)
                     2949  
                     2950  TOG_SEL_DONE:
 8602 [04] 154F      2951       bclr    Sw2cls,Swflags      ; Clear "Sw2cls" bit of "Swflags" variable
                     2952  
                     2953  
                     2954  CONFIG_MODE:
                     2955  
                     2956  ;****************************************************************************
                     2957  ; - Check to see if the current constant is selected or not,
                     2958  ;   and branch accordingly.
                     2959  ;****************************************************************************
                     2960  
 8604 [05] 045302    2961       brset   sel,flags,SEL_SET     ; If "sel" bit of "flags" bit is set,
                     2962                                     ; branch to SEL_SET:
                     2963                                     ;(current constant is selected, so check
                     2964                                     ; if it should be changed or not)
 8607 [03] 2003      2965       bra     CHK_SCRL              ; Branch to CHK_SCRL:
                     2966  
                     2967  SEL_SET:
 8609 [03] CC86A5    2968       jmp     DISP_CON_BOT          ; Jump to DISP_CON_BOT:(Long branch)
                     2969  
                     2970  CHK_SCRL:
                     2971  
                     2972  ;****************************************************************************
                     2973  ; - Current constant is not selected, so check if we should scroll to the
                     2974  ;   next or previous constant, or stay where we are.
                     2975  ;****************************************************************************
                     2976  
 860C [05] 004F3A    2977       brset   Sw0cls,Swflags,SCRL_C_LFT  ; If "Sw0cls" bit of "Swflags" var
                     2978                                          ; is set, branch to SCRL_C_LFT:
                     2979                                          ;(Scroll Left/Decrement button is
                     2980                                          ; pressed)
 860F [05] 024F03    2981       brset   Sw1cls,Swflags,SCRL_C_RT   ; If "Sw1cls" bit of "Swflags" var
                     2982                                          ; is set, branch to SCRL_C_RT:
                     2983                                          ;(Scroll Right/Increment button is
                     2984                                          ; pressed)
                     2985  
                     2986  CHK_SCRL_DONE:
 8612 [03] CC8678    2987       jmp     DISP_CON_TOP               ; Jump to DISP_CON_TOP:
                     2988  
                     2989  SCRL_C_RT:
                     2990  
                     2991  ;****************************************************************************
                     2992  ; - Constants pages Group 1 and 2 are different sizes, so the constant
                     2993  ;   count limits will be different. Using the "ScrnCnt" variable, determine
                     2994  ;   which Constant group we are using, and branch accordingly
                     2995  ;****************************************************************************
                     2996  
 8615 [03] B654      2997       lda     ScrnCnt     ; Load accumulator with value in "ScrnCnt" variable
 8617 [02] A107      2998       cmp     #$07        ; Compare with decimal 7(Con Screen 2)
 8619 [03] 2717      2999       beq     INC_CONCNT2 ; If Z bit of CCR is set, branch to INC_CONCNT2:
                     3000  
                     3001  ;****************************************************************************
                     3002  ; - Increment the Constant number,Group 1.
                     3003  ;****************************************************************************
                     3004  
                     3005  INC_CONCNT:
 861B [03] B658      3006       lda     ConCnt_prv      ; Load accumulator with value in "ConCnt_prv"
 861D [02] A17F      3007       cmp     #$7F            ; Compare with decimal 127
 861F [03] 2704      3008       beq     RTN_TO_0_C      ; If Z bit of CCR is set, branch to RTN_TO_0_C
                     3009                               ;("ConCnt_prv" = 127 so return to "ConCnt = 0)
 8621 [04] 3C57      3010       inc     ConCnt          ; Increment "ConCnt" variable
 8623 [03] 2002      3011       bra     SCRL_C_RT_DONE  ; Branch to SCRL_C_RT_DONE:
                     3012  
                     3013  RTN_TO_0_C:
 8625 [03] 3F57      3014      clr     ConCnt           ; Clear "ConCnt" variable(ConCnt = 0)
                     3015  
                     3016  SCRL_C_RT_DONE:
 8627 [05] 4E5758    3017       mov     ConCnt,ConCnt_prv   ; Move value in "ConCnt" to "ConCnt_prv"
 862A [05] 4E575A    3018       mov     ConCnt,CurCon       ; Move value in "ConCnt" to "CurCon"
 862D [04] 134F      3019       bclr    Sw1cls,Swflags      ; Clear "Sw1cls" bit of "Swflags" variable
 862F [03] CC8678    3020       jmp     DISP_CON_TOP        ; Jump to DISP_CON_TOP:
                     3021  
                     3022  ;****************************************************************************
                     3023  ; - Increment the Constant number,Group 2.
                     3024  ;****************************************************************************
                     3025  
                     3026  INC_CONCNT2:
 8632 [03] B658      3027       lda     ConCnt_prv      ; Load accumulator with value in "ConCnt_prv"
 8634 [02] A13F      3028       cmp     #$3F            ; Compare with decimal 63
 8636 [03] 2704      3029       beq     RTN_TO_0_C2     ; If Z bit of CCR is set, branch to RTN_TO_0_C2
                     3030                               ;("ConCnt_prv" = 63 so return to "ConCnt = 0)
 8638 [04] 3C57      3031       inc     ConCnt          ; Increment "ConCnt" variable
 863A [03] 2002      3032       bra     SCRL_C_RT2_DONE ; Branch to SCRL_C_RT2_DONE:
                     3033  
                     3034  RTN_TO_0_C2:
 863C [03] 3F57      3035      clr     ConCnt           ; Clear "ConCnt" variable(ConCnt = 0)
                     3036  
                     3037  SCRL_C_RT2_DONE:
 863E [05] 4E5758    3038       mov     ConCnt,ConCnt_prv   ; Move value in "ConCnt" to "ConCnt_prv"
 8641 [05] 4E575A    3039       mov     ConCnt,CurCon       ; Move value in "ConCnt" to "CurCon"
 8644 [04] 134F      3040       bclr    Sw1cls,Swflags      ; Clear "Sw1cls" bit of "Swflags" variable
 8646 [03] CC8678    3041       jmp     DISP_CON_TOP        ; Jump to DISP_CON_TOP:
                     3042  
                     3043  SCRL_C_LFT:
                     3044  
                     3045  ;****************************************************************************


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 29
MV_TECA


                     3046  ; - Constants pages Group 1 and 2 are different sizes, so the constant
                     3047  ;   count limits will be different. Using the "ScrnCnt" variable, determine
                     3048  ;   which Constant group we are using, and branch accordingly
                     3049  ;****************************************************************************
                     3050  
 8649 [03] B654      3051       lda     ScrnCnt     ; Load accumulator with value in "ScrnCnt" variable
 864B [02] A107      3052       cmp     #$07        ; Compare with decimal 7(Con Screen 2)
 864D [03] 2716      3053       beq     DEC_CONCNT2 ; If Z bit of CCR is set, branch to DEC_CONCNT2:
                     3054  
                     3055  ;****************************************************************************
                     3056  ; - Decrement the Constant number, Group 1.
                     3057  ;****************************************************************************
                     3058  
                     3059  DEC_CONCNT:
 864F [03] B658      3060       lda     ConCnt_prv      ; Load accumulator with value in "ConCnt_prv"
 8651 [03] 2704      3061       beq     RTN_TO_127      ; If Z bit of CCR is set, branch to RTN_TO_127:
 8653 [04] 3A57      3062       dec     ConCnt          ; Decrement "ConCnt" variable
 8655 [03] 2003      3063       bra     SCRL_C_LFT_DONE ; Branch to SCRL_C_LFT_DONE:
                     3064  
                     3065  RTN_TO_127:
 8657 [04] 6E7F57    3066      mov     #$7F,ConCnt      ; Move decimal 127 into "ConCnt" variable
                     3067  
                     3068  SCRL_C_LFT_DONE:
 865A [05] 4E5758    3069       mov     ConCnt,ConCnt_prv    ; Move value in "ConCnt" to "ConCnt_prv"
 865D [05] 4E575A    3070       mov     ConCnt,CurCon        ; Move value in "ConCnt" to CurCon"
 8660 [04] 114F      3071       bclr    Sw0cls,Swflags       ; Clear "Sw0cls" bit of "Swflags" variable
 8662 [03] CC8678    3072       jmp     DISP_CON_TOP        ; Jump to DISP_CON_TOP:
                     3073  
                     3074  ;****************************************************************************
                     3075  ; - Decrement the Constant number, Group 2.
                     3076  ;****************************************************************************
                     3077  
                     3078  DEC_CONCNT2:
 8665 [03] B658      3079       lda     ConCnt_prv       ; Load accumulator with value in "ConCnt_prv"
 8667 [03] 2704      3080       beq     RTN_TO_63        ; If Z bit of CCR is set, branch to RTN_TO_63:
 8669 [04] 3A57      3081       dec     ConCnt           ; Decrement "ConCnt" variable
 866B [03] 2003      3082       bra     SCRL_C_LFT2_DONE ; Branch to SCRL_C_LFT2_DONE:
                     3083  
                     3084  RTN_TO_63:
 866D [04] 6E3F57    3085      mov     #$3F,ConCnt       ; Move decimal 63 into "ConCnt" variable
                     3086  
                     3087  SCRL_C_LFT2_DONE:
 8670 [05] 4E5758    3088       mov     ConCnt,ConCnt_prv    ; Move value in "ConCnt" to "ConCnt_prv"
 8673 [05] 4E575A    3089       mov     ConCnt,CurCon        ; Move value in "ConCnt" to CurCon"
 8676 [04] 114F      3090       bclr    Sw0cls,Swflags       ; Clear "Sw0cls" bit of "Swflags" variable
                     3091  
                     3092  DISP_CON_TOP:
                     3093  
                     3094  ;****************************************************************************
                     3095  ; - We are in Configuration mode. Because the addresses of the tables for
                     3096  ;   character strings are 2 bytes long, we are limited to 128 offset values
                     3097  ;   from any starting point. We have more than 128 constants, so the list
                     3098  ;   is broken up into 2 parts, each with it's own starting screen. "Con
                     3099  ;   Screen 1" starts with "TO_0_0", and contains the TO table, RPM_RANGE,
                     3100  ;   KPA_RANGE, TPS_RANGE, EPC_STALL, EPC_12, EPC_23, and EPC_34 tables.
                     3101  ;   "Con Screen 2" starts with "EPC_TCC" and contains the configurable
                     3102  ;   constants. Using the "ScrnCnt" variable, determine which section of the
                     3103  ;   constants we should be using.
                     3104  ;   The desired constant count number has been determined. Using the constant
                     3105  ;   count number, determine the appropriate array for the top line of the
                     3106  ;   display. Also, determine the appropriate constant for the bottom line
                     3107  ;   of the display.
                     3108  ;****************************************************************************
                     3109  
                     3110  ;****************************************************************************
                     3111  ; - Set up the VFD to place the first character in the top line, extreme
                     3112  ;   left hand position
                     3113  ;****************************************************************************
                     3114  
 8678 [05] CD89F4    3115       jsr     VFD_START_TOP     ; Jump to subroutine at VFD_START_TOP:
                     3116  
                     3117  ;****************************************************************************
                     3118  ; - Using the value in "ScrnCnt" determine which of the two constant table
                     3119  ;   indexes we should be in.
                     3120  ;****************************************************************************
                     3121  
 867B [03] B654      3122       lda     ScrnCnt     ; Load accumulator with avlue in "ScrnCnt" variable
 867D [02] A107      3123       cmp     #$07        ; Compare with decimal 7(Con Screen 2)
 867F [03] 2709      3124       beq     CON_SCRN_2  ; If Z bit of CCR is set, branch to CON_SCRN_7:
 8681 [02] A106      3125       cmp     #06         ; Compare with decimal 6(Con Screen 1)
 8683 [03] 270B      3126       beq     CON_SCRN_1  ; If Z bit of CCR is set, branch to CON_SCRN_1:
 8685 [04] 1153      3127       bclr    mde,flags   ; Clear "mde" bit of "flags" variable
 8687 [03] CC821F    3128       jmp     LOOPY       ; Jump to LOOPY:
                     3129                           ;(Return to "Display" mode)(sanity check)
                     3130  
                     3131  CON_SCRN_2:
 868A [01] 8C        3132       clrh
 868B [03] 45F7A8    3133       ldhx    #G2_CONS_TL_TB_IND ; Load index register with the address of
                     3134                                  ; the first value in the Constants
                     3135                                  ; Group 2 Top Line Table Index vector
                     3136                                  ; table
 868E [03] 2004      3137       bra     VECTOR_ADDRESS     ; Branch to VECTOR_ADDRESS:
                     3138  
                     3139  CON_SCRN_1:
 8690 [01] 8C        3140       clrh
 8691 [03] 45F6A8    3141       ldhx    #G1_CONS_TL_TB_IND ; Load index register with the address of
                     3142                                  ; the first value in the Constants
                     3143                                  ; Group 1 Top Line Table Index vector
                     3144                                  ; table
                     3145  
                     3146  
                     3147  ;***************************************************************************
                     3148  ; - Using the Constants Top Line Table Index vector table, and the "ConCnt"
                     3149  ;   offset value, load H:X with the address of the desired Constants Top
                     3150  ;   Line Table Index.
                     3151  ;***************************************************************************
                     3152  
                     3153  VECTOR_ADDRESS:
 8694 [03] B657      3154       lda     ConCnt            ; Load accumulator with the value in "ConCnt"
 8696 [05] CD89BD    3155       jsr     GET_VECT_ADDR     ; Jump to subroutine at GET_VECT_ADDR:
                     3156  
                     3157  ;***************************************************************************
                     3158  ; - Print the top line of the VFD display
                     3159  ;
                     3160  ; - First, compare the desired constant count number with the constant count
                     3161  ;   number on the last pass through the main loop. If it is the same, skip
                     3162  ;   over, otherwise update the top line of the display. This is to eliminate
                     3163  ;   "digit rattle" caused by rapid screen updates.
                     3164  ;***************************************************************************
                     3165  
 8699 [03] B657      3166       lda     ConCnt             ; Load accumulator with value in "ConCnt"
 869B [03] B159      3167       cmp     ConCnt_Lst         ; Compare with "ConCnt_Lst"
 869D [03] 2706      3168       beq     NO_CHNG_CT         ; If Z bit of CCR is clear, branch to
 869F [05] 4E5759    3169       mov     ConCnt,ConCnt_Lst  ; Copy value in "ConCnt" to ConCnt_Lst"
                     3170                                  ; NO_CHNG_CT:(ConCnt_Lst = ConCnt)
 86A2 [05] CD8983    3171       jsr     PRINT_LINE         ; Jump to subroutine at PRINT_LINE:
                     3172  
                     3173  NO_CHNG_CT:
                     3174  
                     3175  DISP_CON_BOT:
                     3176  
                     3177  ;****************************************************************************
                     3178  ; - We have 20 variables in RAM in ordered list(BotLin0 through BotLin19)
                     3179  ;   which have been initialized to ASCII $20(blank space). The variable
                     3180  ;   "CurCon" contains the offset value from the entry point of the ordered
                     3181  ;   list of constants beginning at the variable "TO_0_0". "CurCon" matches


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 30
MV_TECA


                     3182  ;   the current Constants Top Line on the display. Using "CurCon", we do an
                     3183  ;   ASCII conversion of the variable, and overwrite the first 3 blank spaces
                     3184  ;   on the bottom line with appropriate numbers. The rest of the line
                     3185  ;   remains blank.
                     3186  ;****************************************************************************
                     3187  
                     3188  ;****************************************************************************
                     3189  ; - Using the value in "ScrnCnt" determine which of the two constant table
                     3190  ;   indexes we should be in.
                     3191  ;****************************************************************************
                     3192  
 86A5 [03] B654      3193       lda     ScrnCnt     ; Load accumulator with avlue in "ScrnCnt" variable
 86A7 [02] A107      3194       cmp     #$07        ; Compare with decimal 7(Con Screen 2)
 86A9 [03] 2721      3195       beq     G2_CONS     ; If Z bit of CCR is set, branch to G2_CONS:
 86AB [02] A106      3196       cmp     #06         ; Compare with decimal 6(Con Screen 1)
 86AD [03] 2705      3197       beq     G1_CONS     ; If Z bit of CCR is set, branch to G1_CONS:
 86AF [04] 1153      3198       bclr    mde,flags   ; Clear "mde" bit of "flags" variable
 86B1 [03] CC821F    3199       jmp     LOOPY       ; Jump to LOOPY:
                     3200                           ;(Return to "Display" mode)(sanity check)
                     3201  
                     3202  
                     3203  ;****************************************************************************
                     3204  ; - Load the value of the current "G1" constant and update if required.
                     3205  ;****************************************************************************
                     3206  
                     3207  G1_CONS:
 86B4 [03] B65A      3208       lda     CurCon       ; Load accumulator with value in "CurCon" var
                     3209                            ;(offset from beginning of ordered list section)
 86B6 [01] 8C        3210       clrh                 ; Clear index register Hi byte
 86B7 [01] 97        3211       tax                  ; Transfer value in accumulator to index
                     3212                            ; register Lo byte(offset)
 86B8 [03] E6D2      3213       lda     TO_0_0,x     ; Load accumulator with value in location
                     3214                            ; "TO_0_0", offset in index register Lo byte
 86BA [03] B75B      3215       sta     ConVal       ; Copy value in accumulator to "ConVal" variable
 86BC [05] 05530B    3216       brclr   sel,flags,NOT_SEL_G1   ; If "sel" bit of "flags" variable is
                     3217                                      ; clear, branch to NOT_SEL_G1:
                     3218  
                     3219  ;****************************************************************************
                     3220  ; - Update RAM
                     3221  ;****************************************************************************
                     3222  
 86BF [05] CD891B    3223       jsr     UPDATE_CON   ; Jump to subroutine at UPDATE_CON:
 86C2 [03] B65A      3224       lda     CurCon       ; Load accumulator with value in "CurCon"
 86C4 [01] 8C        3225       clrh                 ; Clear index register Hi byte
 86C5 [01] 97        3226       tax                  ; Transfer value in accumulator to index register
                     3227                            ; Lo byte
 86C6 [03] B65B      3228       lda     ConVal       ; Load accumulator with value in "ConVal"
 86C8 [03] E7D2      3229       sta     TO_0_0,x     ; Copy to location at "TO_0_0", offset in index
                     3230                            ; register Lo byte(update the RAM value)
                     3231  NOT_SEL_G1:
 86CA [03] 2018      3232       bra     DO_CON_CONV  ; Branch to DO_CON_CONV:
                     3233  
                     3234  ;****************************************************************************
                     3235  ; - Load the value of the current "G2" constant and update if required.
                     3236  ;****************************************************************************
                     3237  
                     3238  G2_CONS:
 86CC [03] B65A      3239       lda     CurCon       ; Load accumulator with value in "CurCon" var
                     3240                            ;(offset from beginning of ordered list section)
 86CE [01] 8C        3241       clrh                 ; Clear index register Hi byte
 86CF [01] 97        3242       tax                  ; Transfer value in accumulator to index
                     3243                            ; register Lo byte(offset)
 86D0 [04] D60152    3244       lda     EPC_TCC,x     ; Load accumulator with value in location
                     3245                            ; "EPC_TCC", offset in index register Lo byte
 86D3 [03] B75B      3246       sta     ConVal       ; Copy value in accumulator to "ConVal" variable
 86D5 [05] 05530C    3247       brclr   sel,flags,NOT_SEL_G2    ; If "sel" bit of "flags" variable is
                     3248                                       ; clear, branch to NOT_SEL_G2:
                     3249  
                     3250  ;****************************************************************************
                     3251  ; - Update RAM
                     3252  ;****************************************************************************
                     3253  
 86D8 [05] CD891B    3254       jsr     UPDATE_CON   ; Jump to subroutine at UPDATE_CON:
 86DB [03] B65A      3255       lda     CurCon       ; Load accumulator with value in "CurCon"
 86DD [01] 8C        3256       clrh                 ; Clear index register Hi byte
 86DE [01] 97        3257       tax                  ; Transfer value in accumulator to index register
                     3258                            ; Lo byte
 86DF [03] B65B      3259       lda     ConVal       ; Load accumulator with value in "ConVal"
 86E1 [04] D70152    3260       sta     EPC_TCC,x    ; Copy to location at "EPC_TCC", offset in index
                     3261                            ; register Lo byte(update the RAM value)
                     3262  
                     3263  NOT_SEL_G2:
                     3264  
                     3265  ;****************************************************************************
                     3266  ; - Do the conversion from 8 bit variable to 3 byte ASCII string
                     3267  ;****************************************************************************
                     3268  
                     3269  DO_CON_CONV:
 86E4 [05] CD8930    3270       jsr     CONV_8BIT_ASCII     ; Jump to subroutine at CONV_8BIT_ASCII:
                     3271  
                     3272  ;****************************************************************************
                     3273  ; - Load the over-write values for the bottom line string.
                     3274  ;****************************************************************************
                     3275  
                     3276  LOAD_BOT:
 86E7 [05] CD88F0    3277       jsr     LOAD_SPACE              ; Jump to subroutine at LOAD_SPACE:
 86EA [05] CD8942    3278       jsr     LOAD_1ST_3              ; Jump to subroutine at LOAD_1ST_3:
 86ED [05] 055324    3279       brclr   sel,flags,BOTLIN_CHK_C  ; If "sel" bit of "flags" variable
                     3280                                       ;  is clear, branch to BOTLIN_CHK_C:
 86F0 [02] A653      3281       lda     #'S'                    ; Load accumulator with ASCII 'S'
 86F2 [03] B773      3282       sta     BotLin11                ; Copy to "BotLin11"
 86F4 [02] A645      3283       lda     #'E'                    ; Load accumulator with ASCII 'E'
 86F6 [03] B774      3284       sta     BotLin12                ; Copy to "BotLin12"
 86F8 [02] A64C      3285       lda     #'L'                    ; Load accumulator with ASCII 'L'
 86FA [03] B775      3286       sta     BotLin13                ; Copy to "BotLin13"
 86FC [02] A645      3287       lda     #'E'                    ; Load accumulator with ASCII 'E'
 86FE [03] B776      3288       sta     BotLin14                ; Copy to "BotLin14"
 8700 [02] A643      3289       lda     #'C'                    ; Load accumulator with ASCII 'C'
 8702 [03] B777      3290       sta     BotLin15                ; Copy to "BotLin15"
 8704 [02] A654      3291       lda     #'T'                    ; Load accumulator with ASCII 'T'
 8706 [03] B778      3292       sta     BotLin16                ; Copy to "BotLin16"
 8708 [02] A645      3293       lda     #'E'                    ; Load accumulator with ASCII 'E'
 870A [03] B779      3294       sta     BotLin17                ; Copy to "BotLin17"
 870C [02] A644      3295       lda     #'D'                    ; Load accumulator with ASCII 'D'
 870E [03] B77A      3296       sta     BotLin18                ; Copy to "BotLin18"
 8710 [02] A621      3297       lda     #'!'                    ; Load accumulator with ASCII '!'
 8712 [03] B77B      3298       sta     BotLin19                ; Copy to "BotLin19"
                     3299  
                     3300  ;****************************************************************************
                     3301  ; - Compare all the characters on the bottom line commanded, to those of the
                     3302  ;   previous bottom line. If they are different, update the bottom line,
                     3303  ;   otherwise, skip over. This is to eliminate display  "digit rattle"
                     3304  ;   caused by rapid screen updates.
                     3305  ;****************************************************************************
                     3306  
                     3307  BOTLIN_CHK_C:
 8714 [05] CD8ABA    3308       jsr     CMP_BOTLIN                   ; Jump to subroutine at CMP_BOTLIN:
 8717 [05] 0B5309    3309       brclr   LinChng,flags,NO_CHNG_CB     ; If "LinChng" bit of "flags"
                     3310                                            ; variable is clear, branch to
                     3311                                            ; NO_CHNG_CB:
                     3312  
                     3313  ****************************************************************************
                     3314  ; - Set up the VFD to place the first character in the bottom line, extreme
                     3315  ;   left hand position
                     3316  ;****************************************************************************
                     3317  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 31
MV_TECA


                     3318  START_BOT_C:
 871A [05] CD8A12    3319       jsr     VFD_START_BOT      ; Jump to subroutine at VFD_START_BOT:
                     3320  
                     3321  ;***************************************************************************
                     3322  ; - Print the bottom line of the VFD display
                     3323  ;***************************************************************************
                     3324  
 871D [03] 450068    3325       ldhx    #BotLin0         ; Load index register with address of entry
                     3326                                ; point for bottom line of VFD
 8720 [05] CD8983    3327       jsr     PRINT_LINE       ; Jump to subroutine at PRINT_LINE:
                     3328  
                     3329  NO_CHNG_CB:
 8723 [03] CC821F    3330       jmp     LOOPY            ; Jump to LOOPY: (End of program loop)
                     3331  
                     3332  
                     3333  
                     3334  ;****************************************************************************
                     3335  ;
                     3336  ; * * * * * * * * * * * * * * Interrupt Section * * * * * * * * * * * * * *
                     3337  ;
                     3338  ; NOTE!!! If the interrupt service routine modifies the H register, or uses
                     3339  ; the indexed addressing mode, save the H register (pshh) and then restore
                     3340  ; it (pulh) prior to exiting the routine
                     3341  ;
                     3342  ;****************************************************************************
                     3343  
                     3344  ;****************************************************************************
                     3345  ;
                     3346  ; -------- Following interrupt service routines in priority order ----------
                     3347  ;
                     3348  ; TIM2CH0_ISR: - TIM2 CH0 Interrupt (1000uS clock tick)(1.0mS)
                     3349  ;
                     3350  ; SCIRCV_ISR:  - SCI receive
                     3351  ;
                     3352  ; SCITX_ISR:   - SCI transmit (Not used)
                     3353  ;
                     3354  ;
                     3355  ;***************************************************************************
                     3356  
                     3357  ;****************************************************************************
                     3358  ;============================================================================
                     3359  ; - TIM2 CH0 Interrupt (1000uS clock tick)(1.0mS)
                     3360  ; - Generate time rates:
                     3361  ;   Milliseconds,(for contact de-bounce counters)
                     3362  ;   5 Milleseconds,(for auto-repeat and auto-repeat command counters)
                     3363  ;   250 Milliseconds,(for real time variable display updates)
                     3364  ;============================================================================
                     3365  ;****************************************************************************
                     3366  
                     3367  TIM2CH0_ISR:
 8726 [02] 8B        3368       pshh                  ; Push value in index register Hi byte to stack
 8727 [03] B630      3369       lda     T2SC0         ; Load accumulator with value in TIM2 CH0 Status
                     3370                             ; and Control Register (Arm CHxF flag clear)
 8729 [04] 1F30      3371       bclr    CHxF,T2SC0    ; Clear CHxF bit of TIM2 CH0 Status and
                     3372                             ; Control Register
 872B [03] B632      3373       lda     T2CH0L        ; Load accumulator with value in TIM2 CH0 OC
                     3374                             ; register Lo byte
 872D [02] ABE8      3375       add     #$E8          ; Add (A)<-(A)+(#) decimal 232
 872F [01] 97        3376       tax                   ; Transfer value in accumulator to index
                     3377                             ; register Lo byte
 8730 [03] B631      3378       lda     T2CH0H        ; Load accumulator with value in TIM2 CH0 OC
                     3379                             ; register Hi byte
 8732 [02] A903      3380       adc     #$03          ; Add with carry decimal 768 (A)<-(A)+(#)+(C)
                     3381                             ;(total = ~1000uS)
 8734 [03] B731      3382       sta     T2CH0H        ; Copy result to TIM2 CH0 OC register Hi byte
 8736 [03] BF32      3383       stx     T2CH0L        ; Copy value in index register Lo byte
                     3384                             ; to TIM2 CH0 OC register Lo byte
                     3385                             ;(new output compare value)
                     3386  
                     3387  ;============================================================================
                     3388  ;*********************** 1.0 millisecond section ****************************
                     3389  ;============================================================================
                     3390  
                     3391  
                     3392  ;****************************************************************************
                     3393  ; - Check the value of the contact de-bounce counter variables, if other
                     3394  ;   than zero, decrement them.
                     3395  ;****************************************************************************
                     3396  
 8738 [03] B640      3397       lda     Sw0DB              ; Load accumulator with value in "Sw0DB"
                     3398                                  ; variable
 873A [03] 2702      3399       beq     Sw0DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3400                                  ; Sw0DB_CHK_DONE:
 873C [04] 3A40      3401       dec     Sw0DB              ; Decrement "Sw0DB" variable
                     3402  
                     3403  Sw0DB_CHK_DONE:
                     3404  
 873E [03] B643      3405       lda     Sw1DB              ; Load accumulator with value in "Sw1DB"
                     3406                                  ; variable
 8740 [03] 2702      3407       beq     Sw1DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3408                                  ; Sw1DB_CHK_DONE:
 8742 [04] 3A43      3409       dec     Sw1DB              ; Decrement "Sw1DB" variable
                     3410  
                     3411  Sw1DB_CHK_DONE:
                     3412  
 8744 [03] B646      3413       lda     Sw2DB              ; Load accumulator with value in "Sw2DB"
                     3414                                  ; variable
 8746 [03] 2702      3415       beq     Sw2DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3416                                  ; Sw2DB_CHK_DONE:
 8748 [04] 3A46      3417       dec     Sw2DB              ; Decrement "Sw2DB" variable
                     3418  
                     3419  Sw2DB_CHK_DONE:
                     3420  
 874A [03] B649      3421       lda     Sw3DB              ; Load accumulator with value in "Sw3DB"
                     3422                                  ; variable
 874C [03] 2702      3423       beq     Sw3DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3424                                  ; Sw3DB_CHK_DONE:
 874E [04] 3A49      3425       dec     Sw3DB              ; Decrement "Sw3DB" variable
                     3426  
                     3427  Sw3DB_CHK_DONE:
                     3428  
                     3429  
                     3430  ;****************************************************************************
                     3431  ; - Increment millisecond counter
                     3432  ;****************************************************************************
                     3433  
                     3434  INC_mS:
 8750 [04] 3C5C      3435       inc     mS                  ; Increment Millisecond counter
 8752 [03] B65C      3436       lda     mS                  ; Load accumulator with value in
                     3437                                   ; Millisecond counter
 8754 [02] A105      3438       cmp     #$05                ; Compare it with decimal 5
 8756 [03] 2651      3439       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                     3440                                   ; branch to TIM2CH0_ISR_DONE:
                     3441  
                     3442  ;============================================================================
                     3443  ;************************** 5 Millisecond section ***************************
                     3444  ;============================================================================
                     3445  
                     3446  ;****************************************************************************
                     3447  ; - Check the value of the contact auto-repeat command counter variables,
                     3448  ;   if other than zero, decrement them.
                     3449  ;****************************************************************************
                     3450  
 8758 [03] B641      3451       lda     Sw0ARC             ; Load accumulator with value in "Sw0ARC"
                     3452                                  ; variable
 875A [03] 2702      3453       beq     SW0ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 32
MV_TECA


                     3454                                  ; SW0ARC_CHK_DONE:
 875C [04] 3A41      3455       dec     Sw0ARC             ; Decrement "Sw0ARC" variable
                     3456  
                     3457  SW0ARC_CHK_DONE:
                     3458  
 875E [03] B644      3459       lda     Sw1ARC             ; Load accumulator with value in "Sw1ARC"
                     3460                                  ; variable
 8760 [03] 2702      3461       beq     SW1ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     3462                                  ; SW1ARC_CHK_DONE:
 8762 [04] 3A44      3463       dec     Sw1ARC             ; Decrement "Sw1ARC" variable
                     3464  
                     3465  SW1ARC_CHK_DONE:
                     3466  
 8764 [03] B647      3467       lda     Sw2ARC             ; Load accumulator with value in "Sw2ARC"
                     3468                                  ; variable
 8766 [03] 2702      3469       beq     SW2ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     3470                                  ; SW2ARC_CHK_DONE:
 8768 [04] 3A47      3471       dec     Sw2ARC             ; Decrement "Sw2ARC" variable
                     3472  
                     3473  SW2ARC_CHK_DONE:
                     3474  
 876A [03] B64A      3475       lda     Sw3ARC             ; Load accumulator with value in "Sw3ARC"
                     3476                                  ; variable
 876C [03] 2702      3477       beq     SW3ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     3478                                  ; SW3ARC_CHK_DONE:
 876E [04] 3A4A      3479       dec     Sw3ARC             ; Decrement "Sw3ARC" variable
                     3480  
                     3481  SW3ARC_CHK_DONE:
                     3482  
                     3483  
                     3484  ;****************************************************************************
                     3485  ; - Check the value of the contact auto-repeat counter variables, if other
                     3486  ;   than zero, decrement them.
                     3487  ;****************************************************************************
                     3488  
 8770 [03] B642      3489       lda     Sw0AR              ; Load accumulator with value in "Sw0AR"
                     3490                                  ; variable
 8772 [03] 2702      3491       beq     SW0AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3492                                  ; SW0AR_CHK_DONE:
 8774 [04] 3A42      3493       dec     Sw0AR              ; Decrement "Sw0AR" variable
                     3494  
                     3495  SW0AR_CHK_DONE:
                     3496  
 8776 [03] B645      3497       lda     Sw1AR              ; Load accumulator with value in "Sw1AR"
                     3498                                  ; variable
 8778 [03] 2702      3499       beq     SW1AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3500                                  ; SW1AR_CHK_DONE:
 877A [04] 3A45      3501       dec     Sw1AR              ; Decrement "Sw1AR" variable
                     3502  
                     3503  SW1AR_CHK_DONE:
                     3504  
 877C [03] B648      3505       lda     Sw2AR              ; Load accumulator with value in "Sw2AR"
                     3506                                  ; variable
 877E [03] 2702      3507       beq     SW2AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3508                                  ; SW2AR_CHK_DONE:
 8780 [04] 3A48      3509       dec     Sw2AR              ; Decrement "Sw2AR" variable
                     3510  
                     3511  SW2AR_CHK_DONE:
                     3512  
 8782 [03] B64B      3513       lda     Sw3AR              ; Load accumulator with value in "Sw3AR"
                     3514                                  ; variable
 8784 [03] 2702      3515       beq     SW3AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3516                                  ; SW3AR_CHK_DONE:
 8786 [04] 3A4B      3517       dec     Sw3AR              ; Decrement "Sw3AR" variable
                     3518  
                     3519  SW3AR_CHK_DONE:
                     3520  
                     3521  
                     3522  ;****************************************************************************
                     3523  ; - Increment 5 millisecond counter
                     3524  ;****************************************************************************
                     3525  
                     3526  INC_mSx5:
 8788 [03] 3F5C      3527       clr     mS                  ; Clear Millisecond counter
 878A [04] 3C5D      3528       inc     mSx5                ; Increment 5 Millisecond counter
 878C [03] B65D      3529       lda     mSx5                ; Load accumulator with value in
                     3530                                   ; 5 Millesecond counter
 878E [02] A132      3531       cmp     #$32                ; Compare it with decimal 50
 8790 [03] 2617      3532       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                     3533                                   ; branch to TIM2CH0_ISR_DONE:
                     3534  
                     3535  ;============================================================================
                     3536  ;************************* 250 Millisecond section **************************
                     3537  ;============================================================================
                     3538  
                     3539  
                     3540  ;***************************************************************************
                     3541  ; - If we are in display mode, and in any of the real time display screens,
                     3542  ;   send a command byte to MS_ECU to update the real time variables.
                     3543  ;***************************************************************************
                     3544  
 8792 [05] 005312    3545       brset   mde,flags,UPDATE_DONE     ; If "mde" bit of "flags" varialbe
                     3546                                         ; is set, branch to UPDATE_DONE:
                     3547                                         ;(We are in "Configure" mode)
 8795 [03] B654      3548       lda     ScrnCnt                   ; Load accumulator with value in
                     3549                                         ; "ScrnCnt" variable
 8797 [02] A107      3550       cmp     #$07                      ; Compare with decimal 7(Last of
                     3551                                         ; the real time display screens)
 8799 [03] 220C      3552       bhi     UPDATE_DONE               ; If (A)>($07), branch to
                     3553                                         ; UPDATE_DONE:
                     3554  
                     3555  ;***************************************************************************
                     3556  ; - Send the letter 'A' command to update the real time variables.
                     3557  ;***************************************************************************
                     3558  
 879B [03] B616      3559       lda     SCS1                    ; Load accumulator with value in SCI
                     3560                                       ; Control Register 1
                     3561                                       ;(Clear transmitter empty bit)
                     3562                                       ;(Clears all by read)
 879D [04] 6E4118    3563       mov     #'A',SCDR               ; Move ASCII'A' to SCI Data Register
                     3564                                       ;(Transmitter is running, so data
                     3565                                       ; shift starts now!)
 87A0 [03] 3F5E      3566       clr     ByteCnt                 ; Clear "ByteCnt" variable
 87A2 [04] 6E225F    3567       mov     #$22,ByteGoal           ; Move decimal 34 into "ByteGoal"
                     3568                                       ;(one more than the number of real
                     3569                                       ; time variables for display (33)
                     3570  
                     3571  ;**************************************************************************
                     3572  ; - Enable receiver full interrupt.
                     3573  ;**************************************************************************
                     3574  
 87A5 [04] 1A14      3575       bset    SCRIE,SCC2     ; Set "SCRIE" bit of SCI Control Register 2
                     3576                              ;(SCRF enabled to generate CPU Interrupt)
                     3577  
                     3578  UPDATE_DONE:
 87A7 [03] 3F5D      3579       clr     mSx5           ; Clear 5 Millisecond counter
                     3580  
                     3581  TIM2CH0_ISR_DONE:
 87A9 [02] 8A        3582       pulh                  ; Pull value from stack to index register Hi byte
 87AA [07] 80        3583       rti                   ; Return from interrupt
                     3584  
                     3585  
                     3586  ;***************************************************************************
                     3587  ;
                     3588  ; ---------------- MS_ECU Serial Communications Interface -----------------
                     3589  ;


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 33
MV_TECA


                     3590  ; Communications are established when a command character is sent, the
                     3591  ; particular character sets the mode:
                     3592  ;
                     3593  ; "A" = Receive realtime variables via txport.(36 bytes)(MS->MV)
                     3594  ; "V" = Receive the VE table and constants via txport (128 bytes)(MS->MV)
                     3595  ; "W"+delay+<offset>+delay+<new byte> = Send new VE table or constant
                     3596  ;                          byte value and store in offset location(MV->MS)
                     3597  ; "B" = Jump to flash burner routine and burn VE table and constants,
                     3598  ;       and ST table and constants values in MS_ECU RAM into flash ROM
                     3599  ; "I" = Receive the ST table and constants via txport (80 bytes)(MS->MV)
                     3600  ; "J"+delay+<offset>+delay+<new byte> = Send new ST table or constant
                     3601  ;                          byte value and store in offset location(MV->MS)
                     3602  ;
                     3603  ;***************************************************************************
                     3604  
                     3605  ;***************************************************************************
                     3606  ;===========================================================================
                     3607  ; - SCI Receive Interrupt
                     3608  ;===========================================================================
                     3609  ;***************************************************************************
                     3610  
                     3611  ;***************************************************************************
                     3612  ; - Enter here when have received RS 232 byte
                     3613  ;   (SCRF bit of SCS1 set)
                     3614  ;***************************************************************************
                     3615  
                     3616  SCIRCV_ISR:
 87AB [02] 8B        3617       pshh                 ; Push value in index register Hi byte to Stack
                     3618  
                     3619  ;***************************************************************************
                     3620  ; - Clear status register to allow next interrupt
                     3621  ;***************************************************************************
                     3622  
 87AC [03] B616      3623       lda     SCS1     ; Load accumulator with value in SCI Register 1
                     3624  
                     3625  ;***************************************************************************
                     3626  ; - Transfer received byte from register to buffer
                     3627  ;***************************************************************************
                     3628  
 87AE [03] B618      3629       lda     SCDR        ; Load accumulator with value in SCI Data Register
 87B0 [03] B760      3630       sta     readbuf     ; Copy to "readbuf" variable
                     3631  
                     3632  ;***************************************************************************
                     3633  ; - Check to see what mode we are in, and branch accordingly
                     3634  ;***************************************************************************
                     3635  
 87B2 [05] 005309    3636       brset   mde,flags,RCVNG_CON   ; If "mde" bit of "flags" variable is
                     3637                                     ; set, branch to RCVNG_CON:
                     3638                                     ;(in Config mode)
                     3639  
                     3640  ;***************************************************************************
                     3641  ; - We are in "Display" mode, transfer received byte from buffer to real
                     3642  ;   time variable.
                     3643  ;***************************************************************************
                     3644  
                     3645  RCVNG_VAR:
 87B5 [03] BE5E      3646       ldx     ByteCnt           ; Load index register Lo byte with value in
                     3647                                 ; "ByteCnt" variable
 87B7 [01] 8C        3648       clrh                      ; Clear index register hi byte
 87B8 [03] B660      3649       lda     readbuf           ; Load accumulator with value in "readbuf"
 87BA [03] E7B1      3650       sta     SecH,x            ; Copy to address at "SecH", offset in index
                     3651                                 ; register Lo byte
 87BC [03] 201A      3652       bra     NEXT_RCV_BYTE     ; Branch to NEXT_RCV_BYTE:
                     3653  
                     3654  
                     3655  ;***************************************************************************
                     3656  ; - We are in "Configure" mode. Check the "flags" variable to determine
                     3657  ;   where the received bytes should go.
                     3658  ;***************************************************************************
                     3659  
                     3660  RCVNG_CON:
 87BE [05] 065306    3661       brset   RcvG1,flags,RCVNG_G1      ; If "RcvG1" bit of "flags" variable
                     3662                                         ; is set, branch to RCVNG_G1:
 87C1 [05] 08530C    3663       brset   RcvG2,flags,RCVNG_G2      ; If "RcvG2" bit of "flags" variable
                     3664                                         ; is set, branch to RCVNG_G2:
 87C4 [03] CC87E4    3665       jmp     SCIRCV_ISR_DONE           ; Jump to SCIRCV_ISR_DONE:
                     3666                                         ;(Sanity check)
                     3667  
                     3668  ;***************************************************************************
                     3669  ; - We are receiving data from the Cons Grp1. Transfer received byte from
                     3670  ;   buffer to configurable constant.
                     3671  ;***************************************************************************
                     3672  
                     3673  RCVNG_G1:
 87C7 [03] BE5E      3674       ldx     ByteCnt          ; Load index register Lo byte with value in
                     3675                                ; "ByteCnt" variable
 87C9 [01] 8C        3676       clrh                     ; Clear index register hi byte
 87CA [03] B660      3677       lda     readbuf          ; Load accumulator with value in "readbuf"
 87CC [03] E7D2      3678       sta     TO_0_0,x         ; Copy to address at "TO_0_0", offset in
                     3679                                ; index register Lo byte
                     3680  
 87CE [03] 2008      3681       bra     NEXT_RCV_BYTE    ; Branch to NEXT_RCV_BYTE:
                     3682  
                     3683  ;***************************************************************************
                     3684  ; - We are receiving data from Cons Grp2. Transfer received byte from
                     3685  ;   buffer to configurable constant.
                     3686  ;***************************************************************************
                     3687  
                     3688  RCVNG_G2:
 87D0 [03] BE5E      3689       ldx     ByteCnt          ; Load index register Lo byte with value in
                     3690                                ; "ByteCnt" variable
 87D2 [01] 8C        3691       clrh                     ; Clear index register hi byte
 87D3 [03] B660      3692       lda     readbuf          ; Load accumulator with value in "readbuf"
 87D5 [04] D70152    3693       sta     EPC_TCC,x        ; Copy to address at "EPC_TCC", offset in
                     3694                                ; index register Lo byte
                     3695  
                     3696  NEXT_RCV_BYTE:
 87D8 [04] 3C5E      3697       inc     ByteCnt          ; Increment value in "ByteCnt"(ByteCnt=ByteCnt+1)
 87DA [03] B65E      3698       lda     ByteCnt          ; Load accumulator w3ith value in "ByteCnt"
 87DC [03] B15F      3699       cmp     ByteGoal         ; Compare value in accumulator (ByteCnt")to
                     3700                                ; value in "ByteGoal" variable
 87DE [03] 2304      3701       bls     SCIRCV_ISR_DONE  ; If C or Z bits of CCR are set,(A<=M),
                     3702                                ; branch to SCIRCV_ISR_DONE:
                     3703  
                     3704  ;***************************************************************************
                     3705  ; - Done receiving - kill receive interrupt enable
                     3706  ;***************************************************************************
                     3707  
 87E0 [03] 3F5E      3708       clr     ByteCnt           ; Clear "ByteCnt" variable
 87E2 [04] 1B14      3709       bclr    SCRIE,SCC2        ; Clear "SCRIE" bit of SCI Control Register 2
                     3710                                 ;(SCRF not enabled to generate CPU interrupt)
                     3711  
                     3712  SCIRCV_ISR_DONE:
 87E4 [02] 8A        3713       pulh                ; Pull value from stack to index register Hi byte
 87E5 [07] 80        3714       rti                 ; Return from interrupt
                     3715  
                     3716  
                     3717  ;**************************************************************************
                     3718  ;==========================================================================
                     3719  ; - SCI Transmit Interrupt
                     3720  ;==========================================================================
                     3721  ;**************************************************************************
                     3722  
                     3723  ;**************************************************************************
                     3724  ; - Enter here when the RS232 transmit buffer is empty
                     3725  ;   (SCTE bit of SCS1 is set)(Not used)


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 34
MV_TECA


                     3726  ;**************************************************************************
                     3727  
                     3728  SCITX_ISR:
 87E6 [07] 80        3729       rti                ; Return from interrupt
                     3730  
                     3731  
                     3732  ;**************************************************************************
                     3733  ;==========================================================================
                     3734  ;- Dummy ISR vector ( This should never be called, but, just in case.)
                     3735  ;==========================================================================
                     3736  ;**************************************************************************
                     3737  
                     3738  Dummy:
 87E7 [07] 80        3739       rti     ; Return from interrupt
                     3740  
                     3741  
                     3742  ;***************************************************************************
                     3743  ;
                     3744  ; ---------------------------- SUBROUTINES --------------------------------
                     3745  ;
                     3746  ;  - SW0_CHK
                     3747  ;  - SW1_CHK
                     3748  ;  - SW2_CHK
                     3749  ;  - SW3_CHK
                     3750  ;  - DELAY300
                     3751  ;  - BUTTON_WAIT
                     3752  ;  - PRNT_TOPLN_DSP
                     3753  ;  - LOAD_SPACE
                     3754  ;  - UPDATE_CON
                     3755  ;  - CONV_8BIT_ASCII
                     3756  ;  - LOAD_1ST_3
                     3757  ;  - LOAD_2ND_3
                     3758  ;  - LOAD_3D_3
                     3759  ;  - LOAD_4TH_3
                     3760  ;  - LOAD_5TH_3
                     3761  ;  - PRINT_LINE
                     3762  ;  - CHANGE_MODE
                     3763  ;  - GET_VECT_ADDR
                     3764  ;  - ADD_A_TO_HX
                     3765  ;  - LDA_W_HX_PL_A
                     3766  ;  - VFD_START_TOP
                     3767  ;  - VFD_START_BOT
                     3768  ;  - VFD_SEND
                     3769  ;  - Long Delay(for VFD instruction/data transfer)
                     3770  ;  - Short Delay(for VFD instruction/data transfer)
                     3771  ;  - VFD Display
                     3772  ;  - CMP_BOTLIN
                     3773  ;  - Ordered Table Search
                     3774  ;  - Linear Interpolation
                     3775  ;  - 32 x 16 divide
                     3776  ;  - Round after division
                     3777  ;  - 16 x 16 multiply
                     3778  ;***************************************************************************
                     3779  
                     3780  
                     3781  ;****************************************************************************
                     3782  ; - This subroutine checks the state of the Display Scroll Left / Decrease
                     3783  ;   Selected Variable button on PTA0 and updates the switch status flag.
                     3784  ;   The switch status flag is cleared every pass through the main loop after
                     3785  ;   the routine relevent to that flag is completed.
                     3786  ;   Edge detection is provided from both open to closed, and closed to open.
                     3787  ;   Auto-repeat at 2HZ is commanded as long as the contacts remain closed
                     3788  ;   for a period of 1 second or more.
                     3789  ;   Auto-repeat is prevented in the open state.
                     3790  ;****************************************************************************
                     3791  
                     3792  SW0_CHK:
 87E8 [03] B640      3793       lda     Sw0DB                ; Load accumulator with value in Switch
                     3794                                    ; #0 de-bounce counter variable
 87EA [03] 2642      3795       bne     SW0_CHK_DONE         ; If Z bit of CCR is clear, branch to
                     3796                                    ; SW0_CHK_DONE: ("Sw0DB" not = 0,
                     3797                                    ; de-bounce in progress, skip over)
 87EC [05] 00002D    3798       brset   Sw0,porta,SW0_OPN    ; If "Sw0" bit of Port A is set,(Hi)
                     3799                                    ; branch to Sw0_OPN: (contacts are open)
 87EF [05] 004C08    3800       brset   Sw0LP,LPflags,SW0_ARC_CHK  ; If "Sw0LP" bit of "LPflags"
                     3801                               ; variable is set, branch to SW0_ARC_CHK:
                     3802                               ; (contacts closed, bit is already set,
                     3803                               ; check for auto-repeat command)
 87F2 [04] 6E6440    3804       mov     #$64,Sw0DB      ; Move decimal 100 into Switch #0
                     3805                               ; de-bounce counter variable (100mS)
 87F5 [04] 104C      3806       bset    Sw0LP,LPflags   ; Set "Sw0LP" bit of "LPflags" variable
 87F7 [03] CC8815    3807       jmp     SW0_CLS         ; Jump to SW0_CLS:
                     3808  
                     3809  SW0_ARC_CHK:
 87FA [05] 004D08    3810       brset   Sw0LP,ARCflags,SW0_ARC_PROG  ; If "Sw0LP" bit of "ARCflags"
                     3811                               ; variable is set, branch to SW0_ARC_PROG:
                     3812                               ;(auto-repeat command check in progress)
 87FD [04] 6EC841    3813       mov     #$C8,Sw0ARC     ; Move decimal 200 into Switch #0
                     3814                               ; auto-repeat command counter variable(1Sec)
 8800 [04] 104D      3815       bset    Sw0LP,ARCflags  ; Set "Sw0LP" bit of "ARCflags" variable
 8802 [03] CC882E    3816       jmp     SW0_CHK_DONE    ; Jump to SW0_CHK_DONE:
                     3817  
                     3818  SW0_ARC_PROG:
 8805 [03] B641      3819       lda     Sw0ARC              ; Load accumulator with value in Switch
                     3820                                   ; #0 auto repeat command timer counter
 8807 [03] 2625      3821       bne     SW0_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     3822                                   ; SW0_CHK_DONE: ("Sw0ARC" not = 0,
                     3823                                   ; auto-repeat command check in progress,
                     3824                                   ; skip over)
 8809 [05] 004E05    3825       brset   Sw0LP,ARflags,SW0_AR_PROG   ; If "Sw0LP" bit of "ARflags"
                     3826                                   ; variable is set, branch to SW0_AR_PROG:
                     3827                                   ;(auto-repeat check in progress)
 880C [04] 6E6442    3828       mov     #$64,Sw0AR          ; Move decimal 100 into Contact Set #0
                     3829                                   ; auto-repeat counter variable(500mS)
 880F [04] 104E      3830       bset    Sw0LP,ARflags       ; Set "Sw0LP" bit of "ARflags" variable
                     3831  
                     3832  SW0_AR_PROG:
 8811 [03] B642      3833       lda     Sw0AR               ; Load accumulator with value in Contact
                     3834                                   ; Set #0 auto repeat timer counter var
 8813 [03] 2619      3835       bne     SW0_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     3836                                   ; SW0_CHK_DONE: ("Sw0DB" not = 0,
                     3837                                   ; auto-repeat check in progress,
                     3838                                   ; skip over)
                     3839  SW0_CLS:
 8815 [04] 104F      3840       bset    Sw0cls,Swflags      ; Set "Sw0cls" bit of "Swflags" variable
 8817 [04] 114E      3841       bclr    Sw0LP,ARflags       ; Clear "Sw0LP" bit of "ARflags" variable
 8819 [03] CC882E    3842       jmp     SW0_CHK_DONE        ; Jump to SW0_CHK_DONE:
                     3843  
                     3844  SW0_OPN:
 881C [05] 014C0F    3845       brclr   Sw0LP,LPflags,SW0_CHK_DONE  ; If "Sw0LP" bit of "LPflags"
                     3846                                ; variable is clear, branch to SW0_CHK_DONE:
                     3847                                ; (contact set open, and bit is already
                     3848                                ; clear, so skip over)
 881F [04] 6E6440    3849       mov     #$64,Sw0DB       ; Move decimal 100 into Contact Set #0
                     3850                                ; de-bounce counter variable (100mS)
 8822 [04] 114C      3851       bclr    Sw0LP,LPflags    ; Clear "Sw0LP" bit of "LPflags" variable
 8824 [03] 3F42      3852       clr     Sw0AR            ; Clear Sw0 auto-repeat timer counter
 8826 [04] 114E      3853       bclr    Sw0LP,ARflags    ; Clear "Sw0LP" bit of "ARflags" variable
 8828 [03] 3F41      3854       clr     Sw0ARC           ; Clear "Sw0" auto-repeat command timer counter
 882A [04] 114D      3855       bclr    Sw0LP,ARCflags   ; Clear "Sw0LP" bit of "ARCflags" variable
 882C [04] 114F      3856       bclr    Sw0cls,Swflags   ; Clear "Sw0cls" bit of "Swflags" variable
                     3857  
                     3858  SW0_CHK_DONE:
 882E [04] 81        3859       rts                      ; Return from subroutine
                     3860  
                     3861  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 35
MV_TECA


                     3862  ;****************************************************************************
                     3863  ; - This subroutine checks the state of the Display Scroll Right / Increase
                     3864  ;   Selected Variable button on PTA1 and updates the switch status flag.
                     3865  ;   The switch status flag is cleared every pass through the main loop after
                     3866  ;   the routine relevent to that flag is completed.
                     3867  ;   Edge detection is provided from both open to closed, and closed to open.
                     3868  ;   Auto-repeat at 2HZ is commanded as long as the contacts remain closed
                     3869  ;   for a period of 1 second or more.
                     3870  ;   Auto-repeat is prevented in the open state.
                     3871  ;****************************************************************************
                     3872  
                     3873  SW1_CHK:
 882F [03] B643      3874       lda     Sw1DB                ; Load accumulator with value in Switch
                     3875                                    ; #1 de-bounce counter variable
 8831 [03] 2642      3876       bne     SW1_CHK_DONE         ; If Z bit of CCR is clear, branch to
                     3877                                    ; SW1_CHK_DONE: ("Sw0DB" not = 0,
                     3878                                    ; de-bounce in progress, skip over)
 8833 [05] 02002D    3879       brset   Sw1,porta,SW1_OPN    ; If "Sw1" bit of Port A is set,(Hi)
                     3880                                    ; branch to Sw1_OPN: (contacts are open)
 8836 [05] 024C08    3881       brset   Sw1LP,LPflags,SW1_ARC_CHK  ; If "Sw1LP" bit of "LPflags"
                     3882                               ; variable is set, branch to SW1_ARC_CHK:
                     3883                               ; (contacts closed, bit is already set,
                     3884                               ; check for auto-repeat command)
 8839 [04] 6E6443    3885       mov     #$64,Sw1DB      ; Move decimal 100 into Switch #1
                     3886                               ; de-bounce counter variable (100mS)
 883C [04] 124C      3887       bset    Sw1LP,LPflags   ; Set "Sw1LP" bit of "LPflags" variable
 883E [03] CC885C    3888       jmp     SW1_CLS         ; Jump to SW1_CLS:
                     3889  
                     3890  SW1_ARC_CHK:
 8841 [05] 024D08    3891       brset   Sw1LP,ARCflags,SW1_ARC_PROG  ; If "Sw1LP" bit of "ARCflags"
                     3892                               ; variable is set, branch to SW1_ARC_PROG:
                     3893                               ;(auto-repeat command check in progress)
 8844 [04] 6EC844    3894       mov     #$C8,Sw1ARC     ; Move decimal 200 into Switch #1
                     3895                               ; auto-repeat command counter variable(1Sec)
 8847 [04] 124D      3896       bset    Sw1LP,ARCflags  ; Set "Sw1LP" bit of "ARCflags" variable
 8849 [03] CC8875    3897       jmp     SW1_CHK_DONE    ; Jump to SW1_CHK_DONE:
                     3898  
                     3899  SW1_ARC_PROG:
 884C [03] B644      3900       lda     Sw1ARC              ; Load accumulator with value in Switch
                     3901                                   ; #0 auto repeat command timer counter
 884E [03] 2625      3902       bne     SW1_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     3903                                   ; SW1_CHK_DONE: ("Sw1ARC" not = 0,
                     3904                                   ; auto-repeat command check in progress,
                     3905                                   ; skip over)
 8850 [05] 024E05    3906       brset   Sw1LP,ARflags,SW1_AR_PROG   ; If "Sw1LP" bit of "ARflags"
                     3907                                   ; variable is set, branch to SW1_AR_PROG:
                     3908                                   ;(auto-repeat check in progress)
 8853 [04] 6E6445    3909       mov     #$64,Sw1AR          ; Move decimal 100 into Contact Set #1
                     3910                                   ; auto-repeat counter variable(500mS)
 8856 [04] 124E      3911       bset    Sw1LP,ARflags       ; Set "Sw1LP" bit of "ARflags" variable
                     3912  
                     3913  SW1_AR_PROG:
 8858 [03] B645      3914       lda     Sw1AR               ; Load accumulator with value in Contact
                     3915                                   ; Set #1 auto repeat timer counter var
 885A [03] 2619      3916       bne     SW1_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     3917                                   ; SW1_CHK_DONE: ("Sw1DB" not = 0,
                     3918                                   ; auto-repeat check in progress,
                     3919                                   ; skip over)
                     3920  SW1_CLS:
 885C [04] 124F      3921       bset    Sw1cls,Swflags      ; Set "Sw1cls" bit of "Swflags" variable
 885E [04] 134E      3922       bclr    Sw1LP,ARflags       ; Clear "Sw1LP" bit of "ARflags" variable
 8860 [03] CC8875    3923       jmp     SW1_CHK_DONE        ; Jump to SW1_CHK_DONE:
                     3924  
                     3925  SW1_OPN:
 8863 [05] 034C0F    3926       brclr   Sw1LP,LPflags,SW1_CHK_DONE  ; If "Sw1LP" bit of "LPflags"
                     3927                                ; variable is clear, branch to SW1_CHK_DONE:
                     3928                                ; (contact set open, and bit is already
                     3929                                ; clear, so skip over)
 8866 [04] 6E6443    3930       mov     #$64,Sw1DB       ; Move decimal 100 into Contact Set #1
                     3931                                ; de-bounce counter variable (100mS)
 8869 [04] 134C      3932       bclr    Sw1LP,LPflags    ; Clear "Sw1LP" bit of "LPflags" variable
 886B [03] 3F45      3933       clr     Sw1AR            ; Clear "Sw1" auto-repeat timer counter
 886D [04] 134E      3934       bclr    Sw1LP,ARflags    ; Clear "Sw1LP" bit of "ARflags" variable
 886F [03] 3F44      3935       clr     Sw1ARC           ; Clear "Sw1" auto-repeat command timer counter
 8871 [04] 134D      3936       bclr    Sw1LP,ARCflags   ; Clear "Sw1LP" bit of "ARCflags" variable
 8873 [04] 134F      3937       bclr    Sw1cls,Swflags   ; Clear "Sw1cls" bit of "Swflags" variable
                     3938  
                     3939  SW1_CHK_DONE:
 8875 [04] 81        3940       rts                      ; Return from subroutine
                     3941  
                     3942  
                     3943  ;****************************************************************************
                     3944  ; - This subroutine checks the state of the Display Freeze / Select
                     3945  ;   Configuration variable button on PTA2 and updates the switch status flag.
                     3946  ;   The switch status flag is cleared every pass through the main loop after
                     3947  ;   the routine relevent to that flag is completed.
                     3948  ;   Edge detection is provided from both open to closed, and closed to open.
                     3949  ;   Auto-repeat is prevented in both states.
                     3950  ;****************************************************************************
                     3951  
                     3952  SW2_CHK:
 8876 [03] B646      3953       lda     Sw2DB                ; Load accumulator with value in Switch
                     3954                                    ; #2 de-bounce counter variable
 8878 [03] 2619      3955       bne     SW2_CHK_DONE         ; If Z bit of CCR is clear, branch to
                     3956                                    ; SW2_CHK_DONE: ("Sw2DB" not = 0,
                     3957                                    ; de-bounce in progress, skip over)
 887A [05] 04000C    3958       brset   Sw2,porta,SW2_OPN    ; If "Sw2" bit of Port A is set,(Hi)
                     3959                                    ; branch to SW2_OPN: (contacts are open)
 887D [05] 044C13    3960       brset   Sw2LP,LPflags,SW2_CHK_DONE  ; If "Sw2LP" bit of "LPflags"
                     3961                                ; variable is set, branch to SW2_CHK_DONE:
                     3962                                ;(contacts are closed, but bit is already
                     3963                                ; set, so skip over)
 8880 [04] 6E6446    3964       mov     #$64,Sw2DB       ; Move decimal 100 into Switch #2
                     3965                                ; de-bounce counter variable (100mS)
 8883 [04] 144C      3966       bset    Sw2LP,LPflags    ; Set "Sw2LP" bit of "LPflags" variable
 8885 [04] 144F      3967       bset    Sw2cls,Swflags   ; Set "Sw2cls" bit of "Swflags" variable
 8887 [03] 200A      3968       bra     SW2_CHK_DONE     ; Branch to SW2_CHK_DONE:
                     3969  
                     3970  SW2_OPN:
 8889 [05] 054C07    3971       brclr   Sw2LP,LPflags,SW2_CHK_DONE  ; If "Sw2LP" bit of "LPflags"
                     3972                                ; variable is clear, branch to SW2_CHK_DONE:
                     3973                                ; (contacts are open, but bit is already
                     3974                                ; clear, so skip over)
 888C [04] 6E6446    3975       mov     #$64,Sw2DB       ; Move decimal 100 into Switch #2
                     3976                                ; de-bounce counter variable (100mS)
 888F [04] 154C      3977       bclr    Sw2LP,LPflags    ; Clear "Sw2LP" bit of "LPflags" variable
 8891 [04] 154F      3978       bclr    Sw2cls,Swflags   ; Clear "Sw2cls" bit of "Swflags" variable
                     3979  
                     3980  SW2_CHK_DONE:
 8893 [04] 81        3981       rts                      ; Return from subroutine
                     3982  
                     3983  
                     3984  ;****************************************************************************
                     3985  ; - This subroutine checks the state of the Toggle Mode, Display /
                     3986  ;   Configure button on PTA3 and updates the switch status flag.
                     3987  ;   The switch status flag is cleared every pass through the main loop after
                     3988  ;   the routine relevent to that flag is completed.
                     3989  ;   Edge detection is provided from both open to closed, and closed to open.
                     3990  ;   Auto-repeat is prevented in both states.
                     3991  ;****************************************************************************
                     3992  
                     3993  SW3_CHK:
 8894 [03] B649      3994       lda     Sw3DB                ; Load accumulator with value in Switch
                     3995                                    ; #3 de-bounce counter variable
 8896 [03] 2619      3996       bne     SW3_CHK_DONE         ; If Z bit of CCR is clear, branch to
                     3997                                    ; SW3_CHK_DONE: ("Sw3DB" not = 0,


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 36
MV_TECA


                     3998                                    ; de-bounce in progress, skip over)
 8898 [05] 06000C    3999       brset   Sw3,porta,SW3_OPN    ; If "Sw3" bit of Port A is set,(Hi)
                     4000                                    ; branch to SW3_OPN: (contacts are open)
 889B [05] 064C13    4001       brset   Sw3LP,LPflags,SW3_CHK_DONE  ; If "Sw3LP" bit of "LPflags"
                     4002                                ; variable is set, branch to SW3_CHK_DONE:
                     4003                                ;(contacts are closed, but bit is already
                     4004                                ; set, so skip over)
 889E [04] 6E6449    4005       mov     #$64,Sw3DB       ; Move decimal 100 into Switch #3
                     4006                                ; de-bounce counter variable (100mS)
 88A1 [04] 164C      4007       bset    Sw3LP,LPflags    ; Set "Sw3LP" bit of "LPflags" variable
 88A3 [04] 164F      4008       bset    Sw3cls,Swflags   ; Set "Sw3cls" bit of "Swflags" variable
 88A5 [03] 200A      4009       bra     SW3_CHK_DONE     ; Branch to SW3_CHK_DONE:
                     4010  
                     4011  SW3_OPN:
 88A7 [05] 074C07    4012       brclr   Sw3LP,LPflags,SW3_CHK_DONE  ; If "Sw3LP" bit of "LPflags"
                     4013                                ; variable is clear, branch to SW3_CHK_DONE:
                     4014                                ; (contacts are open, but bit is already
                     4015                                ; clear, so skip over)
 88AA [04] 6E6449    4016       mov     #$64,Sw3DB       ; Move decimal 100 into Switch #3
                     4017                                ; de-bounce counter variable (100mS)
 88AD [04] 174C      4018       bclr    Sw3LP,LPflags    ; Clear "Sw3LP" bit of "LPflags" variable
 88AF [04] 174F      4019       bclr    Sw3cls,Swflags   ; Clear "Sw3cls" bit of "Swflags" variable
                     4020  
                     4021  SW3_CHK_DONE:
 88B1 [04] 81        4022       rts                      ; Return from subroutine
                     4023  
                     4024  
                     4025  ;***************************************************************************
                     4026  ; - This subroutine is a ~300mS delay used at start up for power
                     4027  ;   stabilization and between transmit bytes for downloading VE and ST
                     4028  ;   constants.
                     4029  ;***************************************************************************
                     4030  
                     4031  DELAY300:
 88B2 [03] 3F9B      4032       clr     tmp1     ; Clear tmp1 variable
                     4033  
                     4034  WAIT_1:
 88B4 [03] 3F9C      4035       clr     tmp2     ; Clear tmp2 variable
                     4036  
                     4037  WAIT_2:
 88B6 [03] 3F9D      4038       clr     tmp3     ; Clear tmp3 variable
                     4039  
                     4040  WAIT_3:
 88B8 [03] B69D      4041       lda     tmp3     ; Load accumulator with value in tmp3
 88BA [01] 4C        4042       inca             ; Increment value in accumulator
 88BB [03] B79D      4043       sta     tmp3     ; Copy to tmp3
 88BD [02] A1C8      4044       cmp     #$C8     ; Compare value in accumulator with decimal 200
 88BF [03] 25F7      4045       blo     WAIT_3   ; If C bit of CCR is set, (A<M), branch to WAIT_3:
 88C1 [03] B69C      4046       lda     tmp2     ; Load accumulator with value in tmp2
 88C3 [01] 4C        4047       inca             ; Increment value in accumulator
 88C4 [03] B79C      4048       sta     tmp2     ; Copy to tmp2
 88C6 [02] A1C8      4049       cmp     #$C8     ; Compare value in accumulator with decimal 200
 88C8 [03] 25EC      4050       blo     WAIT_2   ; If C bit of CCR is set, (A<M), branch to WAIT_2:
 88CA [03] B69B      4051       lda     tmp1     ; Load accumulator with value in tmp1
 88CC [01] 4C        4052       inca             ; Increment value in accumulator
 88CD [03] B79B      4053       sta     tmp1     ; Copy to tmp1
 88CF [02] A105      4054       cmp     #$05     ; Compare value in accumulator with decimal 5
 88D1 [03] 25E1      4055       blo     WAIT_1   ; If C bit of CCR is set, (A<M), branch to WAIT_1:
 88D3 [04] 81        4056       rts              ; Return from subroutine
                     4057  
                     4058  
                     4059  ;***************************************************************************
                     4060  ; -  This subroutine is a loop, waiting for the prompted press of the
                     4061  ;    Display/Configure button.
                     4062  ;***************************************************************************
                     4063  
                     4064  BUTTON_WAIT:
                     4065  ;***************************************************************************
                     4066  ; -  Wait for first button press return.
                     4067  ;***************************************************************************
                     4068  
                     4069  BTN_WAIT1:
 88D4 [05] CD8894    4070       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     4071                                         ;(Check he state of the Toggle Mode,
                     4072                                         ; Display / Configure button
                     4073                                         ; on PTA3)
                     4074  
 88D7 [05] 064FFA    4075       brset   Sw3cls,Swflags,BTN_WAIT1  ; If "Sw3cls" bit of "Swflags"
                     4076                                         ; variable is set, branch to
                     4077                                         ; BTN_WAIT1
                     4078                                         ;(Toggle Mode button is still
                     4079                                         ; pressed, loop back)
                     4080  
                     4081  ;***************************************************************************
                     4082  ; -  Wait for second button press.
                     4083  ;***************************************************************************
                     4084  
                     4085  BTN_WAIT2:
 88DA [05] CD8894    4086       jsr     SW3_CHK                   ; Jump to subroutine at SW3_CHK:
                     4087                                         ;(Check he state of the Toggle Mode,
                     4088                                         ; Display / Configure button
                     4089                                         ; on PTA3)
                     4090  
 88DD [05] 074FFA    4091       brclr   Sw3cls,Swflags,BTN_WAIT2  ; If "Sw3cls" bit of "Swflags"
                     4092                                         ; variable is clear, branch to
                     4093                                         ; BTN_WAIT1
                     4094                                         ;(Toggle Mode button is still
                     4095                                         ; not pressed, loop back)
 88E0 [04] 81        4096       rts                               ; Return from subroutine
                     4097  
                     4098  
                     4099  ;****************************************************************************
                     4100  ; - This subroutine prints the top line of the VFD while in "Display" mode
                     4101  ;****************************************************************************
                     4102  
                     4103  PRNT_TOPLN_DSP:
                     4104  
                     4105  ;****************************************************************************
                     4106  ; - Set up the VFD to place the first character in the top line, extreme
                     4107  ;   left hand position
                     4108  ;****************************************************************************
                     4109  
 88E1 [05] CD89F4    4110       jsr     VFD_START_TOP     ; Jump to subroutine at VFD_START_TOP:
                     4111  
                     4112  ;***************************************************************************
                     4113  ; - Using the Variables Top Line Table Index vector table, and the "ScrnCnt"
                     4114  ;   offset value, load H:X with the address of the desired Variables Top
                     4115  ;   Line Table.
                     4116  ;***************************************************************************
                     4117  
 88E4 [03] 45F828    4118       ldhx    #VARS_TL_TB_IND    ; Load index register with the address of
                     4119                                  ; the first value in the Variables Top Line
                     4120                                  ; Table Index vector table
 88E7 [03] B654      4121       lda     ScrnCnt            ; Load accumulator with the value in "ScrnCnt"
 88E9 [05] CD89BD    4122       jsr     GET_VECT_ADDR      ; Jump to subroutine at GET_VECT_ADDR:
                     4123  
                     4124  ;***************************************************************************
                     4125  ; - Print the top line of the VFD display
                     4126  ;***************************************************************************
                     4127  
 88EC [05] CD8983    4128       jsr     PRINT_LINE         ; Jump to subroutine at PRINT_LINE:
 88EF [04] 81        4129       rts                        ; Return from subroutine
                     4130  
                     4131  
                     4132  ;***************************************************************************
                     4133  ; - This subroutine initializes bottom line of the VFD with blank spaces


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 37
MV_TECA


                     4134  ;***************************************************************************
                     4135  
                     4136  LOAD_SPACE:
 88F0 [02] A620      4137       lda     #$20         ; Load accumulator with ASCII ' '(space)
 88F2 [03] B768      4138       sta     BotLin0      ; Copy to "BotLin0" variable
 88F4 [03] B769      4139       sta     BotLin1      ; Copy to "BotLin1" variable
 88F6 [03] B76A      4140       sta     BotLin2      ; Copy to "BotLin2" variable
 88F8 [03] B76B      4141       sta     BotLin3      ; Copy to "BotLin3" variable
 88FA [03] B76C      4142       sta     BotLin4      ; Copy to "BotLin4" variable
 88FC [03] B76D      4143       sta     BotLin5      ; Copy to "BotLin5" variable
 88FE [03] B76E      4144       sta     BotLin6      ; Copy to "BotLin6" variable
 8900 [03] B76F      4145       sta     BotLin7      ; Copy to "BotLin7" variable
 8902 [03] B770      4146       sta     BotLin8      ; Copy to "BotLin8" variable
 8904 [03] B771      4147       sta     BotLin9      ; Copy to "BotLin9" variable
 8906 [03] B772      4148       sta     BotLin10     ; Copy to "BotLin10" variable
 8908 [03] B773      4149       sta     BotLin11     ; Copy to "BotLin11" variable
 890A [03] B774      4150       sta     BotLin12     ; Copy to "BotLin12" variable
 890C [03] B775      4151       sta     BotLin13     ; Copy to "BotLin13" variable
 890E [03] B776      4152       sta     BotLin14     ; Copy to "BotLin14" variable
 8910 [03] B777      4153       sta     BotLin15     ; Copy to "BotLin15" variable
 8912 [03] B778      4154       sta     BotLin16     ; Copy to "BotLin16" variable
 8914 [03] B779      4155       sta     BotLin17     ; Copy to "BotLin17" variable
 8916 [03] B77A      4156       sta     BotLin18     ; Copy to "BotLin18" variable
 8918 [03] B77B      4157       sta     BotLin19     ; Copy to "BotLin19" variable
 891A [04] 81        4158       rts                  ; Return from subroutine
                     4159  
                     4160  ;***************************************************************************
                     4161  ; - This subroutine updates the value in the current selected constant.
                     4162  ;   the current constant is selected, and saved as "ConVal". Check if we
                     4163  ;   should increment it, decrement it, or leave it as is.
                     4164  ;***************************************************************************
                     4165  
                     4166  UPDATE_CON:
 891B [05] 004F0D    4167       brset   Sw0cls,Swflags,DECREMENT  ;If "Sw0cls"bit of "Swflags" variable
                     4168                                         ; is set, branch to DECREMENT:
                     4169                                         ;(Scroll Left/Decrement button is
                     4170                                         ; pressed)
 891E [05] 024F03    4171       brset   Sw1cls,Swflags,INCREMENT  ;If "Sw1cls"bit of "Swflags" variable
                     4172                                         ; is set, branch to INCREMENT:
                     4173                                         ;(Scroll Right/Increment button is
                     4174                                         ; pressed)
                     4175  CHK_CHNG_DONE:
 8921 [03] CC892F    4176       jmp     UPDATE_CON_DONE           ; Jump to UPDATE_CON_DONE:
                     4177  
                     4178  INCREMENT:
                     4179  
                     4180  ;****************************************************************************
                     4181  ; - Increment the Constant value.
                     4182  ;****************************************************************************
                     4183  
                     4184  INC_CON:
 8924 [04] 3C5B      4185       inc     ConVal              ; Increment "Conval" variable
                     4186  
                     4187  INC_DONE:
 8926 [04] 134F      4188       bclr    Sw1cls,Swflags      ; Clear "Sw1cls" bit of "Swflags" variable
 8928 [03] CC892F    4189       jmp     UPDATE_CON_DONE     ; Jump to UPDATE_CON_DONE:
                     4190  
                     4191  
                     4192  DECREMENT:
                     4193  
                     4194  ;****************************************************************************
                     4195  ; - Decrement the Constant value.
                     4196  ;****************************************************************************
                     4197  
                     4198  DEC_CON:
 892B [04] 3A5B      4199       dec     ConVal              ; Decrement "ConVal" variable
                     4200  
                     4201  DEC_DONE:
 892D [04] 114F      4202       bclr    Sw0cls,Swflags      ; Clear "Sw0cls" bit of "Swflags" variable
                     4203  
                     4204  UPDATE_CON_DONE:
 892F [04] 81        4205       rts                         ; Return from subroutine
                     4206  
                     4207  
                     4208  ;****************************************************************************
                     4209  ; - This subroutine takes a byte value in the accumulator, transfers it to
                     4210  ;   the index register Lo byte, and converts it to a 3 variable string,
                     4211  ;   stored temporarily in variables "AC_100", AC_10", and "AC_1"
                     4212  ;****************************************************************************
                     4213  
                     4214  CONV_8BIT_ASCII:
 8930 [01] 8C        4215       clrh                      ; Clear index register hi byte
 8931 [01] 97        4216       tax                       ; Transfer value in accumulator to index
                     4217                                 ; register Lo byte(8 bit value)
 8932 [04] D6E700    4218       lda     ASCII_CONV_100,x  ; Load accumulator with value in
                     4219                                 ; ASCII_CONV_100 table, offset in index
                     4220                                 ; register Lo byte(ASCII 100s value)
 8935 [03] B790      4221       sta     AC_100            ; Copy to "AC_100" variable
 8937 [04] D6E800    4222       lda     ASCII_CONV_10,x   ; Load accumulator with value in
                     4223                                 ; ASCII_CONV_10 table, offset in index
                     4224                                 ; register Lo byte(ASCII 10s value)
 893A [03] B791      4225       sta     AC_10             ; Copy to "AC_10" variable
 893C [04] D6E900    4226       lda     ASCII_CONV_1,x    ; Load accumulator with value in
                     4227                                 ; ASCII_CONV_1 table, offset in index
                     4228                                 ; register Lo byte(ASCII 1s value)
 893F [03] B792      4229       sta     AC_1              ; Copy to "AC_1" variable
 8941 [04] 81        4230       rts                       ; Return from subroutine
                     4231  
                     4232  
                     4233  ;****************************************************************************
                     4234  ; - This subroutine loads the over-write values to the bottom line string,
                     4235  ;   first 3 columns.
                     4236  ;****************************************************************************
                     4237  
                     4238  LOAD_1ST_3:
 8942 [03] B690      4239       lda     AC_100     ; Load accumulator with value in "AC_100"(100s col)
 8944 [03] B768      4240       sta     BotLin0    ; Copy to "BotLin0"(1st column on left, bottom line)
 8946 [03] B691      4241       lda     AC_10      ; Load accumulator with value in "AC_10"(10s col)
 8948 [03] B769      4242       sta     BotLin1    ; Copy to "BotLin1"(2nd column on left, bottom line)
 894A [03] B692      4243       lda     AC_1       ; Load accumulator with value in "AC_1"(1s col)
 894C [03] B76A      4244       sta     BotLin2    ; Copy to "BotLin2"(3d column on left, bottom line)
 894E [04] 81        4245       rts                ; Return from subroutine
                     4246  
                     4247  ;****************************************************************************
                     4248  ; - This subroutine loads the over-write values to the bottom line string,
                     4249  ;   second 3 columns.
                     4250  ;****************************************************************************
                     4251  
                     4252  LOAD_2ND_3:
 894F [03] B690      4253       lda     AC_100     ; Load accumulator with value in "AC_100"(100s col)
 8951 [03] B76C      4254       sta     BotLin4    ; Copy to "BotLin4"(5th column on left, bottom line)
 8953 [03] B691      4255       lda     AC_10      ; Load accumulator with value in "AC_10"(10s col)
 8955 [03] B76D      4256       sta     BotLin5    ; Copy to "BotLin5"(6th column on left, bottom line)
 8957 [03] B692      4257       lda     AC_1       ; Load accumulator with value in "AC_1"(1s col)
 8959 [03] B76E      4258       sta     BotLin6    ; Copy to "BotLin6"(7th column on left, bottom line)
 895B [04] 81        4259       rts                ; Return from subroutine
                     4260  
                     4261  ;****************************************************************************
                     4262  ; - This subroutine loads the over-write values to the bottom line string,
                     4263  ;   third 3 columns.
                     4264  ;****************************************************************************
                     4265  
                     4266  LOAD_3D_3:
 895C [03] B690      4267       lda     AC_100     ; Load accumulator with value in "AC_100"(100s col)
 895E [03] B770      4268       sta     BotLin8    ; Copy to "BotLin8"(9th column on left, bottom line)
 8960 [03] B691      4269       lda     AC_10      ; Load accumulator with value in "AC_10"(10s col)


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 38
MV_TECA


 8962 [03] B771      4270       sta     BotLin9    ; Copy to "BotLin9"(10th column on left, bottom line)
 8964 [03] B692      4271       lda     AC_1       ; Load accumulator with value in "AC_1"(1s col)
 8966 [03] B772      4272       sta     BotLin10   ; Copy to "BotLin10"(11th column on left, bottom line)
 8968 [04] 81        4273       rts                ; Return from subroutine
                     4274  
                     4275  ;****************************************************************************
                     4276  ; - This subroutine loads the over-write values to the bottom line string,
                     4277  ;   forth 3 columns.
                     4278  ;****************************************************************************
                     4279  
                     4280  LOAD_4TH_3:
 8969 [03] B690      4281       lda     AC_100     ; Load accumulator with value in "AC_100"(100s col)
 896B [03] B774      4282       sta     BotLin12   ; Copy to "BotLin12"(13th column on left, bottom line)
 896D [03] B691      4283       lda     AC_10      ; Load accumulator with value in "AC_10"(10s col)
 896F [03] B775      4284       sta     BotLin13   ; Copy to "BotLin13"(14th column on left, bottom line)
 8971 [03] B692      4285       lda     AC_1       ; Load accumulator with value in "AC_1"(1s col)
 8973 [03] B776      4286       sta     BotLin14   ; Copy to "BotLin14"(15th column on left, bottom line)
 8975 [04] 81        4287       rts                ; Return from subroutine
                     4288  
                     4289  ;****************************************************************************
                     4290  ; - This subroutine loads the over-write values to the bottom line string,
                     4291  ;   fifth 3 columns.
                     4292  ;****************************************************************************
                     4293  
                     4294  LOAD_5TH_3:
 8976 [03] B690      4295       lda     AC_100     ; Load accumulator with value in "AC_100"(100s col)
 8978 [03] B778      4296       sta     BotLin16   ; Copy to "BotLin16"(17th column on left, bottom line)
 897A [03] B691      4297       lda     AC_10      ; Load accumulator with value in "AC_10"(10s col)
 897C [03] B779      4298       sta     BotLin17   ; Copy to "BotLin17"(18th column on left, bottom line)
 897E [03] B692      4299       lda     AC_1       ; Load accumulator with value in "AC_1"(1s col)
 8980 [03] B77A      4300       sta     BotLin18   ; Copy to "BotLin18"(19th column on left, bottom line)
 8982 [04] 81        4301       rts                ; Return from subroutine
                     4302  
                     4303  ;***************************************************************************
                     4304  ; - This subroutine takes the address of the desired Line Table loaded
                     4305  ;   in H:X. Using the value in "ColNum" offset value, load the "value"
                     4306  ;   variable with the contents of the appropriate ASCCI value in the table
                     4307  ;   and display them on the top line of the VFD.
                     4308  ;***************************************************************************
                     4309  
                     4310  PRINT_LINE:
 8983 [03] 3F63      4311       clr     ColNum            ; Clear "ColNum" variable
                     4312                                 ;(ColNum = 0 = 1st column on left)
 8985 [03] B663      4313       lda     ColNum            ; Load accumulator with value in "ColNum"
                     4314  
                     4315  NEXT_CHAR:
 8987 [05] CD89E1    4316       jsr     LDA_W_HX_PL_A     ; Jump to subroutine at LDA_W_HX_PL_A:
 898A [03] B761      4317       sta     value             ; Copy to "value" variable
 898C [05] CD8A30    4318       jsr     VFD_SEND          ; Jump to subroutine at VFD_SEND:
 898F [04] 3C63      4319       inc     ColNum            ; Increment "ColNum" (ColNum=ColNum+1)
 8991 [03] B663      4320       lda     ColNum            ; Load accumulator with value in "ColNum"
 8993 [02] A114      4321       cmp     #$14              ; Compare (A) with decimal 20
 8995 [03] 2702      4322       beq     CHARS_DONE        ; If Z bit of CCR is set, branch to
                     4323                                 ; CHARS_DONE:
                     4324                                 ;(finished sending all display characters)
 8997 [03] 20EE      4325       bra     NEXT_CHAR         ; Branch to NEXT_CHAR:
                     4326  
                     4327  CHARS_DONE:
 8999 [04] 81        4328       rts                       ; Return from subroutine
                     4329  
                     4330  
                     4331  ;****************************************************************************
                     4332  ; - This subroutine toggles "mde" bit of "flags" variable whenever
                     4333  ;   "Toggle Mode" button is pressed.
                     4334  ;****************************************************************************
                     4335  
                     4336  CHANGE_MODE:
 899A [04] 3350      4337       com     ModeCntr          ; Ones compliment "ModeCntr"
                     4338                                 ;(flip state of "ModeCntr"
 899C [03] 260D      4339       bne     SET_MODE          ; If the Z bit of CCR is clear, branch
                     4340                                 ; to SET_MODE:
 899E [04] 1153      4341       bclr    mde,flags         ; Clear "mde" bit of "flags" variable
                     4342                                 ; ("mde" = 0 = display)
 89A0 [03] 3F54      4343       clr     ScrnCnt           ; Clear "ScrnCnt" variable
 89A2 [03] 3F55      4344       clr     ScrnCnt_prv       ; Clear "ScrnCnt_prv" variable
                     4345                                 ;(Return to first screen, "Display" mode)
 89A4 [04] 6E1456    4346       mov     #$14,ScrnCnt_Lst  ; Move decimal 20 into "ScrnCnt_Lst"
 89A7 [04] 1353      4347       bclr    frz,flags         ; Clear "frz" bit of "flags" variable
 89A9 [03] 200F      4348       bra     TOG_MODE_DONE     ; Branch to TOG_MODE_DONE:
                     4349  
                     4350  SET_MODE:
 89AB [04] 1053      4351       bset    mde,flags         ; Set "mde" bit "flags" variable
                     4352                                 ;("mde" = 1 = configure)
 89AD [03] 3F57      4353       clr     ConCnt            ; Clear "ConCnt" variable
 89AF [03] 3F58      4354       clr     ConCnt_prv        ; Clear "ConCnt_prv" variable
                     4355                                 ;(Return to first constant in section)
 89B1 [04] 6EFF59    4356       mov     #$FF,ConCnt_Lst   ; Move decimal 255 into "ConCnt_Lst"
 89B4 [03] 3F5A      4357       clr     CurCon            ; Clear "CurCon" variable
 89B6 [03] 3F5B      4358       clr     ConVal            ; Clear "ConVal" variable
 89B8 [04] 1553      4359       bclr    sel,flags         ; Clear "sel" bit of "flags" variable
                     4360  
                     4361  
                     4362  TOG_MODE_DONE:
 89BA [04] 174F      4363       bclr    Sw3cls,Swflags    ; Clear "Sw3cls" bit of "Swflags" variable
 89BC [04] 81        4364       rts                       ; Return from subroutine
                     4365  
                     4366  
                     4367  
                     4368  ;***************************************************************************
                     4369  ; - This subroutine loads H:X with the desired vectored address found in a
                     4370  ;   vector address table. (H:X) originally holds the address of beginning of
                     4371  ;   the vector address table. (A) holds the offset value to the desired
                     4372  ;   vector address.
                     4373  ;   The accumulator has to be multiplied by 2 before addition to the index
                     4374  ;   register H:X, since each entry in the vector table is of 2 byte length.
                     4375  ;   Since the indexed addressing mode for LDHX is missing, we cannot load
                     4376  ;   H:X with the content of memory that H:X is pointing to. To do so, we
                     4377  ;   load (A) with the Hi byte of the vector address, using indexed
                     4378  ;   addressing with zero offset, and load (X) with the Lo byte of the vector
                     4379  ;   address, again, using indexed addressing, but, with an offset of 1.
                     4380  ;   After copying (A) to (H) via push/pull operations, (H:X) contains the
                     4381  ;   vector address.
                     4382  ;   NOTE! After the final "pulh" instruction, a "jmp ,x" will jump the
                     4383  ;   program to the desired vector address.
                     4384  ;***************************************************************************
                     4385  
                     4386  GET_VECT_ADDR:
 89BD [01] 48        4387       lsla             ; Logical shift left accumulator(multiply by 2)
 89BE [02] 89        4388       pshx             ; Push value in index register Lo byte to stack
 89BF [02] 8B        4389       pshh             ; Push value in index register Hi byte to stack
 89C0 [04] 9EEB02    4390       add     2,SP     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location
                     4391                        ; on stack, and SP=A, so (A=X+A)
 89C3 [01] 97        4392       tax              ; Transfer value in accumulator to index register Lo
                     4393                        ; byte(Copy result in to index register Lo byte)
 89C4 [02] 86        4394       pula             ; Pull value from stack to accumulator((H)->(A))
 89C5 [02] A900      4395       adc     #$00     ; Add with carry ((A)<-(A)+(M)+(C))
                     4396                        ;(This just adds the carry, if applicable)
 89C7 [02] 87        4397       psha             ; Push value in accumulator to stack
                     4398                        ;(modified (H) -> stack)
 89C8 [02] 8A        4399       pulh             ; Pull value from stack to index register Hi byte
                     4400                        ;(modified (H)->(H)
 89C9 [02] 86        4401       pula             ; Pull value from stack to accumulator
                     4402                        ;(clean up stack)
 89CA [02] F6        4403       lda     ,x       ; Load accumulator with value in index register Lo
                     4404                        ;(vector Hi byte)
 89CB [03] EE01      4405       ldx     1,x      ; Load index register Lo byte with value in 1st


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 39
MV_TECA


                     4406                        ; location on stack(vector Lo byte)
 89CD [02] 87        4407       psha             ; Push value in accumulator to stack
 89CE [02] 8A        4408       pulh             ; Pull value from stack to accumulator((A)->(H)
                     4409                        ;((H:X) now contains the desired vector address)
 89CF [04] 81        4410       rts              ; Return from subroutine
                     4411  
                     4412  
                     4413  ;***************************************************************************
                     4414  ; - This subroutine does an effective address calculation, adding the
                     4415  ;   unsigned 8 bit value in the accumulator, to the index register (H:X).
                     4416  ;   Since there is no instruction available which can add the contents of
                     4417  ;   A to H:X, the contents of H:X must first be saved to memory(stack), to
                     4418  ;   allow a memory to register addition operation. H:X is modified.
                     4419  ;   (A) contains the value of the offset from address at (H:X)
                     4420  ;***************************************************************************
                     4421  
                     4422  ADD_A_TO_HX:
 89D0 [02] 89        4423       pshx            ; Push value in index register Lo byte to stack
 89D1 [02] 8B        4424       pshh            ; Push value in index register Hi byte to stack
 89D2 [02] 87        4425       psha            ; push value in accumulator to stack
 89D3 [02] 95        4426       tsx             ; Transfer value in stack to index register Lo byte
                     4427                       ;((A)->(X))
 89D4 [03] EB02      4428       add     2,x     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location on
                     4429                       ; stack, and x=A, so (A=X+A)
 89D6 [03] E702      4430       sta     2,x     ; Copy result to 2nd location on stack
 89D8 [01] 4F        4431       clra            ; Clear accumulator(A=0)
 89D9 [03] E901      4432       adc     1,x     ; Add with carry ((A)<-(A)+(M)+(C)) In this case
                     4433                       ; 1=1st location on stack, and x=A=0, so (A=H+C+A)
 89DB [03] E701      4434       sta     1,x     ; Copy result to 1st location on stack
 89DD [02] 86        4435       pula            ; Pull value from stack to accumulator
 89DE [02] 8A        4436       pulh            ; Pull value from stack to index register Hi byte
 89DF [02] 88        4437       pulx            ; Pull value from stack to index register Lo byte
                     4438                       ;(H:X) now contains ((H:X+(A))
 89E0 [04] 81        4439       rts             ; return from subroutine
                     4440  
                     4441  
                     4442  ;***************************************************************************
                     4443  ; - This subroutine loads into A, the contents of a location pointed to by
                     4444  ;   H:X plus A. H:X is preserved. This operation emulates a "lda A,X"
                     4445  ;   instruction, so called "accumulator-offset indexed addressing mode",
                     4446  ;   which is not available on the HC08 family instruction set.
                     4447  ;   (A) contains the value of the offset from address at (H:X)
                     4448  ;***************************************************************************
                     4449  
                     4450  LDA_W_HX_PL_A:
 89E1 [02] 89        4451       pshx             ; Push value in index register Lo byte to stack
 89E2 [02] 8B        4452       pshh             ; Push value in index register Hi byte to stack
                     4453                        ;(These 2 instructions save the original (H:X))
 89E3 [02] 89        4454       pshx             ; Push value in index register Lo byte to stack
 89E4 [02] 8B        4455       pshh             ; Push value in index register Hi byte to stack
                     4456                        ;(These 2 instructions are for the working H:X
 89E5 [04] 9EEB02    4457       add     2,SP     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location
                     4458                        ; on stack, and SP=A, so (A=X+A)
 89E8 [01] 97        4459       tax              ; Transfer value in accumulator to index register Lo
                     4460                        ; byte(Copy result in to index register Lo byte)
 89E9 [02] 86        4461       pula             ; Pull value from stack to accumulator((H)->(A))
 89EA [02] A900      4462       adc     #$00     ; Add with carry ((A)<-(A)+(M)+(C))
                     4463                        ;(This just adds the carry, if applicable)
 89EC [02] 87        4464       psha             ; Push value in accumulator to stack
                     4465                        ;(modified (H) to stack)
 89ED [02] 8A        4466       pulh             ; Pull value from stack to index register Hi byte
                     4467                        ;(modified (H) to (H)
 89EE [02] A701      4468       ais     #$01     ; Add immediate value of 1 to SP register
                     4469                        ;(clean up stack)
 89F0 [02] F6        4470       lda     ,x       ; Load accumulator with value in index register Lo
                     4471                        ; byte
                     4472                        ;(A now contains the value in the location at H:X+A)
 89F1 [02] 8A        4473       pulh             ; Pull value from stack to index register Hi byte
 89F2 [02] 88        4474       pulx             ; Pull value from stack to index register Lo byte
                     4475                        ;(these 2 instructions restore (H:X))
 89F3 [04] 81        4476       rts              ; return from subroutine
                     4477  
                     4478  ;***************************************************************************
                     4479  ; - This subroutine sends an instruction byte to position the cursor in the
                     4480  ;   top left corner of the display.
                     4481  ;***************************************************************************
                     4482  
                     4483  VFD_START_TOP:
                     4484  
                     4485  ;***************************************************************************
                     4486  ; - Set up to send an instruction  byte.
                     4487  ;***************************************************************************
                     4488  
 89F4 [04] 1901      4489       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B(PTB4)
 89F6 [04] 1B01      4490       bclr    Rd_Wrt,PORTB     ; Clear "Rd_Wrt" bit of Port B(PTB5)
                     4491                                ;(Write Operation)
 89F8 [04] 1D01      4492       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of Port B(PTB6)
                     4493                                ;(Send an instruction value)
                     4494  
                     4495  
                     4496  ;***************************************************************************
                     4497  ; - Set cursor top left Hi nibble
                     4498  ;***************************************************************************
                     4499  
 89FA [04] 6E0802    4500       mov     #$08,PORTC       ; Move %00001000 into PortC
                     4501                                ;(Set bit4=DB7)
 89FD [04] 1801      4502       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 89FF [05] CD8AB8    4503       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8A02 [04] 1901      4504       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4505  
                     4506  ;***************************************************************************
                     4507  ; - Set cursor top left Lo nibble
                     4508  ;***************************************************************************
                     4509  
 8A04 [04] 6E0002    4510       mov     #$00,PORTC       ; Move %00000000 into PortC
 8A07 [04] 1801      4511       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8A09 [05] CD8AAC    4512       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8A0C [04] 1901      4513       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8A0E [05] CD8AB8    4514       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8A11 [04] 81        4515       rts                      ; Return from subroutine
                     4516  
                     4517  
                     4518  ;***************************************************************************
                     4519  ; - This subroutine sends an instruction byte to position the cursor in the
                     4520  ;   bottom left corner of the display.
                     4521  ;***************************************************************************
                     4522  
                     4523  VFD_START_BOT:
                     4524  
                     4525  ;***************************************************************************
                     4526  ; - Set up to send an instruction  byte.
                     4527  ;***************************************************************************
                     4528  
 8A12 [04] 1901      4529       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B(PTB4)
 8A14 [04] 1B01      4530       bclr    Rd_Wrt,PORTB     ; Clear "Rd_Wrt" bit of Port B(PTB5)
                     4531                                ;(Write Operation)
 8A16 [04] 1D01      4532       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of Port B(PTB6)
                     4533                                ;(Send an instruction value)
                     4534  
                     4535  
                     4536  ;***************************************************************************
                     4537  ; - Set cursor bottom left Hi nibble
                     4538  ;***************************************************************************
                     4539  
 8A18 [04] 6E0C02    4540       mov     #$0C,PORTC       ; Move %00001100 into PortC
                     4541                                ;(Set bit4=DB7 and bit3=DB6)


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 40
MV_TECA


 8A1B [04] 1801      4542       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8A1D [05] CD8AB8    4543       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8A20 [04] 1901      4544       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4545  
                     4546  ;***************************************************************************
                     4547  ; - Set cursor bottom left Lo nibble
                     4548  ;***************************************************************************
                     4549  
 8A22 [04] 6E0002    4550       mov     #$00,PORTC       ; Move %00000000 into PortC
 8A25 [04] 1801      4551       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8A27 [05] CD8AAC    4552       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8A2A [04] 1901      4553       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8A2C [05] CD8AB8    4554       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8A2F [04] 81        4555       rts                      ; Return from subroutine
                     4556  
                     4557  
                     4558  ;***************************************************************************
                     4559  ; - This subroutine takes a single ASCII value, held in "value" variable
                     4560  ;   and sets the appropriate bits of Port C. Interface with the VFD display
                     4561  ;   is 4 bit, so, to send an 8 bit value, bits 4,5,6 and 7 are sent first,
                     4562  ;   then the bits 0,1,2 and 3 are sent.
                     4563  ;***************************************************************************
                     4564  
                     4565  VFD_SEND:
                     4566  
                     4567  ;***************************************************************************
                     4568  ; - Data Bit 4 (PTC0)
                     4569  ;***************************************************************************
                     4570  
                     4571  CHK_DB4:
 8A30 [03] B661      4572       lda     value       ; Load accumulator with value in "value" variable
 8A32 [02] A510      4573       bit     #DB4m       ; Logical AND (A)&(M)%00010000
 8A34 [03] 2604      4574       bne     SET_DB4     ; If Z bit of CCR is clear, branch to SET_DB4:
 8A36 [04] 1102      4575       bclr    DB4,PORTC   ; Clear "DB4" bit of Port C(bit0)
 8A38 [03] 2002      4576       bra     CHK_DB5     ; Branch to CHK_DB5
                     4577  
                     4578  SET_DB4:
 8A3A [04] 1002      4579       bset    DB4,PORTC   ; Set "DB4" bit of Port C(bit0)
                     4580  
                     4581  ;***************************************************************************
                     4582  ; - Data Bit 5 (PTC1)
                     4583  ;***************************************************************************
                     4584  
                     4585  CHK_DB5:
 8A3C [03] B661      4586       lda     value       ; Load accumulator with value in "value" variable
 8A3E [02] A520      4587       bit     #DB5m       ; Logical AND (A)&(M)%00100000
 8A40 [03] 2604      4588       bne     SET_DB5     ; If Z bit of CCR is clear, branch to SET_DB5:
 8A42 [04] 1302      4589       bclr    DB5,PORTC   ; Clear "DB5" bit of Port C(bit1)
 8A44 [03] 2002      4590       bra     CHK_DB6     ; Branch to CHK_DB6
                     4591  
                     4592  SET_DB5:
 8A46 [04] 1202      4593       bset    DB5,PORTC   ; Set "DB5" bit of Port C(bit1)
                     4594  
                     4595  ;***************************************************************************
                     4596  ; - Data Bit 6 (PTC2)
                     4597  ;***************************************************************************
                     4598  
                     4599  CHK_DB6:
 8A48 [03] B661      4600       lda     value       ; Load accumulator with value in "value" variable
 8A4A [02] A540      4601       bit     #DB6m       ; Logical AND (A)&(M)%01000000
 8A4C [03] 2604      4602       bne     SET_DB6     ; If Z bit of CCR is clear, branch to SET_DB6:
 8A4E [04] 1502      4603       bclr    DB6,PORTC   ; Clear "DB6" bit of Port C(bit2)
 8A50 [03] 2002      4604       bra     CHK_DB7     ; Branch to CHK_DB7
                     4605  
                     4606  SET_DB6:
 8A52 [04] 1402      4607       bset    DB6,PORTC   ; Set "DB6" bit of Port C(bit2)
                     4608  
                     4609  ;***************************************************************************
                     4610  ; - Data Bit 7 (PTC3)
                     4611  ;***************************************************************************
                     4612  
                     4613  CHK_DB7:
 8A54 [03] B661      4614       lda     value       ; Load accumulator with value in "value" variable
 8A56 [02] A580      4615       bit     #DB7m       ; Logical AND (A)&(M)%10000000
 8A58 [03] 2604      4616       bne     SET_DB7     ; If Z bit of CCR is clear, branch to SET_DB7:
 8A5A [04] 1702      4617       bclr    DB7,PORTC   ; Clear "DB7" bit of Port C(bit3)
 8A5C [03] 2002      4618       bra     HI_NIB      ; Branch to HI_NIB:
                     4619  
                     4620  SET_DB7:
 8A5E [04] 1602      4621       bset    DB7,PORTC   ; Set "DB7" bit of Port C(bit3)
                     4622  
                     4623  ;***************************************************************************
                     4624  ; - Send the Hi nibble
                     4625  ;***************************************************************************
                     4626  
                     4627  HI_NIB:
 8A60 [04] 1C01      4628       bset    Reg_Sel,PORTB    ; Set "Reg_Sel" bit of PortB(RS=1)
 8A62 [05] CD8AB8    4629       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8A65 [04] 1801      4630       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8A67 [05] CD8AB8    4631       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     4632  
                     4633  ;***************************************************************************
                     4634  ; - Clear Enable line to set up Lo nibble
                     4635  ;***************************************************************************
                     4636  
 8A6A [04] 1901      4637       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4638  
                     4639  ;***************************************************************************
                     4640  ; - Data Bit 0 (PTC0)
                     4641  ;***************************************************************************
                     4642  
                     4643  CHK_DB0:
 8A6C [03] B661      4644       lda     value       ; Load accumulator with value in "value" variable
 8A6E [02] A501      4645       bit     #DB0m       ; Logical AND (A)&(M)%00000001
 8A70 [03] 2604      4646       bne     SET_DB0     ; If Z bit of CCR is clear, branch to SET_DB0:
 8A72 [04] 1102      4647       bclr    DB0,PORTC   ; Clear "DB0" bit of Port C(bit0)
 8A74 [03] 2002      4648       bra     CHK_DB1     ; Branch to CHK_DB1
                     4649  
                     4650  SET_DB0:
 8A76 [04] 1002      4651       bset    DB0,PORTC   ; Set "DB0" bit of Port C(bit0)
                     4652  
                     4653  ;***************************************************************************
                     4654  ; - Data Bit 1 (PTC1)
                     4655  ;***************************************************************************
                     4656  
                     4657  CHK_DB1:
 8A78 [03] B661      4658       lda     value       ; Load accumulator with value in "value" variable
 8A7A [02] A502      4659       bit     #DB1m       ; Logical AND (A)&(M)%00000010
 8A7C [03] 2604      4660       bne     SET_DB1     ; If Z bit of CCR is clear, branch to SET_DB1:
 8A7E [04] 1302      4661       bclr    DB1,PORTC   ; Clear "DB1" bit of Port C(bit1)
 8A80 [03] 2002      4662       bra     CHK_DB2     ; Branch to CHK_DB2
                     4663  
                     4664  SET_DB1:
 8A82 [04] 1202      4665       bset    DB1,PORTC   ; Set "DB1" bit of Port C(bit1)
                     4666  
                     4667  ;***************************************************************************
                     4668  ; - Data Bit 2 (PTC2)
                     4669  ;***************************************************************************
                     4670  
                     4671  CHK_DB2:
 8A84 [03] B661      4672       lda     value       ; Load accumulator with value in "value" variable
 8A86 [02] A504      4673       bit     #DB2m       ; Logical AND (A)&(M)%00000100
 8A88 [03] 2604      4674       bne     SET_DB2     ; If Z bit of CCR is clear, branch to SET_DB2:
 8A8A [04] 1502      4675       bclr    DB2,PORTC   ; Clear "DB2" bit of Port C(bit2)
 8A8C [03] 2002      4676       bra     CHK_DB3     ; Branch to CHK_DB3
                     4677  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 41
MV_TECA


                     4678  SET_DB2:
 8A8E [04] 1402      4679       bset    DB2,PORTC   ; Set "DB2" bit of Port C(bit2)
                     4680  
                     4681  ;***************************************************************************
                     4682  ; - Data Bit 3 (PTC3)
                     4683  ;***************************************************************************
                     4684  
                     4685  CHK_DB3:
 8A90 [03] B661      4686       lda     value       ; Load accumulator with value in "value" variable
 8A92 [02] A508      4687       bit     #DB3m       ; Logical AND (A)&(M)%00001000
 8A94 [03] 2604      4688       bne     SET_DB3     ; If Z bit of CCR is clear, branch to SET_DB3:
 8A96 [04] 1702      4689       bclr    DB3,PORTC   ; Clear "DB3" bit of Port C(bit3)
 8A98 [03] 2002      4690       bra     LO_NIB      ; Branch to LO_NIB:
                     4691  
                     4692  SET_DB3:
 8A9A [04] 1602      4693       bset    DB3,PORTC   ; Set "DB3" bit of Port C(bit3)
                     4694  
                     4695  ;***************************************************************************
                     4696  ; - Send the Lo nibble
                     4697  ;***************************************************************************
                     4698  
                     4699  LO_NIB:
 8A9C [04] 1801      4700       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8A9E [05] CD8AAC    4701       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
                     4702                                ;(timing requirement)
                     4703  
                     4704  ;***************************************************************************
                     4705  ; - Clear Enable and Register Select to set up for next transmit
                     4706  ;***************************************************************************
                     4707  
 8AA1 [04] 1901      4708       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8AA3 [05] CD8AB8    4709       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8AA6 [04] 1D01      4710       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of PortB(RS=0)
 8AA8 [05] CD8AB8    4711       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8AAB [04] 81        4712       rts                      ; Return from subroutine
                     4713  
                     4714  
                     4715  ;****************************************************************************
                     4716  ; - This is the delay time from the point at which the data bits have been
                     4717  ;   configured, and the "enable" bit set, to the point at which the "enable"
                     4718  ;   bit is cleared.(min 0.45uS)
                     4719  ;   One pass through the loop takes ~1.5uS, bus frequency of ~8mHZ
                     4720  ;****************************************************************************
                     4721  
                     4722  LONG_DELAY:
 8AAC [03] 3F9B      4723       clr     tmp1       ; Clear tmp1 variable
                     4724  
                     4725  WAIT_4:
 8AAE [03] B69B      4726       lda     tmp1       ; Load accumulator with value in tmp1 variable
 8AB0 [01] 4C        4727       inca               ; Increment value in accumulator
 8AB1 [03] B79B      4728       sta     tmp1       ; Copy to tmp1 variable
 8AB3 [02] A102      4729       cmp     #$02       ; Compare value in accumulator with decimal 2
 8AB5 [03] 25F7      4730       blo     WAIT_4     ; If C bit of CCR is set, (A<M), branch to
                     4731                          ; WAIT_4:(~3uS delay for timing requirements)
 8AB7 [04] 81        4732       rts                ; Return from subroutine
                     4733  
                     4734  
                     4735  ;****************************************************************************
                     4736  ; - This is the delay time from the point at which the "enable" bit has been
                     4737  ;   cleared, to the point where the data bits can be re-configured.
                     4738  ;   (min 0.01uS) One NOP takes ~0.125uS, bus frequency of ~8mHZ
                     4739  ;****************************************************************************
                     4740  
                     4741  SHORT_DELAY:
 8AB8 [01] 9D        4742       nop                ; No operation(1 bus cycle)
 8AB9 [04] 81        4743       rts                ; Return from subroutine
                     4744  
                     4745  
                     4746  ;****************************************************************************
                     4747  ; - This subroutine compares all the characters on the bottom line commanded,
                     4748  ;   to those of the previous bottom line. If they are different, update the
                     4749  ;   bottom line, otherwise, skip over. This is to eliminate display
                     4750  ;   "digit rattle" caused by rapid screen updates.
                     4751  ;****************************************************************************
                     4752  
                     4753  CMP_BOTLIN:
 8ABA [03] B668      4754       lda     Botlin0         ; Load accumulator with value in "Botlin0"
 8ABC [03] B17C      4755       cmp     Botlin0L        ; Compare it with the value in "Botlin0L"
 8ABE [03] 2705      4756       beq     NO_CHNG_BL0     ; If Z bit of CCR is set, branch to NO_CHNG_BL0
                     4757                               ;(A=M)
 8AC0 [03] B77C      4758       sta     Botlin0L        ; Copy "Botlin0" to "Botlin0L"
 8AC2 [03] CC8B98    4759       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4760  
                     4761  NO_CHNG_BL0:
 8AC5 [03] B669      4762       lda     Botlin1         ; Load accumulator with value in "Botlin1"
 8AC7 [03] B17D      4763       cmp     Botlin1L        ; Compare it with the value in "Botlin1L"
 8AC9 [03] 2705      4764       beq     NO_CHNG_BL1     ; If Z bit of CCR is set, branch to NO_CHNG_BL1
                     4765                               ;(A=M)
 8ACB [03] B77D      4766       sta     Botlin1L        ; Copy "Botlin1" to "Botlin1L"
 8ACD [03] CC8B98    4767       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4768  
                     4769  NO_CHNG_BL1:
 8AD0 [03] B66A      4770       lda     Botlin2         ; Load accumulator with value in "Botlin2"
 8AD2 [03] B17E      4771       cmp     Botlin2L        ; Compare it with the value in "Botlin2L"
 8AD4 [03] 2705      4772       beq     NO_CHNG_BL2     ; If Z bit of CCR is set, branch to NO_CHNG_BL2
                     4773                               ;(A=M)
 8AD6 [03] B77E      4774       sta     Botlin2L        ; Copy "Botlin2" to "Botlin2L"
 8AD8 [03] CC8B98    4775       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4776  
                     4777  NO_CHNG_BL2:
 8ADB [03] B66B      4778       lda     Botlin3         ; Load accumulator with value in "Botlin3"
 8ADD [03] B17F      4779       cmp     Botlin3L        ; Compare it with the value in "Botlin3L"
 8ADF [03] 2705      4780       beq     NO_CHNG_BL3     ; If Z bit of CCR is set, branch to NO_CHNG_BL3
                     4781                               ;(A=M)
 8AE1 [03] B77F      4782       sta     Botlin3L        ; Copy "Botlin3" to "Botlin3L"
 8AE3 [03] CC8B98    4783       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4784  
                     4785  NO_CHNG_BL3:
 8AE6 [03] B66C      4786       lda     Botlin4         ; Load accumulator with value in "Botlin4"
 8AE8 [03] B180      4787       cmp     Botlin4L        ; Compare it with the value in "Botlin4L"
 8AEA [03] 2705      4788       beq     NO_CHNG_BL4     ; If Z bit of CCR is set, branch to NO_CHNG_BL4
                     4789                               ;(A=M)
 8AEC [03] B780      4790       sta     Botlin4L        ; Copy "Botlin4" to "Botlin4L"
 8AEE [03] CC8B98    4791       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4792  
                     4793  NO_CHNG_BL4:
 8AF1 [03] B66D      4794       lda     Botlin5         ; Load accumulator with value in "Botlin5"
 8AF3 [03] B181      4795       cmp     Botlin5L        ; Compare it with the value in "Botlin5L"
 8AF5 [03] 2705      4796       beq     NO_CHNG_BL5     ; If Z bit of CCR is set, branch to NO_CHNG_BL5
                     4797                               ;(A=M)
 8AF7 [03] B781      4798       sta     Botlin5L        ; Copy "Botlin5" to "Botlin5L"
 8AF9 [03] CC8B98    4799       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4800  
                     4801  NO_CHNG_BL5:
 8AFC [03] B66E      4802       lda     Botlin6         ; Load accumulator with value in "Botlin6"
 8AFE [03] B182      4803       cmp     Botlin6L        ; Compare it with the value in "Botlin6L"
 8B00 [03] 2705      4804       beq     NO_CHNG_BL6     ; If Z bit of CCR is set, branch to NO_CHNG_BL6
                     4805                               ;(A=M)
 8B02 [03] B782      4806       sta     Botlin6L        ; Copy "Botlin6" to "Botlin6L"
 8B04 [03] CC8B98    4807       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4808  
                     4809  NO_CHNG_BL6:
 8B07 [03] B66F      4810       lda     Botlin7         ; Load accumulator with value in "Botlin7"
 8B09 [03] B183      4811       cmp     Botlin7L        ; Compare it with the value in "Botlin7L"
 8B0B [03] 2705      4812       beq     NO_CHNG_BL7     ; If Z bit of CCR is set, branch to NO_CHNG_BL7
                     4813                               ;(A=M)


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 42
MV_TECA


 8B0D [03] B783      4814       sta     Botlin7L        ; Copy "Botlin7" to "Botlin7L"
 8B0F [03] CC8B98    4815       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4816  
                     4817  NO_CHNG_BL7:
 8B12 [03] B670      4818       lda     Botlin8         ; Load accumulator with value in "Botlin8"
 8B14 [03] B184      4819       cmp     Botlin8L        ; Compare it with the value in "Botlin8L"
 8B16 [03] 2705      4820       beq     NO_CHNG_BL8     ; If Z bit of CCR is set, branch to NO_CHNG_BL8
                     4821                               ;(A=M)
 8B18 [03] B784      4822       sta     Botlin8L        ; Copy "Botlin8" to "Botlin8L"
 8B1A [03] CC8B98    4823       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4824  
                     4825  NO_CHNG_BL8:
 8B1D [03] B671      4826       lda     Botlin9         ; Load accumulator with value in "Botlin9"
 8B1F [03] B185      4827       cmp     Botlin9L        ; Compare it with the value in "Botlin9L"
 8B21 [03] 2705      4828       beq     NO_CHNG_BL9     ; If Z bit of CCR is set, branch to NO_CHNG_BL9
                     4829                               ;(A=M)
 8B23 [03] B785      4830       sta     Botlin9L        ; Copy "Botlin9" to "Botlin9L"
 8B25 [03] CC8B98    4831       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4832  
                     4833  NO_CHNG_BL9:
 8B28 [03] B672      4834       lda     Botlin10         ; Load accumulator with value in "Botlin10"
 8B2A [03] B186      4835       cmp     Botlin10L        ; Compare it with the value in "Botlin10L"
 8B2C [03] 2705      4836       beq     NO_CHNG_BL10     ; If Z bit of CCR is set, branch to NO_CHNG_BL10
                     4837                                ;(A=M)
 8B2E [03] B786      4838       sta     Botlin10L        ; Copy "Botlin10" to "Botlin10L"
 8B30 [03] CC8B98    4839       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4840  
                     4841  NO_CHNG_BL10:
 8B33 [03] B673      4842       lda     Botlin11         ; Load accumulator with value in "Botlin11"
 8B35 [03] B187      4843       cmp     Botlin11L        ; Compare it with the value in "Botlin11L"
 8B37 [03] 2705      4844       beq     NO_CHNG_BL11     ; If Z bit of CCR is set, branch to NO_CHNG_BL11
                     4845                                ;(A=M)
 8B39 [03] B787      4846       sta     Botlin11L        ; Copy "Botlin11" to "Botlin11L"
 8B3B [03] CC8B98    4847       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4848  
                     4849  NO_CHNG_BL11:
 8B3E [03] B674      4850       lda     Botlin12         ; Load accumulator with value in "Botlin12"
 8B40 [03] B188      4851       cmp     Botlin12L        ; Compare it with the value in "Botlin12L"
 8B42 [03] 2705      4852       beq     NO_CHNG_BL12     ; If Z bit of CCR is set, branch to NO_CHNG_BL12
                     4853                                ;(A=M)
 8B44 [03] B788      4854       sta     Botlin12L        ; Copy "Botlin12" to "Botlin12L"
 8B46 [03] CC8B98    4855       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4856  
                     4857  NO_CHNG_BL12:
 8B49 [03] B675      4858       lda     Botlin13         ; Load accumulator with value in "Botlin13"
 8B4B [03] B189      4859       cmp     Botlin13L        ; Compare it with the value in "Botlin13L"
 8B4D [03] 2705      4860       beq     NO_CHNG_BL13     ; If Z bit of CCR is set, branch to NO_CHNG_BL13
                     4861                                ;(A=M)
 8B4F [03] B789      4862       sta     Botlin13L        ; Copy "Botlin13" to "Botlin13L"
 8B51 [03] CC8B98    4863       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4864  
                     4865  NO_CHNG_BL13:
 8B54 [03] B676      4866       lda     Botlin14         ; Load accumulator with value in "Botlin14"
 8B56 [03] B18A      4867       cmp     Botlin14L        ; Compare it with the value in "Botlin14L"
 8B58 [03] 2705      4868       beq     NO_CHNG_BL14     ; If Z bit of CCR is set, branch to NO_CHNG_BL14
                     4869                                ;(A=M)
 8B5A [03] B78A      4870       sta     Botlin14L        ; Copy "Botlin14" to "Botlin14L"
 8B5C [03] CC8B98    4871       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4872  
                     4873  NO_CHNG_BL14:
 8B5F [03] B677      4874       lda     Botlin15         ; Load accumulator with value in "Botlin15"
 8B61 [03] B18B      4875       cmp     Botlin15L        ; Compare it with the value in "Botlin15L"
 8B63 [03] 2705      4876       beq     NO_CHNG_BL15     ; If Z bit of CCR is set, branch to NO_CHNG_BL15
                     4877                                ;(A=M)
 8B65 [03] B78B      4878       sta     Botlin15L        ; Copy "Botlin15" to "Botlin15L"
 8B67 [03] CC8B98    4879       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4880  
                     4881  NO_CHNG_BL15:
 8B6A [03] B678      4882       lda     Botlin16         ; Load accumulator with value in "Botlin16"
 8B6C [03] B18C      4883       cmp     Botlin16L        ; Compare it with the value in "Botlin16L"
 8B6E [03] 2705      4884       beq     NO_CHNG_BL16     ; If Z bit of CCR is set, branch to NO_CHNG_BL16
                     4885                                ;(A=M)
 8B70 [03] B78C      4886       sta     Botlin16L        ; Copy "Botlin16" to "Botlin16L"
 8B72 [03] CC8B98    4887       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4888  
                     4889  NO_CHNG_BL16:
 8B75 [03] B679      4890       lda     Botlin17         ; Load accumulator with value in "Botlin17"
 8B77 [03] B18D      4891       cmp     Botlin17L        ; Compare it with the value in "Botlin17L"
 8B79 [03] 2705      4892       beq     NO_CHNG_BL17     ; If Z bit of CCR is set, branch to NO_CHNG_BL17
                     4893                                ;(A=M)
 8B7B [03] B78D      4894       sta     Botlin17L        ; Copy "Botlin17" to "Botlin17L"
 8B7D [03] CC8B98    4895       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4896  
                     4897  NO_CHNG_BL17:
 8B80 [03] B67A      4898       lda     Botlin18         ; Load accumulator with value in "Botlin18"
 8B82 [03] B18E      4899       cmp     Botlin18L        ; Compare it with the value in "Botlin18L"
 8B84 [03] 2705      4900       beq     NO_CHNG_BL18     ; If Z bit of CCR is set, branch to NO_CHNG_BL18
                     4901                                ;(A=M)
 8B86 [03] B78E      4902       sta     Botlin18L        ; Copy "Botlin18" to "Botlin18L"
 8B88 [03] CC8B98    4903       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4904  
                     4905  NO_CHNG_BL18:
 8B8B [03] B67B      4906       lda     Botlin19         ; Load accumulator with value in "Botlin19"
 8B8D [03] B18F      4907       cmp     Botlin19L        ; Compare it with the value in "Botlin19L"
 8B8F [03] 2705      4908       beq     NO_CHNG_BL19     ; If Z bit of CCR is set, branch to NO_CHNG_BL19
                     4909                                ;(A=M)
 8B91 [03] B78F      4910       sta     Botlin19L        ; Copy "Botlin19" to "Botlin19L"
 8B93 [03] CC8B98    4911       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4912  
                     4913  NO_CHNG_BL19:
 8B96 [03] 2004      4914       bra     NO_CHNG_BOTLIN   ; Branch to NO_CHNG_BOTLIN:
                     4915  
                     4916  BOTLIN_CHNG:
 8B98 [04] 1A53      4917       bset    LinChng,flags    ; Set "Linchng" bit of "flags" variable
 8B9A [03] 2002      4918       bra     CMP_BOTLIN_DONE  ; Branch to CMP_BOTLIN_DONE:
                     4919  
                     4920  NO_CHNG_BOTLIN:
 8B9C [04] 1B53      4921       bclr    LinChng,flags    ; Clear "Linchng" bit of "flags" variable
                     4922  
                     4923  CMP_BOTLIN_DONE:
 8B9E [04] 81        4924       rts                      ; Return from subroutine
                     4925  
                     4926  ;***************************************************************************
                     4927  ;
                     4928  ; -------------------- Ordered Table Search Subroutine ---------------------
                     4929  ;
                     4930  ;  X is pointing to the start of the first value in the table
                     4931  ;  tmp1:2 initially hold the start of table address,
                     4932  ;  then they hold the bound values
                     4933  ;  tmp3 is the end of the table ("n" elements - 1)
                     4934  ;  tmp4 is the comparison value
                     4935  ;  tmp5 is the index result - if zero then comp value is less
                     4936  ;  than beginning of table, and if equal to "n" elements then it is
                     4937  ;  rail-ed at upper end
                     4938  ;
                     4939  ;***************************************************************************
                     4940  
                     4941  ORD_TABLE_FIND:
 8B9F [03] 3F9F      4942       clr     tmp5     ; Clear tmp5 variable
 8BA1 [04] 559B      4943       ldhx    tmp1     ; Load high part of index register with value in tmp1
 8BA3 [02] F6        4944       lda     ,x            ; Load accumulator with low part of index register???
 8BA4 [03] B79B      4945       sta     tmp1     ; Copy to tmp1 variable
 8BA6 [03] B79C      4946       sta     tmp2     ; Copy to tmp2 variable
                     4947  
                     4948  REENT:
 8BA8 [01] 5C        4949       incx                    ; Increment low part of index register


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 43
MV_TECA


 8BA9 [04] 3C9F      4950       inc     tmp5            ; Increment tmp5 variable
 8BAB [05] 4E9C9B    4951       mov     tmp2,tmp1       ; Move value in tmp2 variable to tmp1 variable
 8BAE [02] F6        4952       lda     ,x              ; Load accumulator with value in index reg Lo??
 8BAF [03] B79C      4953       sta     tmp2            ; Copy to tmp2 variable
 8BB1 [03] B19E      4954       cmp     tmp4            ; Compare it with tmp4 variable
 8BB3 [03] 2206      4955       bhi     GOT_ORD_NUM     ; If higher, branch to GOT_ORD_NUM lable
 8BB5 [03] B69F      4956       lda     tmp5            ; Load accumulator with value in tmp5 variable
 8BB7 [03] B19D      4957       cmp     tmp3            ; Compare it with value in tmp3 variable
 8BB9 [03] 26ED      4958       bne     REENT           ; If the Z bit of CCR is clesr, branch to REENT:
                     4959  
                     4960  GOT_ORD_NUM:
 8BBB [04] 81        4961       rts                     ; Return from subroutine
                     4962  
                     4963  
                     4964  ;****************************************************************************
                     4965  ;
                     4966  ; ------------------ Linear Interpolation - 2D Subroutine -------------------
                     4967  ;
                     4968  ; Graph Plot         Z2
                     4969  ;                   Y2
                     4970  ;               X
                     4971  ;               Y
                     4972  ;         X1
                     4973  ;         Y1
                     4974  ;            (y2 - y1)
                     4975  ;  Y = Y1 +  --------- * (x - x1)
                     4976  ;            (x2 - x1)
                     4977  ;
                     4978  ;   tmp1 = x1
                     4979  ;   tmp2 = x2
                     4980  ;   tmp3 = y1
                     4981  ;   tmp4 = y2
                     4982  ;   tmp5 = x
                     4983  ;   tmp6 = y
                     4984  ;***************************************************************************
                     4985  
                     4986  LININTERP:
 8BBC [03] 3FA1      4987       clr     tmp7          ; Clear tmp7 variable (This is the negative slope
                     4988                             ; detection bit) (tmp7 = 0)
 8BBE [05] 4E9DA0    4989       mov     tmp3,tmp6     ; Move value in tmp3 variable to tmp6 variable
                     4990                             ; (Y1 to tmp6)
                     4991  
                     4992  CHECK_LESS_THAN:
 8BC1 [03] B69F      4993       lda     tmp5               ; Load accumulator with value in tmp5 variable
                     4994                                  ; (x)
 8BC3 [03] B19B      4995       cmp     tmp1               ; Compare it with value in tmp1 variable
                     4996                                  ; (x1)
 8BC5 [03] 2202      4997       bhi     CHECK_GREATER_THAN ; If higher, branch to CHECK_GREATER_THAN:
                     4998                                  ; (X>X1)
 8BC7 [03] 2044      4999       bra     DONE_WITH_INTERP        ; Branch to DONE_WITH_INTERP: (else (Y=Y1))
                     5000  
                     5001  CHECK_GREATER_THAN:
 8BC9 [03] B69F      5002       lda     tmp5             ; Load accumulator with value in tmp5 variable
                     5003                                ; (x)
 8BCB [03] B19C      5004       cmp     tmp2             ; Compare it with value in tmp2 variable
                     5005                                ; (X2)
 8BCD [03] 2505      5006       blo     DO_INTERP        ; If lower, branch to DO_INTERP lable
                     5007                                ; (X<X2)
 8BCF [05] 4E9EA0    5008       mov     tmp4,tmp6        ; Move value in tmp4 variable to tmp6 variable
                     5009                                ; (Y2 to tmp6)
 8BD2 [03] 2039      5010       bra     DONE_WITH_INTERP ; Branch to DONE_WITH_INTERP lable (else (Y=Y2))
                     5011  
                     5012  DO_INTERP:
 8BD4 [05] 4E9DA0    5013       mov     tmp3,tmp6        ; Move value in tmp3 variable to tmp6 variable
                     5014                                ; (Y1 to tmp6)
 8BD7 [03] B69C      5015       lda     tmp2             ; Load accumulator with value in tmp2 variable
                     5016                                ; (X2)
 8BD9 [03] B09B      5017       sub     tmp1             ; Subtract tmp1 from tmp2 (A=X2-X1)
 8BDB [03] 2730      5018       beq     DONE_WITH_INTERP ; If the Z bit of CCR is set, branch to
                     5019                                ;DONE_WITH_INTERP:  else (Y=Y1)
 8BDD [02] 87        5020       psha                     ; Push value in accumulator to stack
                     5021                                ; (X2-X1)(stack 1)
 8BDE [03] B69E      5022       lda     tmp4             ; Load accumulator with value in tmp4 variable
                     5023                                ; (Y2)
 8BE0 [03] B09D      5024       sub     tmp3             ; Subtract tmp3 from tmp4 (A=Y2-Y1)
 8BE2 [03] 2403      5025       bcc     POSINTERP        ; If C bit of CCR is clear, branch to POSINTERP:
 8BE4 [01] 40        5026       nega                     ; Negate accumulator      ??????????
 8BE5 [04] 3CA1      5027       inc     tmp7             ; Increment tmp7 variable (tmp7 = 1)
                     5028  
                     5029  POSINTERP:
 8BE7 [02] 87        5030       psha                     ; Push value in accumulator to stack
                     5031                                ; (negated Y2-Y1) (stack 2)
 8BE8 [03] B69F      5032       lda     tmp5             ; Load accumulator with value in tmp5 variable
                     5033                                ; (X)
 8BEA [03] B09B      5034       sub     tmp1             ; Subtract tmp1 from tmp5 (A=X-X1)
 8BEC [03] 271D      5035       beq     ZERO_SLOPE            ; If the Z bit of CCR is set,
                     5036                                ; branch to ZERO_SLOPE lable  (Y=Y1)
 8BEE [02] 88        5037       pulx                     ; Pull value from stack to index register Lo
                     5038                                ;(negated Y2-Y1) (stack 2)
 8BEF [05] 42        5039       mul                      ; Multiply it by the value in the accumulator
                     5040                                ; A=(negated Y2-Y1)*(X-X1)
 8BF0 [02] 89        5041       pshx                     ; Push the index register L to the stack
                     5042                                ; (stack 2)
 8BF1 [02] 8A        5043       pulh                     ; Pull this value to index register Hi(stack 2)
 8BF2 [02] 88        5044       pulx                     ; Pull the next value to index register Lo
                     5045                                ;(stack 1)
 8BF3 [07] 52        5046       div                      ; Divide A<-(H:A)/(X);H<-Remainder
 8BF4 [02] 87        5047       psha                     ; Push the value in the accumulator onto stack
                     5048                                ; (stack 1)
 8BF5 [03] B6A1      5049       lda     tmp7             ; Load accumulator with value in tmp7 variable
 8BF7 [03] 2607      5050       bne     NEG_SLOPE        ; If the Z bit of CCR is clear,
                     5051                                ; branch to NEG_SLOPE: (Y=Y1)
 8BF9 [02] 86        5052       pula                     ; Pull value from stack to accumulator (stack 1)
 8BFA [03] BB9D      5053       add     tmp3             ; Add it with value in tmp3 variable
 8BFC [03] B7A0      5054       sta     tmp6             ; Copy it to tmp6 variable
 8BFE [03] 200D      5055       bra     DONE_WITH_INTERP ; Branch to  DONE_WITH_INTERP:
                     5056  
                     5057  NEG_SLOPE:
 8C00 [02] 86        5058       pula                     ; Pull value from stack to accumulator(stack 1)
 8C01 [03] B7A1      5059       sta     tmp7             ; Copy to tmp7 variable
 8C03 [03] B69D      5060       lda     tmp3             ; Load accumulator with value in tmp3  Y1)
 8C05 [03] B0A1      5061       sub     tmp7             ; Subtract tmp7 from tmp3
 8C07 [03] B7A0      5062       sta     tmp6             ; Copy result to tmp6 variable
 8C09 [03] 2002      5063       bra     DONE_WITH_INTERP ; Branch to  DONE_WITH_INTERP:
                     5064  
                     5065  ZERO_SLOPE:
 8C0B [02] 86        5066          pula    ; Pull value from stack to accumulator (clean stack)(stack 2)
 8C0C [02] 86        5067          pula    ; Pull value from stack to accumulator (clean stack)(stack 1)
                     5068  
                     5069  DONE_WITH_INTERP:
 8C0D [04] 81        5070          rts      ; Return from subroutine
                     5071  
                     5072  ;****************************************************************************
                     5073  ;
                     5074  ; ----------------- 32 x 16 Unsigned Divide Subroutine ---------------------
                     5075  ;
                     5076  ; This routine takes the 32-bit dividend stored in INTACC1.....INTACC1+3
                     5077  ; and divides it by the 16-bit divisor stored in INTACC2:INTACC2+1.
                     5078  ; The quotient replaces the dividend and the remainder replaces the divisor.
                     5079  ;
                     5080  ;***************************************************************************
                     5081  
 8C0E                5082  UDVD32    EQU     *
                     5083  *
 8C0E                5084  DIVIDEND  EQU     INTACC1+2
 8C0E                5085  DIVISOR   EQU     INTACC2


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 44
MV_TECA


 8C0E                5086  QUOTIENT  EQU     INTACC1
 8C0E                5087  REMAINDER EQU     INTACC1
                     5088  *
 8C0E [02] 8B        5089          PSHH                            ;save h-reg value
 8C0F [02] 87        5090          PSHA                            ;save accumulator
 8C10 [02] 89        5091          PSHX                            ;save x-reg value
 8C11 [02] A7FD      5092          AIS     #-3                     ;reserve three bytes of temp storage
 8C13 [02] A620      5093          LDA     #!32                    ;
 8C15 [04] 9EE703    5094          STA     3,SP                    ;loop counter for number of shifts
 8C18 [03] B697      5095          LDA     DIVISOR                 ;get divisor msb
 8C1A [04] 9EE701    5096          STA     1,SP                    ;put divisor msb in working storage
 8C1D [03] B698      5097          LDA     DIVISOR+1               ;get divisor lsb
 8C1F [04] 9EE702    5098          STA     2,SP                    ;put divisor lsb in working storage
                     5099  
                     5100  ****************************************************************************
                     5101  *     Shift all four bytes of dividend 16 bits to the right and clear
                     5102  *     both bytes of the temporary remainder location
                     5103  ****************************************************************************
                     5104  
 8C22 [05] 4E9698    5105          MOV     DIVIDEND+1,DIVIDEND+3   ;shift dividend lsb
 8C25 [05] 4E9597    5106          MOV     DIVIDEND,DIVIDEND+2     ;shift 2nd byte of dividend
 8C28 [05] 4E9496    5107          MOV     DIVIDEND-1,DIVIDEND+1   ;shift 3rd byte of dividend
 8C2B [05] 4E9395    5108          MOV     DIVIDEND-2,DIVIDEND     ;shift dividend msb
 8C2E [03] 3F93      5109          CLR     REMAINDER               ;zero remainder msb
 8C30 [03] 3F94      5110          CLR     REMAINDER+1             ;zero remainder lsb
                     5111  
                     5112  ****************************************************************************
                     5113  *     Shift each byte of dividend and remainder one bit to the left
                     5114  ****************************************************************************
                     5115  
 8C32 [03] B693      5116  SHFTLP  LDA     REMAINDER               ;get remainder msb
 8C34 [01] 49        5117          ROLA                            ;shift remainder msb into carry
 8C35 [04] 3998      5118          ROL     DIVIDEND+3              ;shift dividend lsb
 8C37 [04] 3997      5119          ROL     DIVIDEND+2              ;shift 2nd byte of dividend
 8C39 [04] 3996      5120          ROL     DIVIDEND+1              ;shift 3rd byte of dividend
 8C3B [04] 3995      5121          ROL     DIVIDEND                ;shift dividend msb
 8C3D [04] 3994      5122          ROL     REMAINDER+1             ;shift remainder lsb
 8C3F [04] 3993      5123          ROL     REMAINDER               ;shift remainder msb
                     5124  
                     5125  *****************************************************************************
                     5126  *     Subtract both bytes of the divisor from the remainder
                     5127  *****************************************************************************
                     5128  
 8C41 [03] B694      5129          LDA     REMAINDER+1          ;get remainder lsb
 8C43 [04] 9EE002    5130          SUB     2,SP                 ;subtract divisor lsb from remainder lsb
 8C46 [03] B794      5131          STA     REMAINDER+1          ;store new remainder lsb
 8C48 [03] B693      5132          LDA     REMAINDER            ;get remainder msb
 8C4A [04] 9EE201    5133          SBC     1,SP                 ;subtract divisor msb from remainder msb
 8C4D [03] B793      5134          STA     REMAINDER            ;store new remainder msb
 8C4F [03] B698      5135          LDA     DIVIDEND+3           ;get low byte of dividend/quotient
 8C51 [02] A200      5136          SBC     #0                   ;dividend low bit holds subtract carry
 8C53 [03] B798      5137          STA     DIVIDEND+3           ;store low byte of dividend/quotient
                     5138  
                     5139  *****************************************************************************
                     5140  *     Check dividend/quotient lsb. If clear, set lsb of quotient to indicate
                     5141  *     successful subraction, else add both bytes of divisor back to remainder
                     5142  *****************************************************************************
                     5143  
 8C55 [05] 019816    5144          BRCLR   0,DIVIDEND+3,SETLSB     ;check for a carry from subtraction
                     5145                                          ;and add divisor to remainder if set
 8C58 [03] B694      5146          LDA     REMAINDER+1             ;get remainder lsb
 8C5A [04] 9EEB02    5147          ADD     2,SP                    ;add divisor lsb to remainder lsb
 8C5D [03] B794      5148          STA     REMAINDER+1             ;store remainder lsb
 8C5F [03] B693      5149          LDA     REMAINDER               ;get remainder msb
 8C61 [04] 9EE901    5150          ADC     1,SP                    ;add divisor msb to remainder msb
 8C64 [03] B793      5151          STA     REMAINDER               ;store remainder msb
 8C66 [03] B698      5152          LDA     DIVIDEND+3              ;get low byte of dividend
 8C68 [02] A900      5153          ADC     #0                      ;add carry to low bit of dividend
 8C6A [03] B798      5154          STA     DIVIDEND+3              ;store low byte of dividend
 8C6C [03] 2002      5155          BRA     DECRMT                  ;do next shift and subtract
                     5156  
 8C6E [04] 1098      5157  SETLSB  BSET    0,DIVIDEND+3            ;set lsb of quotient to indicate
                     5158                                          ;successive subtraction
 8C70 [06] 9E6B03BE  5159  DECRMT  DBNZ    3,SP,SHFTLP             ;decrement loop counter and do next
                     5160                                          ;shift
                     5161  
                     5162  *****************************************************************************
                     5163  *     Move 32-bit dividend into INTACC1.....INTACC1+3 and put 16-bit
                     5164  *     remainder in INTACC2:INTACC2+1
                     5165  *****************************************************************************
                     5166  
 8C74 [03] B693      5167          LDA     REMAINDER               ;get remainder msb
 8C76 [04] 9EE701    5168          STA     1,SP                    ;temporarily store remainder msb
 8C79 [03] B694      5169          LDA     REMAINDER+1             ;get remainder lsb
 8C7B [04] 9EE702    5170          STA     2,SP                    ;temporarily store remainder lsb
 8C7E [05] 4E9593    5171          MOV     DIVIDEND,QUOTIENT       ;
 8C81 [05] 4E9694    5172          MOV     DIVIDEND+1,QUOTIENT+1   ;shift all four bytes of quotient
 8C84 [05] 4E9795    5173          MOV     DIVIDEND+2,QUOTIENT+2   ; 16 bits to the left
 8C87 [05] 4E9896    5174          MOV     DIVIDEND+3,QUOTIENT+3   ;
 8C8A [04] 9EE601    5175          LDA     1,SP                    ;get final remainder msb
 8C8D [03] B797      5176          STA     INTACC2                 ;store final remainder msb
 8C8F [04] 9EE602    5177          LDA     2,SP                    ;get final remainder lsb
 8C92 [03] B798      5178          STA     INTACC2+1               ;store final remainder lsb
                     5179  
                     5180  *****************************************************************************
                     5181  *     Deallocate local storage, restore register values, and return from
                     5182  *     subroutine
                     5183  *****************************************************************************
                     5184  
 8C94 [02] A703      5185          AIS     #3                      ;deallocate temporary storage
 8C96 [02] 88        5186          PULX                            ;restore x-reg value
 8C97 [02] 86        5187          PULA                            ;restore accumulator value
 8C98 [02] 8A        5188          PULH                            ;restore h-reg value
 8C99 [04] 81        5189          RTS                             ;return
                     5190  
                     5191  *****************************************************************************
                     5192  
                     5193  
                     5194  ;****************************************************************************
                     5195  ; ----------  ----- ROUND after div (unsigned) Subroutine -------------------
                     5196  ;
                     5197  ;  1)  check for div overflow (carry set), rail result if detected
                     5198  ;  2)  if (remainder * 2) > divisor then     ; was remainder > (divisor / 2)
                     5199  ;  2a)    increment result, rail if over-flow
                     5200  ;
                     5201  ;****************************************************************************
                     5202  
                     5203  DIVROUND:
 8C9A [03] 250E      5204       bcs     DIVROUND0     ; If C bit of CCR is set, branch to DIVROUND0:
                     5205                             ; (div overflow? yes, branch)
 8C9C [03] BFB0      5206       stx     local_tmp     ; Copy value in index register Lo byte to
                     5207                             ; local_tmp variable (divisor)
 8C9E [02] 8B        5208       pshh                  ; Push value in index register Hi byte onto
                     5209                             ; stack (retrieve remainder)
 8C9F [02] 88        5210       pulx                  ; Pull value on stack to index register Lo byte
 8CA0 [01] 58        5211       lslx                  ; Logical shift left index register lo byte (* 2)
 8CA1 [03] 2504      5212       bcs     DIVROUND2     ; If C bit of CCR is set, branch to DIVROUND2:
                     5213                             ;(over-flow on left-shift, (remainder * 2) > $FF)
 8CA3 [03] B3B0      5214       cpx     local_tmp     ; Compare value in local_tmp variable with value
                     5215                             ; in index register Lo byte
                     5216                             ;(compare (remainder * 2) to divisor)
 8CA5 [03] 2505      5217       blo     DIVROUND1     ; If lower, branch to DIVROUND1:
                     5218  
                     5219  
                     5220  DIVROUND2:
 8CA7 [01] 4C        5221       inca                   ; Increment accumulator (round-up result)


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 45
MV_TECA


 8CA8 [03] 2602      5222       bne      DIVROUND1     ; If Z bit of CCR is clear, branch to DIVROUND1:
                     5223                              ; (result roll over? no, branch)
                     5224  
                     5225  
                     5226  DIVROUND0:
 8CAA [02] A6FF      5227       lda     #$FF     ; Load accumulator with decimal 255 (rail result)
                     5228  
                     5229  
                     5230  DIVROUND1:
 8CAC [04] 81        5231       rts              ; return from subroutine
                     5232  
                     5233  
                     5234  ;****************************************************************************
                     5235  ;
                     5236  ; ------------------- 16 x 16 Unsigned Multiply Subroutine -----------------
                     5237  ;
                     5238  ;     tmp8...tmp5 = tmp4:tmp3 * tmp2:tmp1
                     5239  ;
                     5240  ;               tmp3*tmp1
                     5241  ;   +      tmp4*tmp1
                     5242  ;   +      tmp3*tmp2
                     5243  ;   + tmp4*tmp2
                     5244  ;   = ===================
                     5245  ;     tmp8 tmp7 tmp6 tmp5
                     5246  ;
                     5247  ;****************************************************************************
                     5248  
                     5249  UMUL32:
 8CAD [03] B69B      5250       lda     tmp1           ; Load accumulator with value in tmp1 variable
 8CAF [03] BE9D      5251       ldx     tmp3           ; Load index register Lo byte with value in tmp3
 8CB1 [05] 42        5252       mul                 ; Multiply X:A<-(X)*(A)
 8CB2 [03] B79F      5253       sta     tmp5           ; Ccopy result to tmp5
 8CB4 [03] BFA0      5254       stx     tmp6           ; Copy value in index register Lo byte to tmp6
                     5255  ;
 8CB6 [03] B69C      5256       lda     tmp2           ; Load accumulator with value in tmp2
 8CB8 [03] BE9E      5257       ldx     tmp4           ; Load index register Lo byte with value in tmp4
 8CBA [05] 42        5258       mul                 ; Multiply X:A<-(X)*(A)
 8CBB [03] B7A1      5259       sta     tmp7           ; Copy result to tmp7
 8CBD [03] BFA2      5260       stx     tmp8           ; Copy value in index register Lo byte to tmp8
                     5261  ;
 8CBF [03] B69B      5262       lda     tmp1           ; Load accumulator with value in tmp1
 8CC1 [03] BE9E      5263       ldx     tmp4           ; Load index register Lo byte with value in tmp4
 8CC3 [05] 42        5264       mul                 ; Multiply X:A<-(X)*(A)
 8CC4 [03] BBA0      5265       add     tmp6           ; Add without carry, A<-(A)+(M)
 8CC6 [03] B7A0      5266       sta     tmp6           ; Copy result to tmp6
 8CC8 [01] 9F        5267       txa                 ; Transfer value in index register Lo byte
                     5268                           ; to accumulator
 8CC9 [03] B9A1      5269       adc     tmp7           ; Add with carry, A<-(A)+(M)+(C)
 8CCB [03] B7A1      5270       sta     tmp7           ; Copy result to tmp7
 8CCD [03] 2402      5271       bcc     UMUL32a     ; If C bit of CCR is clear, branch to UMUL32a:
 8CCF [04] 3CA2      5272       inc     tmp8           ; Increment value in tmp8
                     5273  
                     5274  
                     5275  UMUL32a:
 8CD1 [03] B69C      5276       lda     tmp2           ; Load accumulator with value in tmp2
 8CD3 [03] BE9D      5277       ldx     tmp3           ; Load index register Lo byte with value in tmp3
 8CD5 [05] 42        5278       mul                 ; Multiply X:A<-(X)*(A)
 8CD6 [03] BBA0      5279       add     tmp6           ; Add without carry, A<-(A)+(M)
 8CD8 [03] B7A0      5280       sta     tmp6           ; Copy result to tmp6
 8CDA [01] 9F        5281       txa                 ; Transfer value in index register Lo byte
                     5282                           ; to accumulator
 8CDB [03] B9A1      5283       adc     tmp7           ; Add with carry, A<-(A)+(M)+(C)
 8CDD [03] B7A1      5284       sta     tmp7           ; Copy result to tmp7
 8CDF [03] 2402      5285       bcc     UMUL32b     ; If C bit of CCR is clear, branch to UMUL32b:
 8CE1 [04] 3CA2      5286       inc     tmp8           ; increment value in tmp8 variable
                     5287  
                     5288  
                     5289  UMUL32b:
 8CE3 [04] 81        5290        rts                ; return from subroutine
                     5291  
                     5292  ;***************************************************************************
                     5293  ; ----------------------------- Include Files -----------------------------
                     5294  ;***************************************************************************
                     5295  
 E700                5296       org     $E700       ; Origin at Memory Location $E700=59136(uses768)
                     5297  
 E700                5298       include "ASCII_Conv_100.inc"     ; Converts 8 bit value to ASCII,
                     5299  ASCII_CONV_100:
 E700      30        5300       db     '0'     ; Decimal 0
 E701      30        5301       db     '0'     ; Decimal 1
 E702      30        5302       db     '0'     ; Decimal 2
 E703      30        5303       db     '0'     ; Decimal        3
 E704      30        5304       db     '0'     ; Decimal        4
 E705      30        5305       db     '0'     ; Decimal        5
 E706      30        5306       db     '0'     ; Decimal        6
 E707      30        5307       db     '0'     ; Decimal        7
 E708      30        5308       db     '0'     ; Decimal        8
 E709      30        5309       db     '0'     ; Decimal        9
 E70A      30        5310       db     '0'     ; Decimal        10
 E70B      30        5311       db     '0'     ; Decimal        11
 E70C      30        5312       db     '0'     ; Decimal        12
 E70D      30        5313       db     '0'     ; Decimal        13
 E70E      30        5314       db     '0'     ; Decimal        14
 E70F      30        5315       db     '0'     ; Decimal        15
 E710      30        5316       db     '0'     ; Decimal        16
 E711      30        5317       db     '0'     ; Decimal        17
 E712      30        5318       db     '0'     ; Decimal        18
 E713      30        5319       db     '0'     ; Decimal        19
 E714      30        5320       db     '0'     ; Decimal        20
 E715      30        5321       db     '0'     ; Decimal        21
 E716      30        5322       db     '0'     ; Decimal        22
 E717      30        5323       db     '0'     ; Decimal        23
 E718      30        5324       db     '0'     ; Decimal        24
 E719      30        5325       db     '0'     ; Decimal        25
 E71A      30        5326       db     '0'     ; Decimal        26
 E71B      30        5327       db     '0'     ; Decimal        27
 E71C      30        5328       db     '0'     ; Decimal        28
 E71D      30        5329       db     '0'     ; Decimal        29
 E71E      30        5330       db     '0'     ; Decimal        30
 E71F      30        5331       db     '0'     ; Decimal        31
 E720      30        5332       db     '0'     ; Decimal        32
 E721      30        5333       db     '0'     ; Decimal        33
 E722      30        5334       db     '0'     ; Decimal        34
 E723      30        5335       db     '0'     ; Decimal        35
 E724      30        5336       db     '0'     ; Decimal        36
 E725      30        5337       db     '0'     ; Decimal        37
 E726      30        5338       db     '0'     ; Decimal        38
 E727      30        5339       db     '0'     ; Decimal        39
 E728      30        5340       db     '0'     ; Decimal        40
 E729      30        5341       db     '0'     ; Decimal        41
 E72A      30        5342       db     '0'     ; Decimal        42
 E72B      30        5343       db     '0'     ; Decimal        43
 E72C      30        5344       db     '0'     ; Decimal        44
 E72D      30        5345       db     '0'     ; Decimal        45
 E72E      30        5346       db     '0'     ; Decimal        46
 E72F      30        5347       db     '0'     ; Decimal        47
 E730      30        5348       db     '0'     ; Decimal        48
 E731      30        5349       db     '0'     ; Decimal        49
 E732      30        5350       db     '0'     ; Decimal        50
 E733      30        5351       db     '0'     ; Decimal        51
 E734      30        5352       db     '0'     ; Decimal        52
 E735      30        5353       db     '0'     ; Decimal        53
 E736      30        5354       db     '0'     ; Decimal        54
 E737      30        5355       db     '0'     ; Decimal        55
 E738      30        5356       db     '0'     ; Decimal        56
 E739      30        5357       db     '0'     ; Decimal        57


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 46
MV_TECA


 E73A      30        5358       db     '0'     ; Decimal        58
 E73B      30        5359       db     '0'     ; Decimal        59
 E73C      30        5360       db     '0'     ; Decimal        60
 E73D      30        5361       db     '0'     ; Decimal        61
 E73E      30        5362       db     '0'     ; Decimal        62
 E73F      30        5363       db     '0'     ; Decimal        63
 E740      30        5364       db     '0'     ; Decimal        64
 E741      30        5365       db     '0'     ; Decimal        65
 E742      30        5366       db     '0'     ; Decimal        66
 E743      30        5367       db     '0'     ; Decimal        67
 E744      30        5368       db     '0'     ; Decimal        68
 E745      30        5369       db     '0'     ; Decimal        69
 E746      30        5370       db     '0'     ; Decimal        70
 E747      30        5371       db     '0'     ; Decimal        71
 E748      30        5372       db     '0'     ; Decimal        72
 E749      30        5373       db     '0'     ; Decimal        73
 E74A      30        5374       db     '0'     ; Decimal        74
 E74B      30        5375       db     '0'     ; Decimal        75
 E74C      30        5376       db     '0'     ; Decimal        76
 E74D      30        5377       db     '0'     ; Decimal        77
 E74E      30        5378       db     '0'     ; Decimal        78
 E74F      30        5379       db     '0'     ; Decimal        79
 E750      30        5380       db     '0'     ; Decimal        80
 E751      30        5381       db     '0'     ; Decimal        81
 E752      30        5382       db     '0'     ; Decimal        82
 E753      30        5383       db     '0'     ; Decimal        83
 E754      30        5384       db     '0'     ; Decimal        84
 E755      30        5385       db     '0'     ; Decimal        85
 E756      30        5386       db     '0'     ; Decimal        86
 E757      30        5387       db     '0'     ; Decimal        87
 E758      30        5388       db     '0'     ; Decimal        88
 E759      30        5389       db     '0'     ; Decimal        89
 E75A      30        5390       db     '0'     ; Decimal        90
 E75B      30        5391       db     '0'     ; Decimal        91
 E75C      30        5392       db     '0'     ; Decimal        92
 E75D      30        5393       db     '0'     ; Decimal        93
 E75E      30        5394       db     '0'     ; Decimal        94
 E75F      30        5395       db     '0'     ; Decimal        95
 E760      30        5396       db     '0'     ; Decimal        96
 E761      30        5397       db     '0'     ; Decimal        97
 E762      30        5398       db     '0'     ; Decimal        98
 E763      30        5399       db     '0'     ; Decimal        99
 E764      31        5400       db     '1'     ; Decimal        100
 E765      31        5401       db     '1'     ; Decimal        101
 E766      31        5402       db     '1'     ; Decimal        102
 E767      31        5403       db     '1'     ; Decimal        103
 E768      31        5404       db     '1'     ; Decimal        104
 E769      31        5405       db     '1'     ; Decimal        105
 E76A      31        5406       db     '1'     ; Decimal        106
 E76B      31        5407       db     '1'     ; Decimal        107
 E76C      31        5408       db     '1'     ; Decimal        108
 E76D      31        5409       db     '1'     ; Decimal        109
 E76E      31        5410       db     '1'     ; Decimal        110
 E76F      31        5411       db     '1'     ; Decimal        111
 E770      31        5412       db     '1'     ; Decimal        112
 E771      31        5413       db     '1'     ; Decimal        113
 E772      31        5414       db     '1'     ; Decimal        114
 E773      31        5415       db     '1'     ; Decimal        115
 E774      31        5416       db     '1'     ; Decimal        116
 E775      31        5417       db     '1'     ; Decimal        117
 E776      31        5418       db     '1'     ; Decimal        118
 E777      31        5419       db     '1'     ; Decimal        119
 E778      31        5420       db     '1'     ; Decimal        120
 E779      31        5421       db     '1'     ; Decimal        121
 E77A      31        5422       db     '1'     ; Decimal        122
 E77B      31        5423       db     '1'     ; Decimal        123
 E77C      31        5424       db     '1'     ; Decimal        124
 E77D      31        5425       db     '1'     ; Decimal        125
 E77E      31        5426       db     '1'     ; Decimal        126
 E77F      31        5427       db     '1'     ; Decimal        127
 E780      31        5428       db     '1'     ; Decimal        128
 E781      31        5429       db     '1'     ; Decimal        129
 E782      31        5430       db     '1'     ; Decimal        130
 E783      31        5431       db     '1'     ; Decimal        131
 E784      31        5432       db     '1'     ; Decimal        132
 E785      31        5433       db     '1'     ; Decimal        133
 E786      31        5434       db     '1'     ; Decimal        134
 E787      31        5435       db     '1'     ; Decimal        135
 E788      31        5436       db     '1'     ; Decimal        136
 E789      31        5437       db     '1'     ; Decimal        137
 E78A      31        5438       db     '1'     ; Decimal        138
 E78B      31        5439       db     '1'     ; Decimal        139
 E78C      31        5440       db     '1'     ; Decimal        140
 E78D      31        5441       db     '1'     ; Decimal        141
 E78E      31        5442       db     '1'     ; Decimal        142
 E78F      31        5443       db     '1'     ; Decimal        143
 E790      31        5444       db     '1'     ; Decimal        144
 E791      31        5445       db     '1'     ; Decimal        145
 E792      31        5446       db     '1'     ; Decimal        146
 E793      31        5447       db     '1'     ; Decimal        147
 E794      31        5448       db     '1'     ; Decimal        148
 E795      31        5449       db     '1'     ; Decimal        149
 E796      31        5450       db     '1'     ; Decimal        150
 E797      31        5451       db     '1'     ; Decimal        151
 E798      31        5452       db     '1'     ; Decimal        152
 E799      31        5453       db     '1'     ; Decimal        153
 E79A      31        5454       db     '1'     ; Decimal        154
 E79B      31        5455       db     '1'     ; Decimal        155
 E79C      31        5456       db     '1'     ; Decimal        156
 E79D      31        5457       db     '1'     ; Decimal        157
 E79E      31        5458       db     '1'     ; Decimal        158
 E79F      31        5459       db     '1'     ; Decimal        159
 E7A0      31        5460       db     '1'     ; Decimal        160
 E7A1      31        5461       db     '1'     ; Decimal        161
 E7A2      31        5462       db     '1'     ; Decimal        162
 E7A3      31        5463       db     '1'     ; Decimal        163
 E7A4      31        5464       db     '1'     ; Decimal        164
 E7A5      31        5465       db     '1'     ; Decimal        165
 E7A6      31        5466       db     '1'     ; Decimal        166
 E7A7      31        5467       db     '1'     ; Decimal        167
 E7A8      31        5468       db     '1'     ; Decimal        168
 E7A9      31        5469       db     '1'     ; Decimal        169
 E7AA      31        5470       db     '1'     ; Decimal        170
 E7AB      31        5471       db     '1'     ; Decimal        171
 E7AC      31        5472       db     '1'     ; Decimal        172
 E7AD      31        5473       db     '1'     ; Decimal        173
 E7AE      31        5474       db     '1'     ; Decimal        174
 E7AF      31        5475       db     '1'     ; Decimal        175
 E7B0      31        5476       db     '1'     ; Decimal        176
 E7B1      31        5477       db     '1'     ; Decimal        177
 E7B2      31        5478       db     '1'     ; Decimal        178
 E7B3      31        5479       db     '1'     ; Decimal        179
 E7B4      31        5480       db     '1'     ; Decimal        180
 E7B5      31        5481       db     '1'     ; Decimal        181
 E7B6      31        5482       db     '1'     ; Decimal        182
 E7B7      31        5483       db     '1'     ; Decimal        183
 E7B8      31        5484       db     '1'     ; Decimal        184
 E7B9      31        5485       db     '1'     ; Decimal        185
 E7BA      31        5486       db     '1'     ; Decimal        186
 E7BB      31        5487       db     '1'     ; Decimal        187
 E7BC      31        5488       db     '1'     ; Decimal        188
 E7BD      31        5489       db     '1'     ; Decimal        189
 E7BE      31        5490       db     '1'     ; Decimal        190
 E7BF      31        5491       db     '1'     ; Decimal        191
 E7C0      31        5492       db     '1'     ; Decimal        192
 E7C1      31        5493       db     '1'     ; Decimal        193


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 47
MV_TECA


 E7C2      31        5494       db     '1'     ; Decimal        194
 E7C3      31        5495       db     '1'     ; Decimal        195
 E7C4      31        5496       db     '1'     ; Decimal        196
 E7C5      31        5497       db     '1'     ; Decimal        197
 E7C6      31        5498       db     '1'     ; Decimal        198
 E7C7      31        5499       db     '1'     ; Decimal        199
 E7C8      32        5500       db     '2'     ; Decimal        200
 E7C9      32        5501       db     '2'     ; Decimal        201
 E7CA      32        5502       db     '2'     ; Decimal        202
 E7CB      32        5503       db     '2'     ; Decimal        203
 E7CC      32        5504       db     '2'     ; Decimal        204
 E7CD      32        5505       db     '2'     ; Decimal        205
 E7CE      32        5506       db     '2'     ; Decimal        206
 E7CF      32        5507       db     '2'     ; Decimal        207
 E7D0      32        5508       db     '2'     ; Decimal        208
 E7D1      32        5509       db     '2'     ; Decimal        209
 E7D2      32        5510       db     '2'     ; Decimal        210
 E7D3      32        5511       db     '2'     ; Decimal        211
 E7D4      32        5512       db     '2'     ; Decimal        212
 E7D5      32        5513       db     '2'     ; Decimal        213
 E7D6      32        5514       db     '2'     ; Decimal        214
 E7D7      32        5515       db     '2'     ; Decimal        215
 E7D8      32        5516       db     '2'     ; Decimal        216
 E7D9      32        5517       db     '2'     ; Decimal        217
 E7DA      32        5518       db     '2'     ; Decimal        218
 E7DB      32        5519       db     '2'     ; Decimal        219
 E7DC      32        5520       db     '2'     ; Decimal        220
 E7DD      32        5521       db     '2'     ; Decimal        221
 E7DE      32        5522       db     '2'     ; Decimal        222
 E7DF      32        5523       db     '2'     ; Decimal        223
 E7E0      32        5524       db     '2'     ; Decimal        224
 E7E1      32        5525       db     '2'     ; Decimal        225
 E7E2      32        5526       db     '2'     ; Decimal        226
 E7E3      32        5527       db     '2'     ; Decimal        227
 E7E4      32        5528       db     '2'     ; Decimal        228
 E7E5      32        5529       db     '2'     ; Decimal        229
 E7E6      32        5530       db     '2'     ; Decimal        230
 E7E7      32        5531       db     '2'     ; Decimal        231
 E7E8      32        5532       db     '2'     ; Decimal        232
 E7E9      32        5533       db     '2'     ; Decimal        233
 E7EA      32        5534       db     '2'     ; Decimal        234
 E7EB      32        5535       db     '2'     ; Decimal        235
 E7EC      32        5536       db     '2'     ; Decimal        236
 E7ED      32        5537       db     '2'     ; Decimal        237
 E7EE      32        5538       db     '2'     ; Decimal        238
 E7EF      32        5539       db     '2'     ; Decimal        239
 E7F0      32        5540       db     '2'     ; Decimal        240
 E7F1      32        5541       db     '2'     ; Decimal        241
 E7F2      32        5542       db     '2'     ; Decimal        242
 E7F3      32        5543       db     '2'     ; Decimal        243
 E7F4      32        5544       db     '2'     ; Decimal        244
 E7F5      32        5545       db     '2'     ; Decimal        245
 E7F6      32        5546       db     '2'     ; Decimal        246
 E7F7      32        5547       db     '2'     ; Decimal        247
 E7F8      32        5548       db     '2'     ; Decimal        248
 E7F9      32        5549       db     '2'     ; Decimal        249
 E7FA      32        5550       db     '2'     ; Decimal        250
 E7FB      32        5551       db     '2'     ; Decimal        251
 E7FC      32        5552       db     '2'     ; Decimal        252
 E7FD      32        5553       db     '2'     ; Decimal        253
 E7FE      32        5554       db     '2'     ; Decimal        254
 E7FF      32        5555       db     '2'     ; Decimal        255
                     5556                                        ; 100s column
 E800                5557       include "ASCII_Conv_10.inc"      ; Converts 8 bit value to ASCII,
                     5558  ASCII_CONV_10:
 E800      30        5559       db     '0'     ; Decimal 0
 E801      30        5560       db     '0'     ; Decimal 1
 E802      30        5561       db     '0'     ; Decimal 2
 E803      30        5562       db     '0'     ; Decimal        3
 E804      30        5563       db     '0'     ; Decimal        4
 E805      30        5564       db     '0'     ; Decimal        5
 E806      30        5565       db     '0'     ; Decimal        6
 E807      30        5566       db     '0'     ; Decimal        7
 E808      30        5567       db     '0'     ; Decimal        8
 E809      30        5568       db     '0'     ; Decimal        9
 E80A      31        5569       db     '1'     ; Decimal        10
 E80B      31        5570       db     '1'     ; Decimal        11
 E80C      31        5571       db     '1'     ; Decimal        12
 E80D      31        5572       db     '1'     ; Decimal        13
 E80E      31        5573       db     '1'     ; Decimal        14
 E80F      31        5574       db     '1'     ; Decimal        15
 E810      31        5575       db     '1'     ; Decimal        16
 E811      31        5576       db     '1'     ; Decimal        17
 E812      31        5577       db     '1'     ; Decimal        18
 E813      31        5578       db     '1'     ; Decimal        19
 E814      32        5579       db     '2'     ; Decimal        20
 E815      32        5580       db     '2'     ; Decimal        21
 E816      32        5581       db     '2'     ; Decimal        22
 E817      32        5582       db     '2'     ; Decimal        23
 E818      32        5583       db     '2'     ; Decimal        24
 E819      32        5584       db     '2'     ; Decimal        25
 E81A      32        5585       db     '2'     ; Decimal        26
 E81B      32        5586       db     '2'     ; Decimal        27
 E81C      32        5587       db     '2'     ; Decimal        28
 E81D      32        5588       db     '2'     ; Decimal        29
 E81E      33        5589       db     '3'     ; Decimal        30
 E81F      33        5590       db     '3'     ; Decimal        31
 E820      33        5591       db     '3'     ; Decimal        32
 E821      33        5592       db     '3'     ; Decimal        33
 E822      33        5593       db     '3'     ; Decimal        34
 E823      33        5594       db     '3'     ; Decimal        35
 E824      33        5595       db     '3'     ; Decimal        36
 E825      33        5596       db     '3'     ; Decimal        37
 E826      33        5597       db     '3'     ; Decimal        38
 E827      33        5598       db     '3'     ; Decimal        39
 E828      34        5599       db     '4'     ; Decimal        40
 E829      34        5600       db     '4'     ; Decimal        41
 E82A      34        5601       db     '4'     ; Decimal        42
 E82B      34        5602       db     '4'     ; Decimal        43
 E82C      34        5603       db     '4'     ; Decimal        44
 E82D      34        5604       db     '4'     ; Decimal        45
 E82E      34        5605       db     '4'     ; Decimal        46
 E82F      34        5606       db     '4'     ; Decimal        47
 E830      34        5607       db     '4'     ; Decimal        48
 E831      34        5608       db     '4'     ; Decimal        49
 E832      35        5609       db     '5'     ; Decimal        50
 E833      35        5610       db     '5'     ; Decimal        51
 E834      35        5611       db     '5'     ; Decimal        52
 E835      35        5612       db     '5'     ; Decimal        53
 E836      35        5613       db     '5'     ; Decimal        54
 E837      35        5614       db     '5'     ; Decimal        55
 E838      35        5615       db     '5'     ; Decimal        56
 E839      35        5616       db     '5'     ; Decimal        57
 E83A      35        5617       db     '5'     ; Decimal        58
 E83B      35        5618       db     '5'     ; Decimal        59
 E83C      36        5619       db     '6'     ; Decimal        60
 E83D      36        5620       db     '6'     ; Decimal        61
 E83E      36        5621       db     '6'     ; Decimal        62
 E83F      36        5622       db     '6'     ; Decimal        63
 E840      36        5623       db     '6'     ; Decimal        64
 E841      36        5624       db     '6'     ; Decimal        65
 E842      36        5625       db     '6'     ; Decimal        66
 E843      36        5626       db     '6'     ; Decimal        67
 E844      36        5627       db     '6'     ; Decimal        68
 E845      36        5628       db     '6'     ; Decimal        69
 E846      37        5629       db     '7'     ; Decimal        70


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 48
MV_TECA


 E847      37        5630       db     '7'     ; Decimal        71
 E848      37        5631       db     '7'     ; Decimal        72
 E849      37        5632       db     '7'     ; Decimal        73
 E84A      37        5633       db     '7'     ; Decimal        74
 E84B      37        5634       db     '7'     ; Decimal        75
 E84C      37        5635       db     '7'     ; Decimal        76
 E84D      37        5636       db     '7'     ; Decimal        77
 E84E      37        5637       db     '7'     ; Decimal        78
 E84F      37        5638       db     '7'     ; Decimal        79
 E850      38        5639       db     '8'     ; Decimal        80
 E851      38        5640       db     '8'     ; Decimal        81
 E852      38        5641       db     '8'     ; Decimal        82
 E853      38        5642       db     '8'     ; Decimal        83
 E854      38        5643       db     '8'     ; Decimal        84
 E855      38        5644       db     '8'     ; Decimal        85
 E856      38        5645       db     '8'     ; Decimal        86
 E857      38        5646       db     '8'     ; Decimal        87
 E858      38        5647       db     '8'     ; Decimal        88
 E859      38        5648       db     '8'     ; Decimal        89
 E85A      39        5649       db     '9'     ; Decimal        90
 E85B      39        5650       db     '9'     ; Decimal        91
 E85C      39        5651       db     '9'     ; Decimal        92
 E85D      39        5652       db     '9'     ; Decimal        93
 E85E      39        5653       db     '9'     ; Decimal        94
 E85F      39        5654       db     '9'     ; Decimal        95
 E860      39        5655       db     '9'     ; Decimal        96
 E861      39        5656       db     '9'     ; Decimal        97
 E862      39        5657       db     '9'     ; Decimal        98
 E863      39        5658       db     '9'     ; Decimal        99
 E864      30        5659       db     '0'     ; Decimal        100
 E865      30        5660       db     '0'     ; Decimal        101
 E866      30        5661       db     '0'     ; Decimal        102
 E867      30        5662       db     '0'     ; Decimal        103
 E868      30        5663       db     '0'     ; Decimal        104
 E869      30        5664       db     '0'     ; Decimal        105
 E86A      30        5665       db     '0'     ; Decimal        106
 E86B      30        5666       db     '0'     ; Decimal        107
 E86C      30        5667       db     '0'     ; Decimal        108
 E86D      30        5668       db     '0'     ; Decimal        109
 E86E      31        5669       db     '1'     ; Decimal        110
 E86F      31        5670       db     '1'     ; Decimal        111
 E870      31        5671       db     '1'     ; Decimal        112
 E871      31        5672       db     '1'     ; Decimal        113
 E872      31        5673       db     '1'     ; Decimal        114
 E873      31        5674       db     '1'     ; Decimal        115
 E874      31        5675       db     '1'     ; Decimal        116
 E875      31        5676       db     '1'     ; Decimal        117
 E876      31        5677       db     '1'     ; Decimal        118
 E877      31        5678       db     '1'     ; Decimal        119
 E878      32        5679       db     '2'     ; Decimal        120
 E879      32        5680       db     '2'     ; Decimal        121
 E87A      32        5681       db     '2'     ; Decimal        122
 E87B      32        5682       db     '2'     ; Decimal        123
 E87C      32        5683       db     '2'     ; Decimal        124
 E87D      32        5684       db     '2'     ; Decimal        125
 E87E      32        5685       db     '2'     ; Decimal        126
 E87F      32        5686       db     '2'     ; Decimal        127
 E880      32        5687       db     '2'     ; Decimal        128
 E881      32        5688       db     '2'     ; Decimal        129
 E882      33        5689       db     '3'     ; Decimal        130
 E883      33        5690       db     '3'     ; Decimal        131
 E884      33        5691       db     '3'     ; Decimal        132
 E885      33        5692       db     '3'     ; Decimal        133
 E886      33        5693       db     '3'     ; Decimal        134
 E887      33        5694       db     '3'     ; Decimal        135
 E888      33        5695       db     '3'     ; Decimal        136
 E889      33        5696       db     '3'     ; Decimal        137
 E88A      33        5697       db     '3'     ; Decimal        138
 E88B      33        5698       db     '3'     ; Decimal        139
 E88C      34        5699       db     '4'     ; Decimal        140
 E88D      34        5700       db     '4'     ; Decimal        141
 E88E      34        5701       db     '4'     ; Decimal        142
 E88F      34        5702       db     '4'     ; Decimal        143
 E890      34        5703       db     '4'     ; Decimal        144
 E891      34        5704       db     '4'     ; Decimal        145
 E892      34        5705       db     '4'     ; Decimal        146
 E893      34        5706       db     '4'     ; Decimal        147
 E894      34        5707       db     '4'     ; Decimal        148
 E895      34        5708       db     '4'     ; Decimal        149
 E896      35        5709       db     '5'     ; Decimal        150
 E897      35        5710       db     '5'     ; Decimal        151
 E898      35        5711       db     '5'     ; Decimal        152
 E899      35        5712       db     '5'     ; Decimal        153
 E89A      35        5713       db     '5'     ; Decimal        154
 E89B      35        5714       db     '5'     ; Decimal        155
 E89C      35        5715       db     '5'     ; Decimal        156
 E89D      35        5716       db     '5'     ; Decimal        157
 E89E      35        5717       db     '5'     ; Decimal        158
 E89F      35        5718       db     '5'     ; Decimal        159
 E8A0      36        5719       db     '6'     ; Decimal        160
 E8A1      36        5720       db     '6'     ; Decimal        161
 E8A2      36        5721       db     '6'     ; Decimal        162
 E8A3      36        5722       db     '6'     ; Decimal        163
 E8A4      36        5723       db     '6'     ; Decimal        164
 E8A5      36        5724       db     '6'     ; Decimal        165
 E8A6      36        5725       db     '6'     ; Decimal        166
 E8A7      36        5726       db     '6'     ; Decimal        167
 E8A8      36        5727       db     '6'     ; Decimal        168
 E8A9      36        5728       db     '6'     ; Decimal        169
 E8AA      37        5729       db     '7'     ; Decimal        170
 E8AB      37        5730       db     '7'     ; Decimal        171
 E8AC      37        5731       db     '7'     ; Decimal        172
 E8AD      37        5732       db     '7'     ; Decimal        173
 E8AE      37        5733       db     '7'     ; Decimal        174
 E8AF      37        5734       db     '7'     ; Decimal        175
 E8B0      37        5735       db     '7'     ; Decimal        176
 E8B1      37        5736       db     '7'     ; Decimal        177
 E8B2      37        5737       db     '7'     ; Decimal        178
 E8B3      37        5738       db     '7'     ; Decimal        179
 E8B4      38        5739       db     '8'     ; Decimal        180
 E8B5      38        5740       db     '8'     ; Decimal        181
 E8B6      38        5741       db     '8'     ; Decimal        182
 E8B7      38        5742       db     '8'     ; Decimal        183
 E8B8      38        5743       db     '8'     ; Decimal        184
 E8B9      38        5744       db     '8'     ; Decimal        185
 E8BA      38        5745       db     '8'     ; Decimal        186
 E8BB      38        5746       db     '8'     ; Decimal        187
 E8BC      38        5747       db     '8'     ; Decimal        188
 E8BD      38        5748       db     '8'     ; Decimal        189
 E8BE      39        5749       db     '9'     ; Decimal        190
 E8BF      39        5750       db     '9'     ; Decimal        191
 E8C0      39        5751       db     '9'     ; Decimal        192
 E8C1      39        5752       db     '9'     ; Decimal        193
 E8C2      39        5753       db     '9'     ; Decimal        194
 E8C3      39        5754       db     '9'     ; Decimal        195
 E8C4      39        5755       db     '9'     ; Decimal        196
 E8C5      39        5756       db     '9'     ; Decimal        197
 E8C6      39        5757       db     '9'     ; Decimal        198
 E8C7      39        5758       db     '9'     ; Decimal        199
 E8C8      30        5759       db     '0'     ; Decimal        200
 E8C9      30        5760       db     '0'     ; Decimal        201
 E8CA      30        5761       db     '0'     ; Decimal        202
 E8CB      30        5762       db     '0'     ; Decimal        203
 E8CC      30        5763       db     '0'     ; Decimal        204
 E8CD      30        5764       db     '0'     ; Decimal        205
 E8CE      30        5765       db     '0'     ; Decimal        206


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 49
MV_TECA


 E8CF      30        5766       db     '0'     ; Decimal        207
 E8D0      30        5767       db     '0'     ; Decimal        208
 E8D1      30        5768       db     '0'     ; Decimal        209
 E8D2      31        5769       db     '1'     ; Decimal        210
 E8D3      31        5770       db     '1'     ; Decimal        211
 E8D4      31        5771       db     '1'     ; Decimal        212
 E8D5      31        5772       db     '1'     ; Decimal        213
 E8D6      31        5773       db     '1'     ; Decimal        214
 E8D7      31        5774       db     '1'     ; Decimal        215
 E8D8      31        5775       db     '1'     ; Decimal        216
 E8D9      31        5776       db     '1'     ; Decimal        217
 E8DA      31        5777       db     '1'     ; Decimal        218
 E8DB      31        5778       db     '1'     ; Decimal        219
 E8DC      32        5779       db     '2'     ; Decimal        220
 E8DD      32        5780       db     '2'     ; Decimal        221
 E8DE      32        5781       db     '2'     ; Decimal        222
 E8DF      32        5782       db     '2'     ; Decimal        223
 E8E0      32        5783       db     '2'     ; Decimal        224
 E8E1      32        5784       db     '2'     ; Decimal        225
 E8E2      32        5785       db     '2'     ; Decimal        226
 E8E3      32        5786       db     '2'     ; Decimal        227
 E8E4      32        5787       db     '2'     ; Decimal        228
 E8E5      32        5788       db     '2'     ; Decimal        229
 E8E6      33        5789       db     '3'     ; Decimal        230
 E8E7      33        5790       db     '3'     ; Decimal        231
 E8E8      33        5791       db     '3'     ; Decimal        232
 E8E9      33        5792       db     '3'     ; Decimal        233
 E8EA      33        5793       db     '3'     ; Decimal        234
 E8EB      33        5794       db     '3'     ; Decimal        235
 E8EC      33        5795       db     '3'     ; Decimal        236
 E8ED      33        5796       db     '3'     ; Decimal        237
 E8EE      33        5797       db     '3'     ; Decimal        238
 E8EF      33        5798       db     '3'     ; Decimal        239
 E8F0      34        5799       db     '4'     ; Decimal        240
 E8F1      34        5800       db     '4'     ; Decimal        241
 E8F2      34        5801       db     '4'     ; Decimal        242
 E8F3      34        5802       db     '4'     ; Decimal        243
 E8F4      34        5803       db     '4'     ; Decimal        244
 E8F5      34        5804       db     '4'     ; Decimal        245
 E8F6      34        5805       db     '4'     ; Decimal        246
 E8F7      34        5806       db     '4'     ; Decimal        247
 E8F8      34        5807       db     '4'     ; Decimal        248
 E8F9      34        5808       db     '4'     ; Decimal        249
 E8FA      35        5809       db     '5'     ; Decimal        250
 E8FB      35        5810       db     '5'     ; Decimal        251
 E8FC      35        5811       db     '5'     ; Decimal        252
 E8FD      35        5812       db     '5'     ; Decimal        253
 E8FE      35        5813       db     '5'     ; Decimal        254
 E8FF      35        5814       db     '5'     ; Decimal        255
                     5815                                        ; 10s column
 E900                5816       include "ASCII_Conv_1.inc"       ; Converts 8 bit value to ASCII,
                     5817  ASCII_CONV_1:
 E900      30        5818       db     '0'     ; Decimal 0
 E901      31        5819       db     '1'     ; Decimal 1
 E902      32        5820       db     '2'     ; Decimal 2
 E903      33        5821       db     '3'     ; Decimal        3
 E904      34        5822       db     '4'     ; Decimal        4
 E905      35        5823       db     '5'     ; Decimal        5
 E906      36        5824       db     '6'     ; Decimal        6
 E907      37        5825       db     '7'     ; Decimal        7
 E908      38        5826       db     '8'     ; Decimal        8
 E909      39        5827       db     '9'     ; Decimal        9
 E90A      30        5828       db     '0'     ; Decimal        10
 E90B      31        5829       db     '1'     ; Decimal        11
 E90C      32        5830       db     '2'     ; Decimal        12
 E90D      33        5831       db     '3'     ; Decimal        13
 E90E      34        5832       db     '4'     ; Decimal        14
 E90F      35        5833       db     '5'     ; Decimal        15
 E910      36        5834       db     '6'     ; Decimal        16
 E911      37        5835       db     '7'     ; Decimal        17
 E912      38        5836       db     '8'     ; Decimal        18
 E913      39        5837       db     '9'     ; Decimal        19
 E914      30        5838       db     '0'     ; Decimal        20
 E915      31        5839       db     '1'     ; Decimal        21
 E916      32        5840       db     '2'     ; Decimal        22
 E917      33        5841       db     '3'     ; Decimal        23
 E918      34        5842       db     '4'     ; Decimal        24
 E919      35        5843       db     '5'     ; Decimal        25
 E91A      36        5844       db     '6'     ; Decimal        26
 E91B      37        5845       db     '7'     ; Decimal        27
 E91C      38        5846       db     '8'     ; Decimal        28
 E91D      39        5847       db     '9'     ; Decimal        29
 E91E      30        5848       db     '0'     ; Decimal        30
 E91F      31        5849       db     '1'     ; Decimal        31
 E920      32        5850       db     '2'     ; Decimal        32
 E921      33        5851       db     '3'     ; Decimal        33
 E922      34        5852       db     '4'     ; Decimal        34
 E923      35        5853       db     '5'     ; Decimal        35
 E924      36        5854       db     '6'     ; Decimal        36
 E925      37        5855       db     '7'     ; Decimal        37
 E926      38        5856       db     '8'     ; Decimal        38
 E927      39        5857       db     '9'     ; Decimal        39
 E928      30        5858       db     '0'     ; Decimal        40
 E929      31        5859       db     '1'     ; Decimal        41
 E92A      32        5860       db     '2'     ; Decimal        42
 E92B      33        5861       db     '3'     ; Decimal        43
 E92C      34        5862       db     '4'     ; Decimal        44
 E92D      35        5863       db     '5'     ; Decimal        45
 E92E      36        5864       db     '6'     ; Decimal        46
 E92F      37        5865       db     '7'     ; Decimal        47
 E930      38        5866       db     '8'     ; Decimal        48
 E931      39        5867       db     '9'     ; Decimal        49
 E932      30        5868       db     '0'     ; Decimal        50
 E933      31        5869       db     '1'     ; Decimal        51
 E934      32        5870       db     '2'     ; Decimal        52
 E935      33        5871       db     '3'     ; Decimal        53
 E936      34        5872       db     '4'     ; Decimal        54
 E937      35        5873       db     '5'     ; Decimal        55
 E938      36        5874       db     '6'     ; Decimal        56
 E939      37        5875       db     '7'     ; Decimal        57
 E93A      38        5876       db     '8'     ; Decimal        58
 E93B      39        5877       db     '9'     ; Decimal        59
 E93C      30        5878       db     '0'     ; Decimal        60
 E93D      31        5879       db     '1'     ; Decimal        61
 E93E      32        5880       db     '2'     ; Decimal        62
 E93F      33        5881       db     '3'     ; Decimal        63
 E940      34        5882       db     '4'     ; Decimal        64
 E941      35        5883       db     '5'     ; Decimal        65
 E942      36        5884       db     '6'     ; Decimal        66
 E943      37        5885       db     '7'     ; Decimal        67
 E944      38        5886       db     '8'     ; Decimal        68
 E945      39        5887       db     '9'     ; Decimal        69
 E946      30        5888       db     '0'     ; Decimal        70
 E947      31        5889       db     '1'     ; Decimal        71
 E948      32        5890       db     '2'     ; Decimal        72
 E949      33        5891       db     '3'     ; Decimal        73
 E94A      34        5892       db     '4'     ; Decimal        74
 E94B      35        5893       db     '5'     ; Decimal        75
 E94C      36        5894       db     '6'     ; Decimal        76
 E94D      37        5895       db     '7'     ; Decimal        77
 E94E      38        5896       db     '8'     ; Decimal        78
 E94F      39        5897       db     '9'     ; Decimal        79
 E950      30        5898       db     '0'     ; Decimal        80
 E951      31        5899       db     '1'     ; Decimal        81
 E952      32        5900       db     '2'     ; Decimal        82
 E953      33        5901       db     '3'     ; Decimal        83


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 50
MV_TECA


 E954      34        5902       db     '4'     ; Decimal        84
 E955      35        5903       db     '5'     ; Decimal        85
 E956      36        5904       db     '6'     ; Decimal        86
 E957      37        5905       db     '7'     ; Decimal        87
 E958      38        5906       db     '8'     ; Decimal        88
 E959      39        5907       db     '9'     ; Decimal        89
 E95A      30        5908       db     '0'     ; Decimal        90
 E95B      31        5909       db     '1'     ; Decimal        91
 E95C      32        5910       db     '2'     ; Decimal        92
 E95D      33        5911       db     '3'     ; Decimal        93
 E95E      34        5912       db     '4'     ; Decimal        94
 E95F      35        5913       db     '5'     ; Decimal        95
 E960      36        5914       db     '6'     ; Decimal        96
 E961      37        5915       db     '7'     ; Decimal        97
 E962      38        5916       db     '8'     ; Decimal        98
 E963      39        5917       db     '9'     ; Decimal        99
 E964      30        5918       db     '0'     ; Decimal        100
 E965      31        5919       db     '1'     ; Decimal        101
 E966      32        5920       db     '2'     ; Decimal        102
 E967      33        5921       db     '3'     ; Decimal        103
 E968      34        5922       db     '4'     ; Decimal        104
 E969      35        5923       db     '5'     ; Decimal        105
 E96A      36        5924       db     '6'     ; Decimal        106
 E96B      37        5925       db     '7'     ; Decimal        107
 E96C      38        5926       db     '8'     ; Decimal        108
 E96D      39        5927       db     '9'     ; Decimal        109
 E96E      30        5928       db     '0'     ; Decimal        110
 E96F      31        5929       db     '1'     ; Decimal        111
 E970      32        5930       db     '2'     ; Decimal        112
 E971      33        5931       db     '3'     ; Decimal        113
 E972      34        5932       db     '4'     ; Decimal        114
 E973      35        5933       db     '5'     ; Decimal        115
 E974      36        5934       db     '6'     ; Decimal        116
 E975      37        5935       db     '7'     ; Decimal        117
 E976      38        5936       db     '8'     ; Decimal        118
 E977      39        5937       db     '9'     ; Decimal        119
 E978      30        5938       db     '0'     ; Decimal        120
 E979      31        5939       db     '1'     ; Decimal        121
 E97A      32        5940       db     '2'     ; Decimal        122
 E97B      33        5941       db     '3'     ; Decimal        123
 E97C      34        5942       db     '4'     ; Decimal        124
 E97D      35        5943       db     '5'     ; Decimal        125
 E97E      36        5944       db     '6'     ; Decimal        126
 E97F      37        5945       db     '7'     ; Decimal        127
 E980      38        5946       db     '8'     ; Decimal        128
 E981      39        5947       db     '9'     ; Decimal        129
 E982      30        5948       db     '0'     ; Decimal        130
 E983      31        5949       db     '1'     ; Decimal        131
 E984      32        5950       db     '2'     ; Decimal        132
 E985      33        5951       db     '3'     ; Decimal        133
 E986      34        5952       db     '4'     ; Decimal        134
 E987      35        5953       db     '5'     ; Decimal        135
 E988      36        5954       db     '6'     ; Decimal        136
 E989      37        5955       db     '7'     ; Decimal        137
 E98A      38        5956       db     '8'     ; Decimal        138
 E98B      39        5957       db     '9'     ; Decimal        139
 E98C      30        5958       db     '0'     ; Decimal        140
 E98D      31        5959       db     '1'     ; Decimal        141
 E98E      32        5960       db     '2'     ; Decimal        142
 E98F      33        5961       db     '3'     ; Decimal        143
 E990      34        5962       db     '4'     ; Decimal        144
 E991      35        5963       db     '5'     ; Decimal        145
 E992      36        5964       db     '6'     ; Decimal        146
 E993      37        5965       db     '7'     ; Decimal        147
 E994      38        5966       db     '8'     ; Decimal        148
 E995      39        5967       db     '9'     ; Decimal        149
 E996      30        5968       db     '0'     ; Decimal        150
 E997      31        5969       db     '1'     ; Decimal        151
 E998      32        5970       db     '2'     ; Decimal        152
 E999      33        5971       db     '3'     ; Decimal        153
 E99A      34        5972       db     '4'     ; Decimal        154
 E99B      35        5973       db     '5'     ; Decimal        155
 E99C      36        5974       db     '6'     ; Decimal        156
 E99D      37        5975       db     '7'     ; Decimal        157
 E99E      38        5976       db     '8'     ; Decimal        158
 E99F      39        5977       db     '9'     ; Decimal        159
 E9A0      30        5978       db     '0'     ; Decimal        160
 E9A1      31        5979       db     '1'     ; Decimal        161
 E9A2      32        5980       db     '2'     ; Decimal        162
 E9A3      33        5981       db     '3'     ; Decimal        163
 E9A4      34        5982       db     '4'     ; Decimal        164
 E9A5      35        5983       db     '5'     ; Decimal        165
 E9A6      36        5984       db     '6'     ; Decimal        166
 E9A7      37        5985       db     '7'     ; Decimal        167
 E9A8      38        5986       db     '8'     ; Decimal        168
 E9A9      39        5987       db     '9'     ; Decimal        169
 E9AA      30        5988       db     '0'     ; Decimal        170
 E9AB      31        5989       db     '1'     ; Decimal        171
 E9AC      32        5990       db     '2'     ; Decimal        172
 E9AD      33        5991       db     '3'     ; Decimal        173
 E9AE      34        5992       db     '4'     ; Decimal        174
 E9AF      35        5993       db     '5'     ; Decimal        175
 E9B0      36        5994       db     '6'     ; Decimal        176
 E9B1      37        5995       db     '7'     ; Decimal        177
 E9B2      38        5996       db     '8'     ; Decimal        178
 E9B3      39        5997       db     '9'     ; Decimal        179
 E9B4      30        5998       db     '0'     ; Decimal        180
 E9B5      31        5999       db     '1'     ; Decimal        181
 E9B6      32        6000       db     '2'     ; Decimal        182
 E9B7      33        6001       db     '3'     ; Decimal        183
 E9B8      34        6002       db     '4'     ; Decimal        184
 E9B9      35        6003       db     '5'     ; Decimal        185
 E9BA      36        6004       db     '6'     ; Decimal        186
 E9BB      37        6005       db     '7'     ; Decimal        187
 E9BC      38        6006       db     '8'     ; Decimal        188
 E9BD      39        6007       db     '9'     ; Decimal        189
 E9BE      30        6008       db     '0'     ; Decimal        190
 E9BF      31        6009       db     '1'     ; Decimal        191
 E9C0      32        6010       db     '2'     ; Decimal        192
 E9C1      33        6011       db     '3'     ; Decimal        193
 E9C2      34        6012       db     '4'     ; Decimal        194
 E9C3      35        6013       db     '5'     ; Decimal        195
 E9C4      36        6014       db     '6'     ; Decimal        196
 E9C5      37        6015       db     '7'     ; Decimal        197
 E9C6      38        6016       db     '8'     ; Decimal        198
 E9C7      39        6017       db     '9'     ; Decimal        199
 E9C8      30        6018       db     '0'     ; Decimal        200
 E9C9      31        6019       db     '1'     ; Decimal        201
 E9CA      32        6020       db     '2'     ; Decimal        202
 E9CB      33        6021       db     '3'     ; Decimal        203
 E9CC      34        6022       db     '4'     ; Decimal        204
 E9CD      35        6023       db     '5'     ; Decimal        205
 E9CE      36        6024       db     '6'     ; Decimal        206
 E9CF      37        6025       db     '7'     ; Decimal        207
 E9D0      38        6026       db     '8'     ; Decimal        208
 E9D1      39        6027       db     '9'     ; Decimal        209
 E9D2      30        6028       db     '0'     ; Decimal        210
 E9D3      31        6029       db     '1'     ; Decimal        211
 E9D4      32        6030       db     '2'     ; Decimal        212
 E9D5      33        6031       db     '3'     ; Decimal        213
 E9D6      34        6032       db     '4'     ; Decimal        214
 E9D7      35        6033       db     '5'     ; Decimal        215
 E9D8      36        6034       db     '6'     ; Decimal        216
 E9D9      37        6035       db     '7'     ; Decimal        217
 E9DA      38        6036       db     '8'     ; Decimal        218
 E9DB      39        6037       db     '9'     ; Decimal        219


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 51
MV_TECA


 E9DC      30        6038       db     '0'     ; Decimal        220
 E9DD      31        6039       db     '1'     ; Decimal        221
 E9DE      32        6040       db     '2'     ; Decimal        222
 E9DF      33        6041       db     '3'     ; Decimal        223
 E9E0      34        6042       db     '4'     ; Decimal        224
 E9E1      35        6043       db     '5'     ; Decimal        225
 E9E2      36        6044       db     '6'     ; Decimal        226
 E9E3      37        6045       db     '7'     ; Decimal        227
 E9E4      38        6046       db     '8'     ; Decimal        228
 E9E5      39        6047       db     '9'     ; Decimal        229
 E9E6      30        6048       db     '0'     ; Decimal        230
 E9E7      31        6049       db     '1'     ; Decimal        231
 E9E8      32        6050       db     '2'     ; Decimal        232
 E9E9      33        6051       db     '3'     ; Decimal        233
 E9EA      34        6052       db     '4'     ; Decimal        234
 E9EB      35        6053       db     '5'     ; Decimal        235
 E9EC      36        6054       db     '6'     ; Decimal        236
 E9ED      37        6055       db     '7'     ; Decimal        237
 E9EE      38        6056       db     '8'     ; Decimal        238
 E9EF      39        6057       db     '9'     ; Decimal        239
 E9F0      30        6058       db     '0'     ; Decimal        240
 E9F1      31        6059       db     '1'     ; Decimal        241
 E9F2      32        6060       db     '2'     ; Decimal        242
 E9F3      33        6061       db     '3'     ; Decimal        243
 E9F4      34        6062       db     '4'     ; Decimal        244
 E9F5      35        6063       db     '5'     ; Decimal        245
 E9F6      36        6064       db     '6'     ; Decimal        246
 E9F7      37        6065       db     '7'     ; Decimal        247
 E9F8      38        6066       db     '8'     ; Decimal        248
 E9F9      39        6067       db     '9'     ; Decimal        249
 E9FA      30        6068       db     '0'     ; Decimal        250
 E9FB      31        6069       db     '1'     ; Decimal        251
 E9FC      32        6070       db     '2'     ; Decimal        252
 E9FD      33        6071       db     '3'     ; Decimal        253
 E9FE      34        6072       db     '4'     ; Decimal        254
 E9FF      35        6073       db     '5'     ; Decimal        255
                     6074                                        ; 1s column
                     6075  
                     6076  
                     6077  ;***************************************************************************
                     6078  ; --------------------------- VFD Lookup Tables ---------------------------
                     6079  ;***************************************************************************
                     6080  
 EA00                6081       org     $EA00       ; Origin at Memory Location $EA60=59904(uses5538)
                     6082  
                     6083  ;***************************************************************************
                     6084  ; - These tables are the character strings for the top lines of the VFD
                     6085  ;   while in "Display" mode.
                     6086  ;***************************************************************************
                     6087  
                     6088  VARS0_TL_TB:
 EA00      4D4C2047  6089       db     'ML Gr CC TC FC EP EB'
           72204343 
           20544320 
           46432045 
           50204542 
                     6090              ; Manual Lever Position
                     6091              ; Current Gear
                     6092              ; Coast Clutch applied?
                     6093              ; Torque Converter Clutch Applied?
                     6094              ; Decel Fuel Cut Permissive?
                     6095              ; Exhaust Brake Pressure permissive?
                     6096              ; Exhaust Brake Applied?
                     6097  
                     6098  VARS1_TL_TB:
 EA14      52504D20  6099       db     'RPM MPH Prs TOT Vlt '
           4D504820 
           50727320 
           544F5420 
           566C7420 
                     6100              ; Engine RPM in RPM /20
                     6101              ; Vehicle Speed in MPH
                     6102              ; Line Pressure in PSI
                     6103              ; Transmission Oil Temperature in degreesF+40
                     6104              ; System Voltage in volts *10
                     6105  
                     6106  VARS2_TL_TB:
 EA28      44754620  6107       db     'DuF TPP PWH:PWL Prs '
           54505020 
           5057483A 
           50574C20 
           50727320 
                     6108              ; EPC Duty Factor from "TO" table, stall or shift tables,
                     6109              ; or, absolute values "EPC_TCC", or "EPC_decel"
                     6110              ; Throttle Position in percent
                     6111              ; Final EPC PW Hi byte
                     6112              ; Final EPC PW Lo byte
                     6113              ; Line Pressure in PSI
                     6114  
                     6115  VARS3_TL_TB:
 EA3C      53654820  6116       db     'SeH SeL IAC Ipw RPM '
           53654C20 
           49414320 
           49707720 
           52504D20 
                     6117              ; Time since MS_TECA power up seconds Hi byte
                     6118              ; Time since MS_TECA power up seconds Lo byte
                     6119              ; Idle Air Control Sensor 8 bit ADC reading
                     6120              ; Idle Air Control pulse width in 100uS
                     6121              ; Engine RPM in RPM /20
                     6122  
                     6123  VARS4_TL_TB:
 EA50      52504D20  6124       db     'RPM MAP TPP TrA DuF '
           4D415020 
           54505020 
           54724120 
           44754620 
                     6125              ; Engine RPM in RPM /20
                     6126              ; Manifold Absolute Pressure in KPA
                     6127              ; Throttle Position in percent
                     6128              ; EPC Trim Correction Adder
                     6129              ; EPC Duty Factor from "TO" table, stall or shift tables,
                     6130              ; or, absolute values "EPC_TCC", or "EPC_decel"
                     6131  
                     6132  VARS5_TL_TB:
 EA64      44754620  6133       db     'DuF TtA TrA DF1 DFF '
           54744120 
           54724120 
           44463120 
           44464620 
                     6134              ; EPC Duty Factor from "TO" table, stall or shift tables, or,
                     6135              ; absolute values "EPC_TCC", or "EPC_decel",
                     6136              ; TOT correction adder
                     6137              ; Trim correctioin adder
                     6138              ; "df" after TOT cor, before Trim cor
                     6139              ; "df1" after Trim cor(Final EPC Duty Factor)
                     6140  
                     6141  G1_CONS_TL_TB:
 EA78      436F6E73  6142       db     'Cons Group1 Prs Mode'
           2047726F 
           75703120 
           50727320 
           4D6F6465 
                     6143              ; Directions to the first half of Configurable constants
                     6144  
                     6145  G2_CONS_TL_TB:


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 52
MV_TECA


 EA8C      436F6E73  6146       db     'Cons Group2 Prs Mode'
           2047726F 
           75703220 
           50727320 
           4D6F6465 
                     6147              ; Directions to the second half of Configurable constants
                     6148  
                     6149  GET_G1_CONS:
 EAA0      55704C64  6150       db     'UpLd G1 Cons Prs Mde'
           20473120 
           436F6E73 
           20507273 
           204D6465 
                     6151              ; Directions to up load Group 1 of constants from MS_TECA
                     6152  
                     6153  GET_G2_CONS:
 EAB4      55704C64  6154       db     'UpLd G2 Cons Prs Mde'
           20473220 
           436F6E73 
           20507273 
           204D6465 
                     6155              ; Directions to up load Group 2 of constants from MS_TECA
                     6156  
                     6157  SEND_G1_VAL:
 EAC8      446E4C64  6158       db     'DnLd G1 val Prs Mode'
           20473120 
           76616C20 
           50727320 
           4D6F6465 
                     6159              ; Directions to down load  selected G1 constant to MS_TECA
                     6160  
                     6161  SEND_G2_VAL:
 EADC      446E4C64  6162       db     'DnLd G2 val Prs Mode'
           20473220 
           76616C20 
           50727320 
           4D6F6465 
                     6163              ; Directions to down load  selected G1 constant to MS_TECA
                     6164  
                     6165  BURN_CONS:
 EAF0      4275726E  6166       db     'Burn Cons Press Mode'
           20436F6E 
           73205072 
           65737320 
           4D6F6465 
                     6167              ; Directions to burn constants in MS_TECA RAM to MS_TECA ROM
                     6168  
                     6169  GET_G1_CONS_FIN:
 EB04      55704C64  6170       db     'UpLd G1 Done Prs Mde'
           20473120 
           446F6E65 
           20507273 
           204D6465 
                     6171              ;Up load G1 constants from MS_TECA finished, Press "Mode" to exit
                     6172  
                     6173  GET_G2_CONS_FIN:
 EB18      55704C64  6174       db     'UpLd G2 Done Prs Mde'
           20473220 
           446F6E65 
           20507273 
           204D6465 
                     6175              ;Up load G2 constants from MS_TECA finished, Press "Mode" to exit
                     6176  
                     6177  SEND_G1_VAL_FIN:
 EB2C      446E4C64  6178       db     'DnLd V1 Done Prs Mde'
           20563120 
           446F6E65 
           20507273 
           204D6465 
                     6179              ;Down load selcted G1 constant to MS_TECA finished,
                     6180              ;Press "Mode" to exit
                     6181  
                     6182  SEND_G2_VAL_FIN:
 EB40      446E4C64  6183       db     'DnLd V2 Done Prs Mde'
           20563220 
           446F6E65 
           20507273 
           204D6465 
                     6184              ;Down load selected G2 constant to MS_TECA finished,
                     6185              ;Press "Mode" to exit
                     6186  
                     6187  BURN_CONS_FIN:
 EB54      4275726E  6188       db     'Burn Done Press Mode'
           20446F6E 
           65205072 
           65737320 
           4D6F6465 
                     6189              ; Burn constants in MS_TECA RAM to MS_TECA ROM finished,
                     6190              ; press "Mode" to exit
                     6191  
                     6192  
                     6193  ;***************************************************************************
                     6194  ; - This is the first table of character strings for the top lines of the
                     6195  ;   VFD while in "Configure" mode.
                     6196  ;***************************************************************************
                     6197  
                     6198  TO_0_0_TOP:
 EB68      544F204B  6199       db     'TO KPArow 0 RPMcol 0'
           5041726F 
           77203020 
           52504D63 
           6F6C2030 
                     6200              ; "TO" table, KPA row 0, RPM column 0
                     6201  
                     6202  TO_0_1_TOP:
 EB7C      544F204B  6203       db     'TO KPArow 0 RPMcol 1'
           5041726F 
           77203020 
           52504D63 
           6F6C2031 
                     6204              ; "TO" table, KPA row 0, RPM column 1
                     6205  
                     6206  TO_0_2_TOP:
 EB90      544F204B  6207       db     'TO KPArow 0 RPMcol 2'
           5041726F 
           77203020 
           52504D63 
           6F6C2032 
                     6208              ; "TO" table, KPA row 0, RPM column 2
                     6209  
                     6210  TO_0_3_TOP:
 EBA4      544F204B  6211       db     'TO KPArow 0 RPMcol 3'
           5041726F 
           77203020 
           52504D63 
           6F6C2033 
                     6212              ; "TO" table, KPA row 0, RPM column 3
                     6213  
                     6214  TO_0_4_TOP:
 EBB8      544F204B  6215       db     'TO KPArow 0 RPMcol 4'
           5041726F 
           77203020 
           52504D63 
           6F6C2034 
                     6216              ; "TO" table, KPA row 0, RPM column 4
                     6217  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 53
MV_TECA


                     6218  TO_0_5_TOP:
 EBCC      544F204B  6219       db     'TO KPArow 0 RPMcol 5'
           5041726F 
           77203020 
           52504D63 
           6F6C2035 
                     6220              ; "TO" table, KPA row 0, RPM column 5
                     6221  
                     6222  TO_0_6_TOP:
 EBE0      544F204B  6223       db     'TO KPArow 0 RPMcol 6'
           5041726F 
           77203020 
           52504D63 
           6F6C2036 
                     6224              ; "TO" table, KPA row 0, RPM column 6
                     6225  
                     6226  TO_0_7_TOP:
 EBF4      544F204B  6227       db     'TO KPArow 0 RPMcol 7'
           5041726F 
           77203020 
           52504D63 
           6F6C2037 
                     6228              ; "TO" table, KPA row 0, RPM column 7
                     6229  
                     6230  TO_1_0_TOP:
 EC08      544F204B  6231       db     'TO KPArow 1 RPMcol 0'
           5041726F 
           77203120 
           52504D63 
           6F6C2030 
                     6232              ; "TO" table, KPA row 1, RPM column 0
                     6233  
                     6234  TO_1_1_TOP:
 EC1C      544F204B  6235       db     'TO KPArow 1 RPMcol 1'
           5041726F 
           77203120 
           52504D63 
           6F6C2031 
                     6236              ; "TO" table, KPA row 1, RPM column 1
                     6237  
                     6238  TO_1_2_TOP:
 EC30      544F204B  6239       db     'TO KPArow 1 RPMcol 2'
           5041726F 
           77203120 
           52504D63 
           6F6C2032 
                     6240              ; "TO" table, KPA row 1, RPM column 2
                     6241  
                     6242  TO_1_3_TOP:
 EC44      544F204B  6243       db     'TO KPArow 1 RPMcol 3'
           5041726F 
           77203120 
           52504D63 
           6F6C2033 
                     6244              ; "TO" table, KPA row 1, RPM column 3
                     6245  
                     6246  TO_1_4_TOP:
 EC58      544F204B  6247       db     'TO KPArow 1 RPMcol 4'
           5041726F 
           77203120 
           52504D63 
           6F6C2034 
                     6248              ; "TO" table, KPA row 1, RPM column 4
                     6249  
                     6250  TO_1_5_TOP:
 EC6C      544F204B  6251       db     'TO KPArow 1 RPMcol 5'
           5041726F 
           77203120 
           52504D63 
           6F6C2035 
                     6252              ; "TO" table, KPA row 1, RPM column 5
                     6253  
                     6254  TO_1_6_TOP:
 EC80      544F204B  6255       db     'TO KPArow 1 RPMcol 6'
           5041726F 
           77203120 
           52504D63 
           6F6C2036 
                     6256              ; "TO" table, KPA row 1, RPM column 6
                     6257  
                     6258  TO_1_7_TOP:
 EC94      544F204B  6259       db     'TO KPArow 1 RPMcol 7'
           5041726F 
           77203120 
           52504D63 
           6F6C2037 
                     6260              ; "TO" table, KPA row 1, RPM column 7
                     6261  
                     6262  TO_2_0_TOP:
 ECA8      544F204B  6263       db     'TO KPArow 2 RPMcol 0'
           5041726F 
           77203220 
           52504D63 
           6F6C2030 
                     6264              ; "TO" table, KPA row 2, RPM column 0
                     6265  
                     6266  TO_2_1_TOP:
 ECBC      544F204B  6267       db     'TO KPArow 2 RPMcol 1'
           5041726F 
           77203220 
           52504D63 
           6F6C2031 
                     6268              ; "TO" table, KPA row 2, RPM column 1
                     6269  
                     6270  TO_2_2_TOP:
 ECD0      544F204B  6271       db     'TO KPArow 2 RPMcol 2'
           5041726F 
           77203220 
           52504D63 
           6F6C2032 
                     6272              ; "TO" table, KPA row 2, RPM column 2
                     6273  
                     6274  TO_2_3_TOP:
 ECE4      544F204B  6275       db     'TO KPArow 2 RPMcol 3'
           5041726F 
           77203220 
           52504D63 
           6F6C2033 
                     6276              ; "TO" table, KPA row 2, RPM column 3
                     6277  
                     6278  TO_2_4_TOP:
 ECF8      544F204B  6279       db     'TO KPArow 2 RPMcol 4'
           5041726F 
           77203220 
           52504D63 
           6F6C2034 
                     6280              ; "TO" table, KPA row 2, RPM column 4
                     6281  
                     6282  TO_2_5_TOP:
 ED0C      544F204B  6283       db     'TO KPArow 2 RPMcol 5'
           5041726F 
           77203220 
           52504D63 
           6F6C2035 
                     6284              ; "TO" table, KPA row 2, RPM column 5
                     6285  


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 54
MV_TECA


                     6286  TO_2_6_TOP:
 ED20      544F204B  6287       db     'TO KPArow 2 RPMcol 6'
           5041726F 
           77203220 
           52504D63 
           6F6C2036 
                     6288              ; "TO" table, KPA row 2, RPM column 6
                     6289  
                     6290  TO_2_7_TOP:
 ED34      544F204B  6291       db     'TO KPArow 2 RPMcol 7'
           5041726F 
           77203220 
           52504D63 
           6F6C2037 
                     6292              ; "TO" table, KPA row 2, RPM column 7
                     6293  
                     6294  TO_3_0_TOP:
 ED48      544F204B  6295       db     'TO KPArow 3 RPMcol 0'
           5041726F 
           77203320 
           52504D63 
           6F6C2030 
                     6296              ; "TO" table, KPA row 3, RPM column 0
                     6297  
                     6298  TO_3_1_TOP:
 ED5C      544F204B  6299       db     'TO KPArow 3 RPMcol 1'
           5041726F 
           77203320 
           52504D63 
           6F6C2031 
                     6300              ; "TO" table, KPA row 3, RPM column 1
                     6301  
                     6302  TO_3_2_TOP:
 ED70      544F204B  6303       db     'TO KPArow 3 RPMcol 2'
           5041726F 
           77203320 
           52504D63 
           6F6C2032 
                     6304              ; "TO" table, KPA row 3, RPM column 2
                     6305  
                     6306  TO_3_3_TOP:
 ED84      544F204B  6307       db     'TO KPArow 3 RPMcol 3'
           5041726F 
           77203320 
           52504D63 
           6F6C2033 
                     6308              ; "TO" table, KPA row 3, RPM column 3
                     6309  
                     6310  TO_3_4_TOP:
 ED98      544F204B  6311       db     'TO KPArow 3 RPMcol 4'
           5041726F 
           77203320 
           52504D63 
           6F6C2034 
                     6312              ; "TO" table, KPA row 3, RPM column 4
                     6313  
                     6314  TO_3_5_TOP:
 EDAC      544F204B  6315       db     'TO KPArow 3 RPMcol 5'
           5041726F 
           77203320 
           52504D63 
           6F6C2035 
                     6316              ; "TO" table, KPA row 3, RPM column 5
                     6317  
                     6318  TO_3_6_TOP:
 EDC0      544F204B  6319       db     'TO KPArow 3 RPMcol 6'
           5041726F 
           77203320 
           52504D63 
           6F6C2036 
                     6320              ; "TO" table, KPA row 3, RPM column 6
                     6321  
                     6322  TO_3_7_TOP:
 EDD4      544F204B  6323       db     'TO KPArow 3 RPMcol 7'
           5041726F 
           77203320 
           52504D63 
           6F6C2037 
                     6324              ; "TO" table, KPA row 3, RPM column 7
                     6325  
                     6326  
                     6327  TO_4_0_TOP:
 EDE8      544F204B  6328       db     'TO KPArow 4 RPMcol 0'
           5041726F 
           77203420 
           52504D63 
           6F6C2030 
                     6329              ; "TO" table, KPA row 4, RPM column 0
                     6330  
                     6331  TO_4_1_TOP:
 EDFC      544F204B  6332       db     'TO KPArow 4 RPMcol 1'
           5041726F 
           77203420 
           52504D63 
           6F6C2031 
                     6333              ; "TO" table, KPA row 4, RPM column 1
                     6334  
                     6335  TO_4_2_TOP:
 EE10      544F204B  6336       db     'TO KPArow 4 RPMcol 2'
           5041726F 
           77203420 
           52504D63 
           6F6C2032 
                     6337              ; "TO" table, KPA row 4, RPM column 2
                     6338  
                     6339  TO_4_3_TOP:
 EE24      544F204B  6340       db     'TO KPArow 4 RPMcol 3'
           5041726F 
           77203420 
           52504D63 
           6F6C2033 
                     6341              ; "TO" table, KPA row 4, RPM column 3
                     6342  
                     6343  TO_4_4_TOP:
 EE38      544F204B  6344       db     'TO KPArow 4 RPMcol 4'
           5041726F 
           77203420 
           52504D63 
           6F6C2034 
                     6345              ; "TO" table, KPA row 4, RPM column 4
                     6346  
                     6347  TO_4_5_TOP:
 EE4C      544F204B  6348       db     'TO KPArow 4 RPMcol 5'
           5041726F 
           77203420 
           52504D63 
           6F6C2035 
                     6349              ; "TO" table, KPA row 4, RPM column 5
                     6350  
                     6351  TO_4_6_TOP:
 EE60      544F204B  6352       db     'TO KPArow 4 RPMcol 6'
           5041726F 
           77203420 
           52504D63 
           6F6C2036 
                     6353              ; "TO" table, KPA row 4, RPM column 6


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 55
MV_TECA


                     6354  
                     6355  TO_4_7_TOP:
 EE74      544F204B  6356       db     'TO KPArow 4 RPMcol 7'
           5041726F 
           77203420 
           52504D63 
           6F6C2037 
                     6357              ; "TO" table, KPA row 4, RPM column 7
                     6358  
                     6359  TO_5_0_TOP:
 EE88      544F204B  6360       db     'TO KPArow 5 RPMcol 0'
           5041726F 
           77203520 
           52504D63 
           6F6C2030 
                     6361              ; "TO" table, KPA row 5, RPM column 0
                     6362  
                     6363  TO_5_1_TOP:
 EE9C      544F204B  6364       db     'TO KPArow 5 RPMcol 1'
           5041726F 
           77203520 
           52504D63 
           6F6C2031 
                     6365              ; "TO" table, KPA row 5, RPM column 1
                     6366  
                     6367  TO_5_2_TOP:
 EEB0      544F204B  6368       db     'TO KPArow 5 RPMcol 2'
           5041726F 
           77203520 
           52504D63 
           6F6C2032 
                     6369              ; "TO" table, KPA row 5, RPM column 2
                     6370  
                     6371  TO_5_3_TOP:
 EEC4      544F204B  6372       db     'TO KPArow 5 RPMcol 3'
           5041726F 
           77203520 
           52504D63 
           6F6C2033 
                     6373              ; "TO" table, KPA row 5, RPM column 3
                     6374  
                     6375  TO_5_4_TOP:
 EED8      544F204B  6376       db     'TO KPArow 5 RPMcol 4'
           5041726F 
           77203520 
           52504D63 
           6F6C2034 
                     6377              ; "TO" table, KPA row 5, RPM column 4
                     6378  
                     6379  TO_5_5_TOP:
 EEEC      544F204B  6380       db     'TO KPArow 5 RPMcol 5'
           5041726F 
           77203520 
           52504D63 
           6F6C2035 
                     6381              ; "TO" table, KPA row 5, RPM column 5
                     6382  
                     6383  TO_5_6_TOP:
 EF00      544F204B  6384       db     'TO KPArow 5 RPMcol 6'
           5041726F 
           77203520 
           52504D63 
           6F6C2036 
                     6385              ; "TO" table, KPA row 5, RPM column 6
                     6386  
                     6387  TO_5_7_TOP:
 EF14      544F204B  6388       db     'TO KPArow 5 RPMcol 7'
           5041726F 
           77203520 
           52504D63 
           6F6C2037 
                     6389              ; "TO" table, KPA row 5, RPM column 7
                     6390  
                     6391  TO_6_0_TOP:
 EF28      544F204B  6392       db     'TO KPArow 6 RPMcol 0'
           5041726F 
           77203620 
           52504D63 
           6F6C2030 
                     6393              ; "TO" table, KPA row 6, RPM column 0
                     6394  
                     6395  TO_6_1_TOP:
 EF3C      544F204B  6396       db     'TO KPArow 6 RPMcol 1'
           5041726F 
           77203620 
           52504D63 
           6F6C2031 
                     6397              ; "TO" table, KPA row 6, RPM column 1
                     6398  
                     6399  TO_6_2_TOP:
 EF50      544F204B  6400       db     'TO KPArow 6 RPMcol 2'
           5041726F 
           77203620 
           52504D63 
           6F6C2032 
                     6401              ; "TO" table, KPA row 6, RPM column 2
                     6402  
                     6403  TO_6_3_TOP:
 EF64      544F204B  6404       db     'TO KPArow 6 RPMcol 3'
           5041726F 
           77203620 
           52504D63 
           6F6C2033 
                     6405              ; "TO" table, KPA row 6, RPM column 3
                     6406  
                     6407  TO_6_4_TOP:
 EF78      544F204B  6408       db     'TO KPArow 6 RPMcol 4'
           5041726F 
           77203620 
           52504D63 
           6F6C2034 
                     6409              ; "TO" table, KPA row 6, RPM column 4
                     6410  
                     6411  TO_6_5_TOP:
 EF8C      544F204B  6412       db     'TO KPArow 6 RPMcol 5'
           5041726F 
           77203620 
           52504D63 
           6F6C2035 
                     6413              ; "TO" table, KPA row 6, RPM column 5
                     6414  
                     6415  TO_6_6_TOP:
 EFA0      544F204B  6416       db     'TO KPArow 6 RPMcol 6'
           5041726F 
           77203620 
           52504D63 
           6F6C2036 
                     6417              ; "TO" table, KPA row 6, RPM column 6
                     6418  
                     6419  TO_6_7_TOP:
 EFB4      544F204B  6420       db     'TO KPArow 6 RPMcol 7'
           5041726F 
           77203620 
           52504D63 
           6F6C2037 
                     6421              ; "TO" table, KPA row 6, RPM column 7


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 56
MV_TECA


                     6422  
                     6423  TO_7_0_TOP:
 EFC8      544F204B  6424       db     'TO KPArow 7 RPMcol 0'
           5041726F 
           77203720 
           52504D63 
           6F6C2030 
                     6425              ; "TO" table, KPA row 7, RPM column 0
                     6426  
                     6427  TO_7_1_TOP:
 EFDC      544F204B  6428       db     'TO KPArow 7 RPMcol 1'
           5041726F 
           77203720 
           52504D63 
           6F6C2031 
                     6429              ; "TO" table, KPA row 7, RPM column 1
                     6430  
                     6431  TO_7_2_TOP:
 EFF0      544F204B  6432       db     'TO KPArow 7 RPMcol 2'
           5041726F 
           77203720 
           52504D63 
           6F6C2032 
                     6433              ; "TO" table, KPA row 7, RPM column 2
                     6434  
                     6435  TO_7_3_TOP:
 F004      544F204B  6436       db     'TO KPArow 7 RPMcol 3'
           5041726F 
           77203720 
           52504D63 
           6F6C2033 
                     6437              ; "TO" table, KPA row 7, RPM column 3
                     6438  
                     6439  TO_7_4_TOP:
 F018      544F204B  6440       db     'TO KPArow 7 RPMcol 4'
           5041726F 
           77203720 
           52504D63 
           6F6C2034 
                     6441              ; "TO" table, KPA row 7, RPM column 4
                     6442  
                     6443  TO_7_5_TOP:
 F02C      544F204B  6444       db     'TO KPArow 7 RPMcol 5'
           5041726F 
           77203720 
           52504D63 
           6F6C2035 
                     6445              ; "TO" table, KPA row 7, RPM column 5
                     6446  
                     6447  TO_7_6_TOP:
 F040      544F204B  6448       db     'TO KPArow 7 RPMcol 6'
           5041726F 
           77203720 
           52504D63 
           6F6C2036 
                     6449              ; "TO" table, KPA row 7, RPM column 6
                     6450  
                     6451  TO_7_7_TOP:
 F054      544F204B  6452       db     'TO KPArow 7 RPMcol 7'
           5041726F 
           77203720 
           52504D63 
           6F6C2037 
                     6453              ; "TO" table, KPA row 7, RPM column 7
                     6454  
                     6455  RPMRANGETO_0_TOP:
 F068      544F2054  6456       db     'TO Tab RPM c0 RPM/20'
           61622052 
           504D2063 
           30205250 
           4D2F3230 
                     6457              ; "TO" table RPM range, RPM column 0, RPM /20
                     6458  
                     6459  RPMRANGETO_1_TOP:
 F07C      544F2054  6460       db     'TO Tab RPM c1 RPM/20'
           61622052 
           504D2063 
           31205250 
           4D2F3230 
                     6461              ; "TO" table RPM range, RPM column 1, RPM /20
                     6462  
                     6463  RPMRANGETO_2_TOP:
 F090      544F2054  6464       db     'TO Tab RPM c2 RPM/20'
           61622052 
           504D2063 
           32205250 
           4D2F3230 
                     6465              ; "TO" table RPM range, RPM column 2, RPM /20
                     6466  
                     6467  RPMRANGETO_3_TOP:
 F0A4      544F2054  6468       db     'TO Tab RPM c3 RPM/20'
           61622052 
           504D2063 
           33205250 
           4D2F3230 
                     6469              ; "TO" table RPM range, RPM column 3, RPM /20
                     6470  
                     6471  RPMRANGETO_4_TOP:
 F0B8      544F2054  6472       db     'TO Tab RPM c4 RPM/20'
           61622052 
           504D2063 
           34205250 
           4D2F3230 
                     6473              ; "TO" table RPM range, RPM column 4, RPM /20
                     6474  
                     6475  RPMRANGETO_5_TOP:
 F0CC      544F2054  6476       db     'TO Tab RPM c5 RPM/20'
           61622052 
           504D2063 
           35205250 
           4D2F3230 
                     6477              ; "TO" table RPM range, RPM column 5, RPM /20
                     6478  
                     6479  RPMRANGETO_6_TOP:
 F0E0      544F2054  6480       db     'TO Tab RPM c6 RPM/20'
           61622052 
           504D2063 
           36205250 
           4D2F3230 
                     6481              ; "TO" table RPM range, RPM column 6, RPM /20
                     6482  
                     6483  RPMRANGETO_7_TOP:
 F0F4      544F2054  6484       db     'TO Tab RPM c7 RPM/20'
           61622052 
           504D2063 
           37205250 
           4D2F3230 
                     6485              ; "TO" table RPM range, RPM column 7, RPM /20
                     6486  
                     6487  KPARANGETO_0_TOP:
 F108      544F2054  6488       db     'TO Tab KPA row0 KPA '
           6162204B 
           50412072 
           6F773020 
           4B504120 
                     6489              ; "TO" table KPA range, KPA row 0, KPA


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 57
MV_TECA


                     6490  
                     6491  KPARANGETO_1_TOP:
 F11C      544F2054  6492       db     'TO Tab KPA row1 KPA '
           6162204B 
           50412072 
           6F773120 
           4B504120 
                     6493              ; "TO" table KPA range, KPA row 1, KPA
                     6494  
                     6495  KPARANGETO_2_TOP:
 F130      544F2054  6496       db     'TO Tab KPA row2 KPA '
           6162204B 
           50412072 
           6F773220 
           4B504120 
                     6497              ; "TO" table KPA range, KPA row 2, KPA
                     6498  
                     6499  KPARANGETO_3_TOP:
 F144      544F2054  6500       db     'TO Tab KPA row3 KPA '
           6162204B 
           50412072 
           6F773320 
           4B504120 
                     6501              ; "TO" table KPA range, KPA row 3, KPA
                     6502  
                     6503  KPARANGETO_4_TOP:
 F158      544F2054  6504       db     'TO Tab KPA row4 KPA '
           6162204B 
           50412072 
           6F773420 
           4B504120 
                     6505              ; "TO" table KPA range, KPA row 4, KPA
                     6506  
                     6507  KPARANGETO_5_TOP:
 F16C      544F2054  6508       db     'TO Tab KPA row5 KPA '
           6162204B 
           50412072 
           6F773520 
           4B504120 
                     6509              ; "TO" table KPA range, KPA row 5, KPA
                     6510  
                     6511  KPARANGETO_6_TOP:
 F180      544F2054  6512       db     'TO Tab KPA row6 KPA '
           6162204B 
           50412072 
           6F773620 
           4B504120 
                     6513              ; "TO" table KPA range, KPA row 6, KPA
                     6514  
                     6515  KPARANGETO_7_TOP:
 F194      544F2054  6516       db     'TO Tab KPA row7 KPA '
           6162204B 
           50412072 
           6F773720 
           4B504120 
                     6517              ; "TO" table KPA range, KPA row 7, KPA
                     6518  
                     6519  TPSRANGE_0_TOP:
 F1A8      5468726F  6520       db     'Throttle Open % c0 %'
           74746C65 
           204F7065 
           6E202520 
           63302025 
                     6521              ; "TPS_range" table, col 0, percent
                     6522  
                     6523  TPSRANGE_1_TOP:
 F1BC      5468726F  6524       db     'Throttle Open % c1 %'
           74746C65 
           204F7065 
           6E202520 
           63312025 
                     6525              ; "TPS_range" table, col 1, percent
                     6526  
                     6527  TPSRANGE_2_TOP:
 F1D0      5468726F  6528       db     'Throttle Open % c2 %'
           74746C65 
           204F7065 
           6E202520 
           63322025 
                     6529              ; "TPS_range" table, col 2, percent
                     6530  
                     6531  TPSRANGE_3_TOP:
 F1E4      5468726F  6532       db     'Throttle Open % c3 %'
           74746C65 
           204F7065 
           6E202520 
           63332025 
                     6533              ; "TPS_range" table, col 3, percent
                     6534  
                     6535  TPSRANGE_4_TOP:
 F1F8      5468726F  6536       db     'Throttle Open % c4 %'
           74746C65 
           204F7065 
           6E202520 
           63342025 
                     6537              ; "TPS_range" table, col 4, percent
                     6538  
                     6539  TPSRANGE_5_TOP:
 F20C      5468726F  6540       db     'Throttle Open % c5 %'
           74746C65 
           204F7065 
           6E202520 
           63352025 
                     6541              ; "TPS_range" table, col 5, percent
                     6542  
                     6543  TPSRANGE_6_TOP:
 F220      5468726F  6544       db     'Throttle Open % c6 %'
           74746C65 
           204F7065 
           6E202520 
           63362025 
                     6545              ; "TPS_range" table, col 6, percent
                     6546  
                     6547  TPSRANGE_7_TOP:
 F234      5468726F  6548       db     'Throttle Open % c7 %'
           74746C65 
           204F7065 
           6E202520 
           63372025 
                     6549              ; "TPS_range" table, col 7, percent
                     6550  
                     6551  EPCSTALL_0_TOP:
 F248      45504364  6552       db     'EPCdf Stall c0 0-255'
           66205374 
           616C6C20 
           63302030 
           2D323535 
                     6553              ; "EPC_stall" table, col 0, 0.5uS
                     6554  
                     6555  EPCSTALL_1_TOP:
 F25C      45504364  6556       db     'EPCdf Stall c1 0-255'
           66205374 
           616C6C20 
           63312030 
           2D323535 
                     6557              ; "EPC_stall" table, col 1, 0.5uS


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 58
MV_TECA


                     6558  
                     6559  EPCSTALL_2_TOP:
 F270      45504364  6560       db     'EPCdf Stall c2 0-255'
           66205374 
           616C6C20 
           63322030 
           2D323535 
                     6561              ; "EPC_stall" table, col 2, 0.5uS
                     6562  
                     6563  EPCSTALL_3_TOP:
 F284      45504364  6564       db     'EPCdf Stall c3 0-255'
           66205374 
           616C6C20 
           63332030 
           2D323535 
                     6565              ; "EPC_stall" table, col 3, 0.5uS
                     6566  
                     6567  EPCSTALL_4_TOP:
 F298      45504364  6568       db     'EPCdf Stall c4 0-255'
           66205374 
           616C6C20 
           63342030 
           2D323535 
                     6569              ; "EPC_stall" table, col 4, 0.5uS
                     6570  
                     6571  EPCSTALL_5_TOP:
 F2AC      45504364  6572       db     'EPCdf Stall c5 0-255'
           66205374 
           616C6C20 
           63352030 
           2D323535 
                     6573              ; "EPC_stall" table, col 5, 0.5uS
                     6574  
                     6575  EPCSTALL_6_TOP:
 F2C0      45504364  6576       db     'EPCdf Stall c6 0-255'
           66205374 
           616C6C20 
           63362030 
           2D323535 
                     6577              ; "EPC_stall" table, col 6, 0.5uS
                     6578  
                     6579  EPCSTALL_7_TOP:
 F2D4      45504364  6580       db     'EPCdf Stall c7 0-255'
           66205374 
           616C6C20 
           63372030 
           2D323535 
                     6581              ; "EPC_stall" table, col 7, 0.5uS
                     6582  
                     6583  EPC12_0_TOP:
 F2E8      45504364  6584       db     'EPCdf 1-->2 c0 0-255'
           6620312D 
           2D3E3220 
           63302030 
           2D323535 
                     6585              ; "EPC_12" table, col 0, 0.5uS
                     6586  
                     6587  EPC12_1_TOP:
 F2FC      45504364  6588       db     'EPCdf 1-->2 c1 0-255'
           6620312D 
           2D3E3220 
           63312030 
           2D323535 
                     6589              ; "EPC_12" table, col 1, 0.5uS
                     6590  
                     6591  EPC12_2_TOP:
 F310      45504364  6592       db     'EPCdf 1-->2 c2 0-255'
           6620312D 
           2D3E3220 
           63322030 
           2D323535 
                     6593              ; "EPC_12" table, col 2, 0.5uS
                     6594  
                     6595  EPC12_3_TOP:
 F324      45504364  6596       db     'EPCdf 1-->2 c3 0-255'
           6620312D 
           2D3E3220 
           63332030 
           2D323535 
                     6597              ; "EPC_12" table, col 3, 0.5uS
                     6598  
                     6599  EPC12_4_TOP:
 F338      45504364  6600       db     'EPCdf 1-->2 c4 0-255'
           6620312D 
           2D3E3220 
           63342030 
           2D323535 
                     6601              ; "EPC_12" table, col 4, 0.5uS
                     6602  
                     6603  EPC12_5_TOP:
 F34C      45504364  6604       db     'EPCdf 1-->2 c5 0-255'
           6620312D 
           2D3E3220 
           63352030 
           2D323535 
                     6605              ; "EPC_12" table, col 5, 0.5uS
                     6606  
                     6607  EPC12_6_TOP:
 F360      45504364  6608       db     'EPCdf 1-->2 c6 0-255'
           6620312D 
           2D3E3220 
           63362030 
           2D323535 
                     6609              ; "EPC_12" table, col 6, 0.5uS
                     6610  
                     6611  EPC12_7_TOP:
 F374      45504364  6612       db     'EPCdf 1-->2 c7 0-255'
           6620312D 
           2D3E3220 
           63372030 
           2D323535 
                     6613              ; "EPC_12" table, col 7, 0.5uS
                     6614  
                     6615  EPC23_0_TOP:
 F388      45504364  6616       db     'EPCdf 2-->3 c0 0-255'
           6620322D 
           2D3E3320 
           63302030 
           2D323535 
                     6617              ; "EPC_23" table, col 0, 0.5uS
                     6618  
                     6619  EPC23_1_TOP:
 F39C      45504364  6620       db     'EPCdf 2-->3 c1 0-255'
           6620322D 
           2D3E3320 
           63312030 
           2D323535 
                     6621              ; "EPC_23" table, col 1, 0.5uS
                     6622  
                     6623  EPC23_2_TOP:
 F3B0      45504364  6624       db     'EPCdf 2-->3 c2 0-255'
           6620322D 
           2D3E3320 
           63322030 
           2D323535 
                     6625              ; "EPC_23" table, col 2, 0.5uS


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 59
MV_TECA


                     6626  
                     6627  EPC23_3_TOP:
 F3C4      45504364  6628       db     'EPCdf 2-->3 c3 0-255'
           6620322D 
           2D3E3320 
           63332030 
           2D323535 
                     6629              ; "EPC_23" table, col 3, 0.5uS
                     6630  
                     6631  EPC23_4_TOP:
 F3D8      45504364  6632       db     'EPCdf 2-->3 c4 0-255'
           6620322D 
           2D3E3320 
           63342030 
           2D323535 
                     6633              ; "EPC_23" table, col 4, 0.5uS
                     6634  
                     6635  EPC23_5_TOP:
 F3EC      45504364  6636       db     'EPCdf 2-->3 c5 0-255'
           6620322D 
           2D3E3320 
           63352030 
           2D323535 
                     6637              ; "EPC_23" table, col 5, 0.5uS
                     6638  
                     6639  EPC23_6_TOP:
 F400      45504364  6640       db     'EPCdf 2-->3 c6 0-255'
           6620322D 
           2D3E3320 
           63362030 
           2D323535 
                     6641              ; "EPC_23" table, col 6, 0.5uS
                     6642  
                     6643  EPC23_7_TOP:
 F414      45504364  6644       db     'EPCdf 2-->3 c7 0-255'
           6620322D 
           2D3E3320 
           63372030 
           2D323535 
                     6645              ; "EPC_23" table, col 7, 0.5uS
                     6646  
                     6647  EPC34_0_TOP:
 F428      45504364  6648       db     'EPCdf 3-->4 c0 0-255'
           6620332D 
           2D3E3420 
           63302030 
           2D323535 
                     6649              ; "EPC_34" table, col 0, 0.5uS
                     6650  
                     6651  EPC34_1_TOP:
 F43C      45504364  6652       db     'EPCdf 3-->4 c1 0-255'
           6620332D 
           2D3E3420 
           63312030 
           2D323535 
                     6653              ; "EPC_34" table, col 1, 0.5uS
                     6654  
                     6655  EPC34_2_TOP:
 F450      45504364  6656       db     'EPCdf 3-->4 c2 0-255'
           6620332D 
           2D3E3420 
           63322030 
           2D323535 
                     6657              ; "EPC_34" table, col 2, 0.5uS
                     6658  
                     6659  EPC34_3_TOP:
 F464      45504364  6660       db     'EPCdf 3-->4 c3 0-255'
           6620332D 
           2D3E3420 
           63332030 
           2D323535 
                     6661              ; "EPC_34" table, col 3, 0.5uS
                     6662  
                     6663  EPC34_4_TOP:
 F478      45504364  6664       db     'EPCdf 3-->4 c4 0-255'
           6620332D 
           2D3E3420 
           63342030 
           2D323535 
                     6665              ; "EPC_34" table, col 4, 0.5uS
                     6666  
                     6667  EPC34_5_TOP:
 F48C      45504364  6668       db     'EPCdf 3-->4 c5 0-255'
           6620332D 
           2D3E3420 
           63352030 
           2D323535 
                     6669              ; "EPC_34" table, col 5, 0.5uS
                     6670  
                     6671  EPC34_6_TOP:
 F4A0      45504364  6672       db     'EPCdf 3-->4 c6 0-255'
           6620332D 
           2D3E3420 
           63362030 
           2D323535 
                     6673              ; "EPC_34" table, col 6, 0.5uS
                     6674  
                     6675  EPC34_7_TOP:
 F4B4      45504364  6676       db     'EPCdf 3-->4 c7 0-255'
           6620332D 
           2D3E3420 
           63372030 
           2D323535 
                     6677              ; "EPC_34" table, col 7, 0.5uS
                     6678  
                     6679  NOT_IMP1_TOP:
 F4C8      436F6E73  6680       db     'Cons Grp1  placehold'
           20477270 
           31202070 
           6C616365 
           686F6C64 
                     6681              ; Out of range value for future expansion
                     6682  
                     6683  
                     6684  ;***************************************************************************
                     6685  ; - This is the second table of character strings for the top lines of the
                     6686  ;   VFD while in "Configure" mode.
                     6687  ;***************************************************************************
                     6688  
                     6689  EPC_TCC_TOP:
 F4DC      45504364  6690       db     'EPCdf TCC App  0-255'
           66205443 
           43204170 
           70202030 
           2D323535 
                     6691              ; EPC duty factor for TCC application
                     6692  
                     6693  EPC_DECEL_TOP:
 F4F0      45504364  6694       db     'EPCdf DFC App  0-255'
           66204446 
           43204170 
           70202030 
           2D323535 
                     6695              ; EPC duty factor for decel conditions
                     6696  
                     6697  EPC_RISE_TOP;


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 60
MV_TECA


 F504      45504320  6698       db     'EPC Rise Time   20mS'
           52697365 
           2054696D 
           65202020 
           32306D53 
                     6699              ; EPC rise time delay(20mS resolution)
                     6700  
                     6701  EPC_HOLD_TOP:
 F518      45504320  6702       db     'EPC Hold Time   20mS'
           486F6C64 
           2054696D 
           65202020 
           32306D53 
                     6703              ; EPC hold time delay(20mS resolution)
                     6704  
                     6705  SS1_DEL_TOP:
 F52C      53533120  6706       db     'SS1 Delay Time  20mS'
           44656C61 
           79205469 
           6D652020 
           32306D53 
                     6707              ; SS1 apply time delay(20mS res)(M2-D2 shift)
                     6708  
                     6709  CCS_DEL_TOP:
 F540      43435320  6710       db     'CCS Delay Time  20mS'
           44656C61 
           79205469 
           6D652020 
           32306D53 
                     6711              ; CCS apply/release time delay(20mS res)(D4 shifts)
                     6712  
                     6713  SSs_DEL_TOP:
 F554      53537320  6714       db     'SSs Delay Time  20mS'
           44656C61 
           79205469 
           6D652020 
           32306D53 
                     6715              ; SSs release time delay(20mS res)(D4 shifts)
                     6716  
                     6717  EXBRK_DEL_TOP:
 F568      45784272  6718       db     'ExBrk Del Time  20mS'
           6B204465 
           6C205469 
           6D652020 
           32306D53 
                     6719              ; Exhaust Brake apply time delay(20mS res)
                     6720  
                     6721  TCC_MIN_RPM_TOP:
 F57C      52504D20  6722       db     'RPM TCC Min   RPM/20'
           54434320 
           4D696E20 
           20205250 
           4D2F3230 
                     6723              ; TCC apply minimum RPM permissive
                     6724  
                     6725  MPH_STALL_TOP:
 F590      4D504820  6726       db     'MPH Stall Max  MPH*2'
           5374616C 
           6C204D61 
           7820204D 
           50482A32 
                     6727              ; MPH maximum for stall EPC
                     6728  
                     6729  TPS_RATE_TOP:
 F5A4      54505320  6730       db     'TPS DOT Min   RPM/20'
           444F5420 
           4D696E20 
           20205250 
           4D2F3230 
                     6731              ; TPS DOT rate threshold for EPC stall settings
                     6732  
                     6733  CT_CNT_TOP:
 F5B8      54505320  6734       db     'TPS Cls Thrt cnt ADC'
           436C7320 
           54687274 
           20636E74 
           20414443 
                     6735              ; Closed throttle position ADC count
                     6736  
                     6737  WOT_CNT_TOP:
 F5CC      54505320  6738       db     'TPS WO Thrt cnt  ADC'
           574F2054 
           68727420 
           636E7420 
           20414443 
                     6739              ; Wide Open throttle position ADC count
                     6740  
                     6741  TPS_SPAN_TOP;
 F5E0      54505320  6742       db     'TPS span (WOT - CT) '
           7370616E 
           2028574F 
           54202D20 
           43542920 
                     6743              ; TPS span for TPS calibration(WOT_cnt - CT_cnt)
                     6744  
                     6745  CT_MIN_TOP:
 F5F4      54505320  6746       db     'TPS Cls Thrt Min % %'
           436C7320 
           54687274 
           204D696E 
           20252025 
                     6747              ; Closed throttle position minimum %
                     6748  
                     6749  ;DITH_ADD_TOP:
                     6750  ;     db     'EPCPW Dither Adder  '
                     6751              ; EPC PW dither adder value
                     6752  
                     6753  ;BAT_FAC_TOP:
                     6754  ;     db     'Bat Volt Cor max val'
                     6755              ; EPC PW Battery Voltge Correction max value
                     6756  
                     6757  TRIM_FAC_TOP:
 F608      45504320  6758       db     'EPC Trim Cor max val'
           5472696D 
           20436F72 
           206D6178 
           2076616C 
                     6759              ; EPC PW Trim Correction max value
                     6760  
                     6761  TUNECONFIG_TOP:
 F61C      54756E20  6762       db     'Tun Config Bit Field'
           436F6E66 
           69672042 
           69742046 
           69656C64 
                     6763              ; Tuning configuration bit field variable
                     6764  
                     6765  RPMK_TOP:
 F630      52504D6B  6766       db     'RPMk Hi 6=039 8=029 '
           20486920 
           363D3033 
           3920383D 
           30323920 
                     6767              ; RPM constant Hi byte, 6cyl = $39, 8cyl = $29
                     6768  
                     6769  RPMK+1_TOP:


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 61
MV_TECA


 F644      52504D6B  6770       db     'RPMk Lo 6=016 8=076 '
           204C6F20 
           363D3031 
           3620383D 
           30373620 
                     6771              ; RPM constant Lo byte, 6cyl = $16, 8cyl = $76
                     6772  
                     6773  TOTEMP_FAC_TOP:
 F658      544F5420  6774       db     'TOT Temp cor max val'
           54656D70 
           20636F72 
           206D6178 
           2076616C 
                     6775              ; Trans Oil Temp correction max value
                     6776  
                     6777  ;AIAC_TOP:
                     6778  ;     db     'Auto IAC start IACpw'
                     6779              ; Auto IAC initial IACpw value
                     6780  
                     6781  ;AIAC_CMP_TOP:
                     6782  ;     db     'Auto IAC time 100mS '
                     6783              ; Auto IAC duration counter compare value
                     6784  
                     6785  TOT_HI_TOP:
 F66C      544F5420  6786       db     'TOT cor rail Hi F-40'
           636F7220 
           7261696C 
           20486920 
           462D3430 
                     6787              ; TOT correction Hi limit (degreesF - 40)
                     6788  
                     6789  TOT_LO_TOP:
 F680      544F5420  6790       db     'TOT cor rail Lo F-40'
           636F7220 
           7261696C 
           204C6F20 
           462D3430 
                     6791              ; TOT correction Lo limit (degreesF - 40)
                     6792  
                     6793  NOT_IMP2_TOP:
 F694      436F6E73  6794       db     'Cons Grp2  placehold'
           20477270 
           32202070 
           6C616365 
           686F6C64 
                     6795              ; Out of range value for future expansion
                     6796  
                     6797  
                     6798  ;***************************************************************************
                     6799  ; - This table is the first 16 bit vector address index, for the tables of
                     6800  ;   the character strings, for the top lines of the VFD while in
                     6801  ;   "Configure" mode.
                     6802  ;***************************************************************************
                     6803  
                     6804  G1_CONS_TL_TB_IND:
 F6A8      EB68      6805       dw     TO_0_0_TOP
 F6AA      EB7C      6806       dw     TO_0_1_TOP
 F6AC      EB90      6807       dw     TO_0_2_TOP
 F6AE      EBA4      6808       dw     TO_0_3_TOP
 F6B0      EBB8      6809       dw     TO_0_4_TOP
 F6B2      EBCC      6810       dw     TO_0_5_TOP
 F6B4      EBE0      6811       dw     TO_0_6_TOP
 F6B6      EBF4      6812       dw     TO_0_7_TOP
 F6B8      EC08      6813       dw     TO_1_0_TOP
 F6BA      EC1C      6814       dw     TO_1_1_TOP
 F6BC      EC30      6815       dw     TO_1_2_TOP
 F6BE      EC44      6816       dw     TO_1_3_TOP
 F6C0      EC58      6817       dw     TO_1_4_TOP
 F6C2      EC6C      6818       dw     TO_1_5_TOP
 F6C4      EC80      6819       dw     TO_1_6_TOP
 F6C6      EC94      6820       dw     TO_1_7_TOP
 F6C8      ECA8      6821       dw     TO_2_0_TOP
 F6CA      ECBC      6822       dw     TO_2_1_TOP
 F6CC      ECD0      6823       dw     TO_2_2_TOP
 F6CE      ECE4      6824       dw     TO_2_3_TOP
 F6D0      ECF8      6825       dw     TO_2_4_TOP
 F6D2      ED0C      6826       dw     TO_2_5_TOP
 F6D4      ED20      6827       dw     TO_2_6_TOP
 F6D6      ED34      6828       dw     TO_2_7_TOP
 F6D8      ED48      6829       dw     TO_3_0_TOP
 F6DA      ED5C      6830       dw     TO_3_1_TOP
 F6DC      ED70      6831       dw     TO_3_2_TOP
 F6DE      ED84      6832       dw     TO_3_3_TOP
 F6E0      ED98      6833       dw     TO_3_4_TOP
 F6E2      EDAC      6834       dw     TO_3_5_TOP
 F6E4      EDC0      6835       dw     TO_3_6_TOP
 F6E6      EDD4      6836       dw     TO_3_7_TOP
 F6E8      EDE8      6837       dw     TO_4_0_TOP
 F6EA      EDFC      6838       dw     TO_4_1_TOP
 F6EC      EE10      6839       dw     TO_4_2_TOP
 F6EE      EE24      6840       dw     TO_4_3_TOP
 F6F0      EE38      6841       dw     TO_4_4_TOP
 F6F2      EE4C      6842       dw     TO_4_5_TOP
 F6F4      EE60      6843       dw     TO_4_6_TOP
 F6F6      EE74      6844       dw     TO_4_7_TOP
 F6F8      EE88      6845       dw     TO_5_0_TOP
 F6FA      EE9C      6846       dw     TO_5_1_TOP
 F6FC      EEB0      6847       dw     TO_5_2_TOP
 F6FE      EEC4      6848       dw     TO_5_3_TOP
 F700      EED8      6849       dw     TO_5_4_TOP
 F702      EEEC      6850       dw     TO_5_5_TOP
 F704      EF00      6851       dw     TO_5_6_TOP
 F706      EF14      6852       dw     TO_5_7_TOP
 F708      EF28      6853       dw     TO_6_0_TOP
 F70A      EF3C      6854       dw     TO_6_1_TOP
 F70C      EF50      6855       dw     TO_6_2_TOP
 F70E      EF64      6856       dw     TO_6_3_TOP
 F710      EF78      6857       dw     TO_6_4_TOP
 F712      EF8C      6858       dw     TO_6_5_TOP
 F714      EFA0      6859       dw     TO_6_6_TOP
 F716      EFB4      6860       dw     TO_6_7_TOP
 F718      EFC8      6861       dw     TO_7_0_TOP
 F71A      EFDC      6862       dw     TO_7_1_TOP
 F71C      EFF0      6863       dw     TO_7_2_TOP
 F71E      F004      6864       dw     TO_7_3_TOP
 F720      F018      6865       dw     TO_7_4_TOP
 F722      F02C      6866       dw     TO_7_5_TOP
 F724      F040      6867       dw     TO_7_6_TOP
 F726      F054      6868       dw     TO_7_7_TOP
 F728      F068      6869       dw     RPMRANGETO_0_TOP
 F72A      F07C      6870       dw     RPMRANGETO_1_TOP
 F72C      F090      6871       dw     RPMRANGETO_2_TOP
 F72E      F0A4      6872       dw     RPMRANGETO_3_TOP
 F730      F0B8      6873       dw     RPMRANGETO_4_TOP
 F732      F0CC      6874       dw     RPMRANGETO_5_TOP
 F734      F0E0      6875       dw     RPMRANGETO_6_TOP
 F736      F0F4      6876       dw     RPMRANGETO_7_TOP
 F738      F108      6877       dw     KPARANGETO_0_TOP
 F73A      F11C      6878       dw     KPARANGETO_1_TOP
 F73C      F130      6879       dw     KPARANGETO_2_TOP
 F73E      F144      6880       dw     KPARANGETO_3_TOP
 F740      F158      6881       dw     KPARANGETO_4_TOP
 F742      F16C      6882       dw     KPARANGETO_5_TOP
 F744      F180      6883       dw     KPARANGETO_6_TOP
 F746      F194      6884       dw     KPARANGETO_7_TOP
 F748      F1A8      6885       dw     TPSRANGE_0_TOP


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 62
MV_TECA


 F74A      F1BC      6886       dw     TPSRANGE_1_TOP
 F74C      F1D0      6887       dw     TPSRANGE_2_TOP
 F74E      F1E4      6888       dw     TPSRANGE_3_TOP
 F750      F1F8      6889       dw     TPSRANGE_4_TOP
 F752      F20C      6890       dw     TPSRANGE_5_TOP
 F754      F220      6891       dw     TPSRANGE_6_TOP
 F756      F234      6892       dw     TPSRANGE_7_TOP
 F758      F248      6893       dw     EPCSTALL_0_TOP
 F75A      F25C      6894       dw     EPCSTALL_1_TOP
 F75C      F270      6895       dw     EPCSTALL_2_TOP
 F75E      F284      6896       dw     EPCSTALL_3_TOP
 F760      F298      6897       dw     EPCSTALL_4_TOP
 F762      F2AC      6898       dw     EPCSTALL_5_TOP
 F764      F2C0      6899       dw     EPCSTALL_6_TOP
 F766      F2D4      6900       dw     EPCSTALL_7_TOP
 F768      F2E8      6901       dw     EPC12_0_TOP
 F76A      F2FC      6902       dw     EPC12_1_TOP
 F76C      F310      6903       dw     EPC12_2_TOP
 F76E      F324      6904       dw     EPC12_3_TOP
 F770      F338      6905       dw     EPC12_4_TOP
 F772      F34C      6906       dw     EPC12_5_TOP
 F774      F360      6907       dw     EPC12_6_TOP
 F776      F374      6908       dw     EPC12_7_TOP
 F778      F388      6909       dw     EPC23_0_TOP
 F77A      F39C      6910       dw     EPC23_1_TOP
 F77C      F3B0      6911       dw     EPC23_2_TOP
 F77E      F3C4      6912       dw     EPC23_3_TOP
 F780      F3D8      6913       dw     EPC23_4_TOP
 F782      F3EC      6914       dw     EPC23_5_TOP
 F784      F400      6915       dw     EPC23_6_TOP
 F786      F414      6916       dw     EPC23_7_TOP
 F788      F428      6917       dw     EPC34_0_TOP
 F78A      F43C      6918       dw     EPC34_1_TOP
 F78C      F450      6919       dw     EPC34_2_TOP
 F78E      F464      6920       dw     EPC34_3_TOP
 F790      F478      6921       dw     EPC34_4_TOP
 F792      F48C      6922       dw     EPC34_5_TOP
 F794      F4A0      6923       dw     EPC34_6_TOP
 F796      F4B4      6924       dw     EPC34_7_TOP
 F798      F4C8      6925       dw     NOT_IMP1_TOP
 F79A      F4C8      6926       dw     NOT_IMP1_TOP
 F79C      F4C8      6927       dw     NOT_IMP1_TOP
 F79E      F4C8      6928       dw     NOT_IMP1_TOP
 F7A0      F4C8      6929       dw     NOT_IMP1_TOP
 F7A2      F4C8      6930       dw     NOT_IMP1_TOP
 F7A4      F4C8      6931       dw     NOT_IMP1_TOP
 F7A6      F4C8      6932       dw     NOT_IMP1_TOP
                     6933  
                     6934  ;***************************************************************************
                     6935  ; - This table is the second 16 bit vector address index, for the tables of
                     6936  ;   the character strings, for the top lines of the VFD while in
                     6937  ;   "Configure" mode.
                     6938  ;***************************************************************************
                     6939  
                     6940  G2_CONS_TL_TB_IND:
 F7A8      F4DC      6941       dw     EPC_TCC_TOP
 F7AA      F4F0      6942       dw     EPC_DECEL_TOP
 F7AC      F504      6943       dw     EPC_RISE_TOP
 F7AE      F518      6944       dw     EPC_HOLD_TOP
 F7B0      F52C      6945       dw     SS1_DEL_TOP
 F7B2      F540      6946       dw     CCS_DEL_TOP
 F7B4      F554      6947       dw     SSs_DEL_TOP
 F7B6      F568      6948       dw     EXBRK_DEL_TOP
 F7B8      F57C      6949       dw     TCC_MIN_RPM_TOP
 F7BA      F590      6950       dw     MPH_STALL_TOP
 F7BC      F5A4      6951       dw     TPS_RATE_TOP
 F7BE      F5B8      6952       dw     CT_CNT_TOP
 F7C0      F5CC      6953       dw     WOT_CNT_TOP
 F7C2      F5E0      6954       dw     TPS_SPAN_TOP
 F7C4      F5F4      6955       dw     CT_MIN_TOP
                     6956  ;     dw     DITH_ADD_TOP
                     6957  ;     dw     BAT_FAC_TOP
 F7C6      F608      6958       dw     TRIM_FAC_TOP
 F7C8      F61C      6959       dw     TUNECONFIG_TOP
 F7CA      F630      6960       dw     RPMK_TOP
 F7CC      F644      6961       dw     RPMK+1_TOP
 F7CE      F658      6962       dw     TOTEMP_FAC_TOP
                     6963  ;     dw     AIAC_TOP
                     6964  ;     dw     AIAC_CMP_TOP
 F7D0      F66C      6965       dw     TOT_HI_TOP
 F7D2      F680      6966       dw     TOT_LO_TOP
 F7D4      F694      6967       dw     NOT_IMP2_TOP
 F7D6      F694      6968       dw     NOT_IMP2_TOP
 F7D8      F694      6969       dw     NOT_IMP2_TOP
 F7DA      F694      6970       dw     NOT_IMP2_TOP
 F7DC      F694      6971       dw     NOT_IMP2_TOP
 F7DE      F694      6972       dw     NOT_IMP2_TOP
 F7E0      F694      6973       dw     NOT_IMP2_TOP
 F7E2      F694      6974       dw     NOT_IMP2_TOP
 F7E4      F694      6975       dw     NOT_IMP2_TOP
 F7E6      F694      6976       dw     NOT_IMP2_TOP
 F7E8      F694      6977       dw     NOT_IMP2_TOP
 F7EA      F694      6978       dw     NOT_IMP2_TOP
 F7EC      F694      6979       dw     NOT_IMP2_TOP
 F7EE      F694      6980       dw     NOT_IMP2_TOP
 F7F0      F694      6981       dw     NOT_IMP2_TOP
 F7F2      F694      6982       dw     NOT_IMP2_TOP
 F7F4      F694      6983       dw     NOT_IMP2_TOP
 F7F6      F694      6984       dw     NOT_IMP2_TOP
 F7F8      F694      6985       dw     NOT_IMP2_TOP
 F7FA      F694      6986       dw     NOT_IMP2_TOP
 F7FC      F694      6987       dw     NOT_IMP2_TOP
 F7FE      F694      6988       dw     NOT_IMP2_TOP
 F800      F694      6989       dw     NOT_IMP2_TOP
 F802      F694      6990       dw     NOT_IMP2_TOP
 F804      F694      6991       dw     NOT_IMP2_TOP
 F806      F694      6992       dw     NOT_IMP2_TOP
 F808      F694      6993       dw     NOT_IMP2_TOP
 F80A      F694      6994       dw     NOT_IMP2_TOP
 F80C      F694      6995       dw     NOT_IMP2_TOP
 F80E      F694      6996       dw     NOT_IMP2_TOP
 F810      F694      6997       dw     NOT_IMP2_TOP
 F812      F694      6998       dw     NOT_IMP2_TOP
 F814      F694      6999       dw     NOT_IMP2_TOP
 F816      F694      7000       dw     NOT_IMP2_TOP
 F818      F694      7001       dw     NOT_IMP2_TOP
 F81A      F694      7002       dw     NOT_IMP2_TOP
 F81C      F694      7003       dw     NOT_IMP2_TOP
 F81E      F694      7004       dw     NOT_IMP2_TOP
 F820      F694      7005       dw     NOT_IMP2_TOP
 F822      F694      7006       dw     NOT_IMP2_TOP
 F824      F694      7007       dw     NOT_IMP2_TOP
 F826      F694      7008       dw     NOT_IMP2_TOP
                     7009  
                     7010  
                     7011  ;***************************************************************************
                     7012  ; - This table is the 16 bit vector address index, for the tables of the
                     7013  ;   character strings, for the top lines of the VFD while in "Display" mode.
                     7014  ;***************************************************************************
                     7015  
                     7016  VARS_TL_TB_IND:
 F828      EA00      7017       dw     VARS0_TL_TB         ; ScrnCnt=0  'ML Gr CC TC FC EP EB'
 F82A      EA14      7018       dw     VARS1_TL_TB         ; ScrnCnt=1  'RPM MPH Prs TOT Vlt '
 F82C      EA28      7019       dw     VARS2_TL_TB         ; ScrnCnt=2  'DuF TPP PWH:PWL Prs '
 F82E      EA3C      7020       dw     VARS3_TL_TB         ; ScrnCnt=3  'SeH SeL IAC Ipw RPM '
 F830      EA50      7021       dw     VARS4_TL_TB         ; ScrnCnt=4  'RPM MAP TPP TrA DuF '


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 63
MV_TECA


 F832      EA64      7022       dw     VARS5_TL_TB         ; ScrnCnt=5  'DuF TtA TrA DF1 DFF '
 F834      EA78      7023       dw     G1_CONS_TL_TB       ; ScrnCnt=6  'Cons Group1 Prs Mode'
 F836      EA8C      7024       dw     G2_CONS_TL_TB       ; ScrnCnt=7  'Cons Group2 Prs Mode'
 F838      EAA0      7025       dw     GET_G1_CONS         ; ScrnCnt=8  'UpLd G1 Cons Prs Mde'
 F83A      EAB4      7026       dw     GET_G2_CONS         ; ScrnCnt=9  'UpLd G2 Cons Prs Mde'
 F83C      EAC8      7027       dw     SEND_G1_VAL         ; ScrnCnt=10 'DnLd G1 val Prs Mode'
 F83E      EADC      7028       dw     SEND_G2_VAL         ; ScrnCnt=11 'DnLd G2 val Prs Mode'
 F840      EAF0      7029       dw     BURN_CONS           ; ScrnCnt=12 'Burn Cons Press Mode'
 F842      EB04      7030       dw     GET_G1_CONS_FIN     ; ScrnCnt=13 'UpLd G1 Done Prs Mde'
 F844      EB18      7031       dw     GET_G2_CONS_FIN     ; ScrnCnt=14 'UpLd G2 Done Prs Mde'
 F846      EB2C      7032       dw     SEND_G1_VAL_FIN     ; ScrnCnt=15 'DnLd V1 Done Prs Mde'
 F848      EB40      7033       dw     SEND_G2_VAL_FIN     ; ScrnCnt=16 'DnLd V2 Done Prs Mde'
 F84A      EB54      7034       dw     BURN_CONS_FIN       ; ScrnCnt=17 'Burn Done Press Mode'
                     7035  
                     7036  ;****************************************************************************
                     7037  ; - Interrupt Vector table
                     7038  ;****************************************************************************
                     7039  
 FFDC                7040       org     vec_timebase  ; Origin at $FFDC = 65500
                     7041  
                     7042  
 FFDC      87E7      7043       dw      Dummy          ;Time Base Vector
 FFDE      87E7      7044       dw      Dummy          ;ADC Conversion Complete
 FFE0      87E7      7045       dw      Dummy          ;Keyboard Vector
 FFE2      87E6      7046       dw      SCITX_ISR      ;SCI Transmit Vector
 FFE4      87AB      7047       dw      SCIRCV_ISR     ;SCI Receive Vector
 FFE6      87E7      7048       dw      Dummy          ;SCI Error Vecotr
 FFE8      87E7      7049       dw      Dummy          ;SPI Transmit Vector
 FFEA      87E7      7050       dw      Dummy          ;SPI Receive Vector
 FFEC      87E7      7051       dw    Dummy          ;TIM2 Overflow Vector
 FFEE      87E7      7052       dw      Dummy          ;TIM2 Ch1 Vector
 FFF0      8726      7053       dw      TIM2CH0_ISR    ;TIM2 Ch0 Vector
 FFF2      87E7      7054       dw      Dummy          ;TIM1 Overflow Vector
 FFF4      87E7      7055       dw      Dummy          ;TIM1 Ch1 Vector
 FFF6      87E7      7056       dw      Dummy          ;TIM1 Ch0 Vector
 FFF8      87E7      7057       dw      Dummy          ;PLL Vector
 FFFA      87E7      7058       dw      Dummy          ;IRQ Vector
 FFFC      87E7      7059       dw      Dummy          ;SWI Vector
 FFFE      8000      7060       dw      Start          ;Reset Vector
                     7061  
 0000                7062       end
                     7063  
                     7064   

 Symbol Table 

ACCEL            0005
ACK              0002
ACKK             0002
ACQ              0005
AC_1             0092
AC_10            0091
AC_100           0090
ADCH0            0000
ADCH1            0001
ADCH2            0002
ADCH3            0003
ADCH4            0004
ADCLK            003E
ADCO             0005
ADD_A_TO_HX      89D0
ADICLK           0004
ADIV0            0005
ADIV1            0006
ADIV2            0007
ADR              003D
ADSCR            003C
AIEN             0006
ARCFLAGS         004D
ARFLAGS          004E
ASCII_CONV_1     E900
ASCII_CONV_10    E800
ASCII_CONV_100   E700
AUTO             0007
BAT              00BC
BCFE             0007
BCS              0004
BKF              0001
BLANK_1_0        014A
BLANK_1_1        014B
BLANK_1_2        014C
BLANK_1_3        014D
BLANK_1_4        014E
BLANK_1_5        014F
BLANK_1_6        0150
BLANK_1_7        0151
BLANK_2_0        0167
BLANK_2_1        0168
BLANK_2_10       0171
BLANK_2_11       0172
BLANK_2_12       0173
BLANK_2_13       0174
BLANK_2_14       0175
BLANK_2_15       0176
BLANK_2_16       0177
BLANK_2_17       0178
BLANK_2_18       0179
BLANK_2_19       017A
BLANK_2_2        0169
BLANK_2_20       017B
BLANK_2_21       017C
BLANK_2_22       017D
BLANK_2_23       017E
BLANK_2_24       017F
BLANK_2_25       0180
BLANK_2_26       0181
BLANK_2_27       0182
BLANK_2_28       0183
BLANK_2_29       0184
BLANK_2_3        016A
BLANK_2_30       0185
BLANK_2_31       0186
BLANK_2_32       0187
BLANK_2_33       0188
BLANK_2_34       0189
BLANK_2_35       018A
BLANK_2_36       018B
BLANK_2_37       018C
BLANK_2_38       018D
BLANK_2_39       018E
BLANK_2_4        016B
BLANK_2_40       018F
BLANK_2_41       0190
BLANK_2_42       0191
BLANK_2_5        016C
BLANK_2_6        016D
BLANK_2_7        016E
BLANK_2_8        016F
BLANK_2_9        0170
BN_CON_SC        834D
BN_CON_SC_JMP    8250
BOTLIN0          0068
BOTLIN0L         007C
BOTLIN1          0069
BOTLIN10         0072
BOTLIN10L        0086


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 64
MV_TECA


BOTLIN11         0073
BOTLIN11L        0087
BOTLIN12         0074
BOTLIN12L        0088
BOTLIN13         0075
BOTLIN13L        0089
BOTLIN14         0076
BOTLIN14L        008A
BOTLIN15         0077
BOTLIN15L        008B
BOTLIN16         0078
BOTLIN16L        008C
BOTLIN17         0079
BOTLIN17L        008D
BOTLIN18         007A
BOTLIN18L        008E
BOTLIN19         007B
BOTLIN19L        008F
BOTLIN1L         007D
BOTLIN2          006A
BOTLIN2L         007E
BOTLIN3          006B
BOTLIN3L         007F
BOTLIN4          006C
BOTLIN4L         0080
BOTLIN5          006D
BOTLIN5L         0081
BOTLIN6          006E
BOTLIN6L         0082
BOTLIN7          006F
BOTLIN7L         0083
BOTLIN8          0070
BOTLIN8L         0084
BOTLIN9          0071
BOTLIN9L         0085
BOTLIN_CHK_C     8714
BOTLIN_CHK_D     85D4
BOTLIN_CHNG      8B98
BRK              85CE
BRKA             0006
BRKE             0007
BRKH             FE09
BRKL             FE0A
BRKON            0003
BRKSCR           FE0B
BRK_DONE         85D1
BTN_WAIT1        88D4
BTN_WAIT2        88DA
BURN_CONS        EAF0
BURN_CONS_FIN    EB54
BUTTON_WAIT      88D4
BYTECNT          005E
BYTEGOAL         005F
CCS              85A2
CCSON            0000
CCS_DEL          0157
CCS_DEL_TOP      F540
CCS_DONE         85A5
CHANGE_MODE      899A
CHARS_DONE       8999
CHECK_GREATER_TH 8BC9
CHECK_LESS_THAN  8BC1
CHK_CHNG_DONE    8921
CHK_DB0          8A6C
CHK_DB1          8A78
CHK_DB2          8A84
CHK_DB3          8A90
CHK_DB4          8A30
CHK_DB5          8A3C
CHK_DB6          8A48
CHK_DB7          8A54
CHK_FRZ_DISP     85D1
CHK_SCRL         860C
CHK_SCRL_DONE    8612
CHXF             0007
CHXIE            0006
CHXMAX           0000
CLSTHRT          0002
CMP_BOTLIN       8ABA
CMP_BOTLIN_DONE  8B9E
COCO             0007
COLNUM           0063
COMP_W_6         837C
COMVAL           0065
CONCNT           0057
CONCNT_LST       0059
CONCNT_PRV       0058
CONFIG1          001F
CONFIG2          001E
CONFIG_CHK       85E6
CONFIG_CHK_DONE  85EF
CONFIG_CHK_JMP   822D
CONFIG_MODE      8604
CONFIG_SCRNS     8406
CONVAL           005B
CONV_8BIT_ASCII  8930
CON_SCRN_1       8690
CON_SCRN_2       868A
COP              0005
COPCTL           FFFF
CPHA             0003
CPOL             0004
CT_CNT           015C
CT_CNT_TOP       F5B8
CT_MIN           015F
CT_MIN_TOP       F5F4
CURCON           005A
D                0004
D1D2             0007
DATVAL           0064
DB0              0000
DB0M             0001
DB1              0001
DB1M             0002
DB2              0002
DB2M             0004
DB3              0003
DB3M             0008
DB4              0000
DB4M             0010
DB5              0001
DB5M             0020
DB6              0002
DB6M             0040
DB7              0003
DB7M             0080
DDRA             0004
DDRB             0005
DDRC             0006
DDRD             0007
DDRE             000C
DECREMENT        892B
DECRMT           8C70
DEC_CON          892B
DEC_CONCNT       864F
DEC_CONCNT2      8665


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 65
MV_TECA


DEC_DONE         892D
DEC_SCRNCNT      83BB
DELAY300         88B2
DF               00CD
DF1              00CE
DFC              85B8
DFCON            0002
DFC_DONE         85BB
DFF              00CF
DF_PRS           84BD
DF_PRS_JMP       8415
DF_TUN           8453
DF_TUN_JMP       840F
DISP_BOT         83E6
DISP_CON_BOT     86A5
DISP_CON_TOP     8678
DISVAL           0067
DIVIDEND         0095
DIVISOR          0097
DIVROUND         8C9A
DIVROUND0        8CAA
DIVROUND1        8CAC
DIVROUND2        8CA7
DMARE            0005
DMATE            0004
DONE_WITH_INTERP 8C0D
DO_BN_CNS        8362
DO_CON_CONV      86E4
DO_GET_G1        8268
DO_GET_G2        82A6
DO_INTERP        8BD4
DO_SND_V1        82E2
DO_SND_V2        8321
DRIVE            8555
DSPLY_CHK        8230
DSPLY_MODE       83CB
DUMMY            87E7
ELSXA            0002
ELSXB            0003
ENABLE           0004
ENSCI            0006
EPC12_0_TOP      F2E8
EPC12_1_TOP      F2FC
EPC12_2_TOP      F310
EPC12_3_TOP      F324
EPC12_4_TOP      F338
EPC12_5_TOP      F34C
EPC12_6_TOP      F360
EPC12_7_TOP      F374
EPC23_0_TOP      F388
EPC23_1_TOP      F39C
EPC23_2_TOP      F3B0
EPC23_3_TOP      F3C4
EPC23_4_TOP      F3D8
EPC23_5_TOP      F3EC
EPC23_6_TOP      F400
EPC23_7_TOP      F414
EPC34_0_TOP      F428
EPC34_1_TOP      F43C
EPC34_2_TOP      F450
EPC34_3_TOP      F464
EPC34_4_TOP      F478
EPC34_5_TOP      F48C
EPC34_6_TOP      F4A0
EPC34_7_TOP      F4B4
EPCMOV           0006
EPCPWH           00D0
EPCPWL           00D1
EPCSTALL_0_TOP   F248
EPCSTALL_1_TOP   F25C
EPCSTALL_2_TOP   F270
EPCSTALL_3_TOP   F284
EPCSTALL_4_TOP   F298
EPCSTALL_5_TOP   F2AC
EPCSTALL_6_TOP   F2C0
EPCSTALL_7_TOP   F2D4
EPC_12_0         0132
EPC_12_1         0133
EPC_12_2         0134
EPC_12_3         0135
EPC_12_4         0136
EPC_12_5         0137
EPC_12_6         0138
EPC_12_7         0139
EPC_23_0         013A
EPC_23_1         013B
EPC_23_2         013C
EPC_23_3         013D
EPC_23_4         013E
EPC_23_5         013F
EPC_23_6         0140
EPC_23_7         0141
EPC_34_0         0142
EPC_34_1         0143
EPC_34_2         0144
EPC_34_3         0145
EPC_34_4         0146
EPC_34_5         0147
EPC_34_6         0148
EPC_34_7         0149
EPC_DECEL        0153
EPC_DECEL_TOP    F4F0
EPC_HOLD         0155
EPC_HOLD_TOP     F518
EPC_RISE         0154
EPC_RISE_TOP     F504
EPC_STALL_0      012A
EPC_STALL_1      012B
EPC_STALL_2      012C
EPC_STALL_3      012D
EPC_STALL_4      012E
EPC_STALL_5      012F
EPC_STALL_6      0130
EPC_STALL_7      0131
EPC_TCC          0152
EPC_TCC_TOP      F4DC
ERASE            0002
ERRIE            0006
ESTOP            0000
EXBRK_DEL        0158
EXBRK_DEL_TOP    F568
FE               0001
FEIE             0001
FIRST            0001
FLAGS            0053
FLBPR            FF7E
FLCR             FE08
FORTH            0004
FOUR             8592
FRZ              0001
FRZCNTR          0051
G1_CONS          86B4
G1_CONS_TL_TB    EA78
G1_CONS_TL_TB_IN F6A8
G2_CONS          86CC
G2_CONS_TL_TB    EA8C


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 66
MV_TECA


G2_CONS_TL_TB_IN F7A8
GEARCNT          00B7
GEARCNT_DONE     859A
GET_G1_CONS      EAA0
GET_G1_CONS_FIN  EB04
GET_G1_SC        8253
GET_G1_SC_JMP    8244
GET_G2_CONS      EAB4
GET_G2_CONS_FIN  EB18
GET_G2_SC        8291
GET_G2_SC_JMP    8247
GET_VECT_ADDR    89BD
GOT_ORD_NUM      8BBB
GUAGES           84F2
GUAGES_JMP       8418
HI_NIB           8A60
HVEN             0008
IAC              00BD
IACPW            00C5
IACPW_RPM        8488
IACPW_RPM_JMP    8412
IDLE             0004
ILAD             0003
ILIE             0004
ILOP             0004
ILTY             0002
IMASK            0001
IMASKK           0001
INCREMENT        8924
INC_CON          8924
INC_CONCNT       861B
INC_CONCNT2      8632
INC_DONE         8926
INC_MS           8750
INC_MSX5         8788
INC_SCRNCNT      83A7
INT1             FE04
INT2             FE05
INT3             FE06
INTACC1          0093
INTACC2          0097
INTKBIER         001B
INTKBSCR         001A
INTSCR           001D
IRQF             0003
KBIE0            0000
KBIE1            0001
KBIE2            0002
KBIE3            0003
KBIE4            0004
KBIE5            0005
KBIE6            0006
KBIE7            0007
KEYF             0003
KPA              00C0
KPARANGETO_0     011A
KPARANGETO_0_TOP F108
KPARANGETO_1     011B
KPARANGETO_1_TOP F11C
KPARANGETO_2     011C
KPARANGETO_2_TOP F130
KPARANGETO_3     011D
KPARANGETO_3_TOP F144
KPARANGETO_4     011E
KPARANGETO_4_TOP F158
KPARANGETO_5     011F
KPARANGETO_5_TOP F16C
KPARANGETO_6     0120
KPARANGETO_6_TOP F180
KPARANGETO_7     0121
KPARANGETO_7_TOP F194
LDA_W_HX_PL_A    89E1
LINCHNG          0005
LINENUM          0062
LININTERP        8BBC
LOAD_1ST_3       8942
LOAD_2ND_3       894F
LOAD_3D_3        895C
LOAD_4TH_3       8969
LOAD_5TH_3       8976
LOAD_BOT         86E7
LOAD_SPACE       88F0
LOCAL_TMP        00B0
LOCK             0006
LONG_DELAY       8AAC
LOOPS            0007
LOOPY            821F
LO_NIB           8A9C
LPFLAGS          004C
LPRS             00BB
LPSI             00C3
LVI              0001
LVIOUT           0007
LVISR            FE0C
M                0004
M1               0006
M2               0005
MAN1             8565
MAN2             855D
MAP              00B8
MASS             0004
MDE              0000
MLPS             00B9
MLPSP            00C1
MLPSP_DONE       8573
MODE             0000
MODECNTR         0050
MODEK            0000
MODF             0004
MODFEN           0002
MODRST           0002
MPH              00B4
MPHSTALL         0004
MPH_STALL        015A
MPH_STALL_TOP    F590
MS               005C
MSX5             005D
MSXA             0004
MSXB             0005
N                0003
NEG_SLOPE        8C00
NEIE             0002
NEUTRAL          854D
NEXT_CHAR        8987
NEXT_RCV_BYTE    87D8
NF               0002
NOT_IMP1_TOP     F4C8
NOT_IMP2_TOP     F694
NOT_SEL_G1       86CA
NOT_SEL_G2       86E4
NO_CHNG_BL0      8AC5
NO_CHNG_BL1      8AD0
NO_CHNG_BL10     8B33
NO_CHNG_BL11     8B3E
NO_CHNG_BL12     8B49
NO_CHNG_BL13     8B54


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 67
MV_TECA


NO_CHNG_BL14     8B5F
NO_CHNG_BL15     8B6A
NO_CHNG_BL16     8B75
NO_CHNG_BL17     8B80
NO_CHNG_BL18     8B8B
NO_CHNG_BL19     8B96
NO_CHNG_BL2      8ADB
NO_CHNG_BL3      8AE6
NO_CHNG_BL4      8AF1
NO_CHNG_BL5      8AFC
NO_CHNG_BL6      8B07
NO_CHNG_BL7      8B12
NO_CHNG_BL8      8B1D
NO_CHNG_BL9      8B28
NO_CHNG_BOTLIN   8B9C
NO_CHNG_CB       8723
NO_CHNG_CT       86A5
NO_CHNG_DB       85E3
NO_CHNG_TOP      83E6
NO_CHNG_TOP10    82D9
NO_CHNG_TOP11    8318
NO_CHNG_TOP12    8359
NO_CHNG_TOP8     825F
NO_CHNG_TOP9     829D
NO_CONFIG        8386
ONE              8583
OOR_GR           8597
OOR_MLP          856D
OR               0003
ORD_TABLE_FIND   8B9F
ORIE             0003
OVRF             0005
P                0001
PARK             853D
PBWC             0037
PCTL             0036
PE               0000
PEIE             0000
PEN              0001
PGM              0001
PIN              0006
PLLF             0006
PLLIE            0007
PLLON            0005
PLL_WAIT         801E
PMDS             003B
PMRS             003A
PMSH             0038
PMSL             0039
POR              0007
PORTA            0000
PORTB            0001
PORTC            0002
PORTD            0003
PORTE            0008
POSINTERP        8BE7
PRE0             0002
PRE1             0003
PRINT_BOT_D      85DD
PRINT_LINE       8983
PRNT_TOPLN_DSP   88E1
PS0              0000
PS1              0001
PS2              0002
PSI              85C3
PSIBRK           0006
PSI_DONE         85C6
PTAPUE           000D
PTCPUE           000E
PTDPUE           000F
PTY              0000
PW_COR           841E
PW_COR_JMP       840C
QUOTIENT         0093
R                0002
R8               0007
RAM_LAST         023F
RAM_START        0040
RCVG1            0003
RCVG2            0004
RCVNG_CON        87BE
RCVNG_G1         87C7
RCVNG_G2         87D0
RCVNG_VAR        87B5
RD_WRT           0005
RE               0002
READBUF          0060
REENT            8BA8
REG_SEL          0006
REMAINDER        0093
REVERSE          8545
ROM_LAST         FDFF
ROM_START        8000
RPF              0000
RPM              00B3
RPMK+1_TOP       F644
RPMKH            0162
RPMKL            0163
RPMK_TOP         F630
RPMRANGETO_0     0112
RPMRANGETO_0_TOP F068
RPMRANGETO_1     0113
RPMRANGETO_1_TOP F07C
RPMRANGETO_2     0114
RPMRANGETO_2_TOP F090
RPMRANGETO_3     0115
RPMRANGETO_3_TOP F0A4
RPMRANGETO_4     0116
RPMRANGETO_4_TOP F0B8
RPMRANGETO_5     0117
RPMRANGETO_5_TOP F0CC
RPMRANGETO_6     0118
RPMRANGETO_6_TOP F0E0
RPMRANGETO_7     0119
RPMRANGETO_7_TOP F0F4
RPMTCC           0003
RTN_TO_0_C       8625
RTN_TO_0_C2      863C
RTN_TO_0_D       83B1
RTN_TO_12        83C3
RTN_TO_127       8657
RTN_TO_63        866D
RWU              0001
SBFCR            FE03
SBK              0000
SBSR             FE00
SBSW             0001
SCBR             0019
SCC1             0013
SCC2             0014
SCC3             0015
SCDR             0018
SCIRCV_ISR       87AB
SCIRCV_ISR_DONE  87E4
SCITX_ISR        87E6
SCRF             0005


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 68
MV_TECA


SCRIE            0005
SCRL_C_LFT       8649
SCRL_C_LFT2_DONE 8670
SCRL_C_LFT_DONE  865A
SCRL_C_RT        8615
SCRL_C_RT2_DONE  863E
SCRL_C_RT_DONE   8627
SCRL_D_LFT       83BB
SCRL_D_LFT_DONE  83C6
SCRL_D_RT        83A7
SCRL_D_RT_DONE   83B3
SCRNCNT          0054
SCRNCNT_LST      0056
SCRNCNT_PRV      0055
SCRN_CNT_CHK     83CB
SCS1             0016
SCS2             0017
SCTE             0007
SCTIE            0007
SECH             00B1
SECL             00B2
SECOND           0002
SEL              0002
SELCNTR          0052
SEL_SET          8609
SEND_G1_VAL      EAC8
SEND_G1_VAL_FIN  EB2C
SEND_G2_VAL      EADC
SEND_G2_VAL_FIN  EB40
SETLSB           8C6E
SET_DB0          8A76
SET_DB1          8A82
SET_DB2          8A8E
SET_DB3          8A9A
SET_DB4          8A3A
SET_DB5          8A46
SET_DB6          8A52
SET_DB7          8A5E
SET_FRZ          83A0
SET_MODE         89AB
SET_SEL          8600
SF               0007
SHFTLP           8C32
SHORT_DELAY      8AB8
SND_G1_SC        82CD
SND_G1_SC_JMP    824A
SND_G2_SC        830C
SND_G2_SC_JMP    824D
SPCR             0010
SPDR             0012
SPE              0001
SPMSTR           0005
SPR0             0000
SPR1             0001
SPRF             0007
SPRIE            0007
SPSCR            0011
SPTE             0003
SPTIE            0000
SPWOM            0002
SRSR             FE01
SS1_DEL          0156
SS1_DEL_TOP      F52C
SSPROG           0004
SSS_DEL_TOP      F554
START            8000
START_BOT_C      871A
STATUS           8527
STATUS_JMP       841B
SUBAR            FE02
SW0              0000
SW0AR            0042
SW0ARC           0041
SW0ARC_CHK_DONE  875E
SW0AR_CHK_DONE   8776
SW0CLS           0000
SW0DB            0040
SW0DB_CHK_DONE   873E
SW0LP            0000
SW0_ARC_CHK      87FA
SW0_ARC_PROG     8805
SW0_AR_PROG      8811
SW0_CHK          87E8
SW0_CHK_DONE     882E
SW0_CLS          8815
SW0_OPN          881C
SW1              0001
SW1AR            0045
SW1ARC           0044
SW1ARC_CHK_DONE  8764
SW1AR_CHK_DONE   877C
SW1CLS           0001
SW1DB            0043
SW1DB_CHK_DONE   8744
SW1LP            0001
SW1_ARC_CHK      8841
SW1_ARC_PROG     884C
SW1_AR_PROG      8858
SW1_CHK          882F
SW1_CHK_DONE     8875
SW1_CLS          885C
SW1_OPN          8863
SW2              0002
SW2AR            0048
SW2ARC           0047
SW2ARC_CHK_DONE  876A
SW2AR_CHK_DONE   8782
SW2CLS           0002
SW2DB            0046
SW2DB_CHK_DONE   874A
SW2LP            0002
SW2_CHK          8876
SW2_CHK_DONE     8893
SW2_OPN          8889
SW3              0003
SW3AR            004B
SW3ARC           004A
SW3ARC_CHK_DONE  8770
SW3AR_CHK_DONE   8788
SW3CLS           0003
SW3DB            0049
SW3DB_CHK_DONE   8750
SW3LP            0003
SW3_CHK          8894
SW3_CHK_DONE     88B1
SW3_OPN          88A7
SWFLAGS          004F
T1CH0H           0026
T1CH0L           0027
T1CH1H           0029
T1CH1L           002A
T1CNTH           0021
T1CNTL           0022
T1MODH           0023
T1MODL           0024
T1SC             0020


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 69
MV_TECA


T1SC0            0025
T1SC1            0028
T2CH0H           0031
T2CH0L           0032
T2CH1H           0034
T2CH1L           0035
T2CNTH           002C
T2CNTL           002D
T2MODH           002E
T2MODL           002F
T2SC             002B
T2SC0            0030
T2SC1            0033
T8               0006
TACK             0003
TBCR             001C
TBIE             0002
TBIF             0007
TBON             0001
TBR0             0004
TBR1             0005
TBR2             0006
TC               0006
TCC              85AD
TCCON            0001
TCC_DONE         85B0
TCC_MIN_RPM      0159
TCC_MIN_RPM_TOP  F57C
TCIE             0006
TCPROG           0005
TE               0003
THIRD            0003
THREE            858D
TIM2CH0_ISR      8726
TIM2CH0_ISR_DONE 87A9
TMP1             009B
TMP10            00A4
TMP11            00A5
TMP12            00A6
TMP13            00A7
TMP14            00A8
TMP15            00A9
TMP16            00AA
TMP17            00AB
TMP18            00AC
TMP19            00AD
TMP2             009C
TMP20            00AE
TMP21            00AF
TMP3             009D
TMP4             009E
TMP5             009F
TMP6             00A0
TMP7             00A1
TMP8             00A2
TMP9             00A3
TOF              0007
TOG_FRZ          8398
TOG_FRZ_DONE     83A2
TOG_MODE1        8392
TOG_MODE2        85F2
TOG_MODE_DONE    89BA
TOG_SEL          85F8
TOG_SEL_DONE     8602
TOIE             0006
TOPLIN_SUB       83DA
TOPVAL           0066
TOT              00BA
TOTADD           00C9
TOTEMP           00C2
TOTEMPDIF        00C7
TOTEMPFAC        0164
TOTEMPP          00C8
TOTEMP_FAC_TOP   F658
TOTHI            0165
TOTLO            0166
TOT_HI_TOP       F66C
TOT_LO_TOP       F680
TOVX             0001
TO_0_0           00D2
TO_0_0_TOP       EB68
TO_0_1           00D3
TO_0_1_TOP       EB7C
TO_0_2           00D4
TO_0_2_TOP       EB90
TO_0_3           00D5
TO_0_3_TOP       EBA4
TO_0_4           00D6
TO_0_4_TOP       EBB8
TO_0_5           00D7
TO_0_5_TOP       EBCC
TO_0_6           00D8
TO_0_6_TOP       EBE0
TO_0_7           00D9
TO_0_7_TOP       EBF4
TO_1_0           00DA
TO_1_0_TOP       EC08
TO_1_1           00DB
TO_1_1_TOP       EC1C
TO_1_2           00DC
TO_1_2_TOP       EC30
TO_1_3           00DD
TO_1_3_TOP       EC44
TO_1_4           00DE
TO_1_4_TOP       EC58
TO_1_5           00DF
TO_1_5_TOP       EC6C
TO_1_6           00E0
TO_1_6_TOP       EC80
TO_1_7           00E1
TO_1_7_TOP       EC94
TO_2_0           00E2
TO_2_0_TOP       ECA8
TO_2_1           00E3
TO_2_1_TOP       ECBC
TO_2_2           00E4
TO_2_2_TOP       ECD0
TO_2_3           00E5
TO_2_3_TOP       ECE4
TO_2_4           00E6
TO_2_4_TOP       ECF8
TO_2_5           00E7
TO_2_5_TOP       ED0C
TO_2_6           00E8
TO_2_6_TOP       ED20
TO_2_7           00E9
TO_2_7_TOP       ED34
TO_3_0           00EA
TO_3_0_TOP       ED48
TO_3_1           00EB
TO_3_1_TOP       ED5C
TO_3_2           00EC
TO_3_2_TOP       ED70
TO_3_3           00ED
TO_3_3_TOP       ED84
TO_3_4           00EE


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 70
MV_TECA


TO_3_4_TOP       ED98
TO_3_5           00EF
TO_3_5_TOP       EDAC
TO_3_6           00F0
TO_3_6_TOP       EDC0
TO_3_7           00F1
TO_3_7_TOP       EDD4
TO_4_0           00F2
TO_4_0_TOP       EDE8
TO_4_1           00F3
TO_4_1_TOP       EDFC
TO_4_2           00F4
TO_4_2_TOP       EE10
TO_4_3           00F5
TO_4_3_TOP       EE24
TO_4_4           00F6
TO_4_4_TOP       EE38
TO_4_5           00F7
TO_4_5_TOP       EE4C
TO_4_6           00F8
TO_4_6_TOP       EE60
TO_4_7           00F9
TO_4_7_TOP       EE74
TO_5_0           00FA
TO_5_0_TOP       EE88
TO_5_1           00FB
TO_5_1_TOP       EE9C
TO_5_2           00FC
TO_5_2_TOP       EEB0
TO_5_3           00FD
TO_5_3_TOP       EEC4
TO_5_4           00FE
TO_5_4_TOP       EED8
TO_5_5           00FF
TO_5_5_TOP       EEEC
TO_5_6           0100
TO_5_6_TOP       EF00
TO_5_7           0101
TO_5_7_TOP       EF14
TO_6_0           0102
TO_6_0_TOP       EF28
TO_6_1           0103
TO_6_1_TOP       EF3C
TO_6_2           0104
TO_6_2_TOP       EF50
TO_6_3           0105
TO_6_3_TOP       EF64
TO_6_4           0106
TO_6_4_TOP       EF78
TO_6_5           0107
TO_6_5_TOP       EF8C
TO_6_6           0108
TO_6_6_TOP       EFA0
TO_6_7           0109
TO_6_7_TOP       EFB4
TO_7_0           010A
TO_7_0_TOP       EFC8
TO_7_1           010B
TO_7_1_TOP       EFDC
TO_7_2           010C
TO_7_2_TOP       EFF0
TO_7_3           010D
TO_7_3_TOP       F004
TO_7_4           010E
TO_7_4_TOP       F018
TO_7_5           010F
TO_7_5_TOP       F02C
TO_7_6           0110
TO_7_6_TOP       F040
TO_7_7           0111
TO_7_7_TOP       F054
TPS              00BF
TPSP             00C6
TPSRANGE_0       0122
TPSRANGE_0_TOP   F1A8
TPSRANGE_1       0123
TPSRANGE_1_TOP   F1BC
TPSRANGE_2       0124
TPSRANGE_2_TOP   F1D0
TPSRANGE_3       0125
TPSRANGE_3_TOP   F1E4
TPSRANGE_4       0126
TPSRANGE_4_TOP   F1F8
TPSRANGE_5       0127
TPSRANGE_5_TOP   F20C
TPSRANGE_6       0128
TPSRANGE_6_TOP   F220
TPSRANGE_7       0129
TPSRANGE_7_TOP   F234
TPSRATE          015B
TPSSPAN          015E
TPS_RATE_TOP     F5A4
TPS_SPAN_TOP     F5E0
TRANS            00B5
TRANS2           00B6
TRIM             00BE
TRIMADD          00CC
TRIMDIF          00CA
TRIMFAC          0160
TRIMP            00CB
TRIM_FAC_TOP     F608
TRST             0004
TSTOP            0005
TUNECONFIG       0161
TUNECONFIG_TOP   F61C
TWO              8588
TXINV            0005
UDVD32           8C0E
UMUL32           8CAD
UMUL32A          8CD1
UMUL32B          8CE3
UPDATE_CON       891B
UPDATE_CON_DONE  892F
UPDATE_DONE      87A7
VALUE            0061
VARS0_TL_TB      EA00
VARS1_TL_TB      EA14
VARS2_TL_TB      EA28
VARS3_TL_TB      EA3C
VARS4_TL_TB      EA50
VARS5_TL_TB      EA64
VARS_TL_TB_IND   F828
VECTOR_ADDRESS   8694
VEC_ADC          FFDE
VEC_IRQ          FFFA
VEC_KBD          FFE0
VEC_PLL          FFF8
VEC_RESET        FFFE
VEC_SCIERR       FFE6
VEC_SCIRX        FFE4
VEC_SCITX        FFE2
VEC_SPIRX        FFEA
VEC_SPITX        FFE8
VEC_SWI          FFFC
VEC_TIM1CH0      FFF6
VEC_TIM1CH1      FFF4


MV_TECA_V11.asm        Assembled with CASM08Z  8/20/06  10:53:47 AM  PAGE 71
MV_TECA


VEC_TIM1OV       FFF2
VEC_TIM2CH0      FFF0
VEC_TIM2CH1      FFEE
VEC_TIM2OV       FFEC
VEC_TIMEBASE     FFDC
VFD_SEND         8A30
VFD_START_BOT    8A12
VFD_START_TOP    89F4
VOLTS            00C4
VPR0             0000
VPR1             0001
VSTOP            0001
WAIT_1           88B4
WAIT_2           88B6
WAIT_3           88B8
WAIT_4           8AAE
WAIT_5           81B5
WAIT_6           81B3
WAKE             0003
WOT_CNT          015D
WOT_CNT_TOP      F5CC
ZERO_SLOPE       8C0B
